<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【hexo】基础教程-十-新手教程学习攻略</title>
      <link href="/archives/1fbdcfa8.html"/>
      <url>/archives/1fbdcfa8.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-九-新增相册与音乐电影功能</title>
      <link href="/archives/6c2846a4.html"/>
      <url>/archives/6c2846a4.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、新增相册"><a href="#一、新增相册" class="headerlink" title="一、新增相册"></a>一、新增相册</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB">首先参考官网新增相册方式</a></p><p>然后我们在hexo项目的根目录下执行如下代码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;gallery&quot;</span><br></pre></td></tr></table></figure><p>然后会在  <code>你的博客/source</code>  下新增一个<code>gallery/index.md</code></p><p>此时我们的page 已经生成好了</p><p>我们在当前的的index目录中新增如下代码</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 相册集</span><br><span class="line">date: 2020-04-21 18:44:23</span><br><span class="line">description:</span><br><span class="line">type: gallery </span><br><span class="line">top<span class="emphasis">_img: &#x27;https://cdn.jsdelivr.net/gh/HCLonely/hclonely.github.io/img/Butterfly/005.webp&#x27;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">---</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="emphasis">&#123;% galleryGroup &#x27;壁紙&#x27; &#x27;收藏的一些壁紙&#x27; &#x27;/gallery/wallpaper&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% galleryGroup &#x27;漫威&#x27; &#x27;關於漫威的圖片&#x27; &#x27;/gallery/marvel&#x27; https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% galleryGroup &#x27;OH MY GIRL&#x27; &#x27;關於OH MY GIRL的圖片&#x27; &#x27;/gallery/ohmygirl&#x27; https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span></span><br><span class="line"><span class="emphasis"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><code>galleryGroup</code>代表的是一个相册合集，目录存放地址在/gallery/wallpaper目录下</p><p>此时我们在 <code>你的博客/source/gallery</code>下新增一个目录<code>wallpaper</code></p><p>在<code>wallpaper</code>中新增一个<code>index.md</code>,然后将我们需要展示的图片放在md文档中，这里借用官方文档的方式来进行描述</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>最后我们查看下效果：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h071b9lg5nj21ck0so0zk.jpg" alt="image-20220312132859702" style="zoom: 25%;" /></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h071bscumgj21dm0sigs4.jpg" alt="image-20220312132929960" style="zoom:25%;" /></p><h2 id="二、新增音乐"><a href="#二、新增音乐" class="headerlink" title="二、新增音乐"></a>二、新增音乐</h2><p>我们在hexo项目的根目录下执行如下代码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;music&quot;</span><br></pre></td></tr></table></figure><p>然后会在  <code>你的博客/source</code>  下新增一个<code>music/index.md</code></p><p>此时我们的page 已经生成好了</p><p>我们在当前的的index目录中新增如下代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Music</span><br><span class="line">date: 2020-04-23 12:58:56</span><br><span class="line">type: &#x27;music&#x27;</span><br><span class="line">top_img: https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_22_28_59_%E9%BA%A6%E7%94%B0.png</span><br><span class="line">cover: https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_22_28_59_%E9%BA%A6%E7%94%B0.png</span><br><span class="line">swiper_index: 995</span><br><span class="line">swiper_desc: 歌单推荐</span><br><span class="line">swiper_cover: https://gitlab.com/valetzx/img/raw/main/img/2022/02/25_22_28_59_%E9%BA%A6%E7%94%B0.png</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># [我的QQ音乐歌单](https://c.y.qq.com/base/fcgi-bin/u?__=8Gjfefjj4DYo)</span><br><span class="line"></span><br><span class="line">&#123;% meting &quot;7537308765&quot; &quot;tencent&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; &quot;theme:#ad7a86&quot;%&#125;   #这里修改meting 为自己的歌单地址即可</span><br></pre></td></tr></table></figure><h2 id="三、新增电影等"><a href="#三、新增电影等" class="headerlink" title="三、新增电影等"></a>三、新增电影等</h2><p>此时我们需要用到一个插件</p><p><code>hexo-butterfly-douban</code></p><p>在原倉庫基礎上，修改了一些內容，適配 <a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly 主題</a>。可以配置 <code>meta</code>, <code>top_img</code>, <code>comments</code> 和 <code>aside</code></p><h3 id="3-1-安裝"><a href="#3-1-安裝" class="headerlink" title="3.1 安裝"></a>3.1 安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-butterfly-douban --save</span><br></pre></td></tr></table></figure><h3 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">douban:</span><br><span class="line">  user: mythsman</span><br><span class="line">  builtin: false</span><br><span class="line">  book:</span><br><span class="line">    title: &#x27;This is my book title&#x27;</span><br><span class="line">    quote: &#x27;This is my book quote&#x27;</span><br><span class="line">    meta: true</span><br><span class="line">    comments: true</span><br><span class="line">    top_img: https://cccccc.png</span><br><span class="line">    aside: true</span><br><span class="line">    path: books</span><br><span class="line">    limit:</span><br><span class="line">  movie:</span><br><span class="line">    title: &#x27;This is my movie title&#x27;</span><br><span class="line">    quote: &#x27;This is my movie quote&#x27;</span><br><span class="line">    meta: true</span><br><span class="line">    comments: true</span><br><span class="line">    top_img: https://cccccc.png</span><br><span class="line">    aside: true</span><br><span class="line">    path: movies</span><br><span class="line">    limit:</span><br><span class="line">  game:</span><br><span class="line">    title: &#x27;This is my game title&#x27;</span><br><span class="line">    quote: &#x27;This is my game quote&#x27;</span><br><span class="line">    meta: true</span><br><span class="line">    comments: true</span><br><span class="line">    top_img: https://cccccc.png</span><br><span class="line">    aside: true</span><br><span class="line">    path: games</span><br><span class="line">    limit:</span><br><span class="line">  timeout: 10000 </span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>參數</th><th>解釋</th></tr></thead><tbody><tr><td>user</td><td>你的豆瓣ID.打開豆瓣，登入賬户，然後在右上角點擊 “個人主頁” ，這時候地址欄的URL大概是這樣：”<a href="https://www.douban.com/people/xxxxxx/">https://www.douban.com/people/xxxxxx/</a>“ ，其中的”xxxxxx”就是你的個人ID了</td></tr><tr><td>builtin</td><td>是否將生成頁面的功能嵌入<code>hexo s</code>和<code>hexo g</code>中，默認是<code>false</code>,另一可選項為<code>true</code>(1.x.x版本新增配置項)</td></tr><tr><td>title</td><td>該頁面的標題</td></tr><tr><td>quote</td><td>寫在頁面開頭的一段話,支持 html 語法.</td></tr><tr><td>timeout</td><td>【可選】爬取數據的超時時間，默認是 10000ms ,如果在使用時發現報了超時的錯(ETIMEOUT)可以把這個數據設置的大一點</td></tr><tr><td>meta</td><td>【可選】插入 <code>&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;</code> 到頁面，可解決部分瀏覽器無法顯示豆瓣圖片的問題（會導致一些插件出錯，例如 不蒜子計數器。）</td></tr><tr><td>comments</td><td>【可選】是否顯示評論</td></tr><tr><td>top_img</td><td>【可選】是否顯示頂部圖</td></tr><tr><td>aside</td><td>【可選】是否顯示側邊欄</td></tr><tr><td>path</td><td>【可選】生成的網址 movie 頁面默認為 <code>//yourblog/movies</code> book 頁面默認為 <code>//yourblog/books</code> game 頁面默認為 <code>`//yourblog/games</code></td></tr><tr><td>limit</td><td>【可選】限制爬取的頁數</td></tr></tbody></table></div><p><strong>如果只想顯示某一個頁面(比如movie)，那就把其他的配置項註釋掉即可。</strong></p><h3 id="3-3-使用"><a href="#3-3-使用" class="headerlink" title="3.3 使用"></a>3.3 使用</h3><p>如果設置中 <code>builtin</code> 設為 true 的，直接運行 <code>hexo g</code> 就會自動生成。</p><p>如果設置中 <code>builtin</code> 設為 false 的,需要在 <code>hexo g</code> 後再運行 <code>hexo douban</code></p><h3 id="3-4-注意"><a href="#3-4-注意" class="headerlink" title="3.4 注意"></a>3.4 注意</h3><ol><li><p>hexo-butterfly-douban 會主動生成頁面，所以不需要自己創建。</p></li><li><p>如遇到無法抓取問題，顯示 INFO 0 movies have been loaded in xxx ms, because you are offline or your network is bad</p><p>請過段時間再試試，這我也無能為力。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-八-外挂标签</title>
      <link href="/archives/3a7bc3f4.html"/>
      <url>/archives/3a7bc3f4.html</url>
      
        <content type="html"><![CDATA[<h2 id="npm插件安装方式"><a href="#npm插件安装方式" class="headerlink" title="npm插件安装方式"></a>npm插件安装方式</h2><p>1.安装插件，在博客根目录 <code>[Blogroot]</code> 下打开终端，运行以下指令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure><p>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><p>2.添加配置信息，以下为写法示例</p><p>​    在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line">tag_plugins:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  priority: 5 <span class="comment">#过滤器优先权</span></span><br><span class="line">  issues: <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="built_in">link</span>:</span><br><span class="line">    placeholder: /img/link.png <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line">  CDN:</span><br><span class="line">    anima: https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    jquery: https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js <span class="comment">#issues标签依赖</span></span><br><span class="line">    issues: https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js <span class="comment">#issues标签依赖</span></span><br><span class="line">    iconfont: //at.alicdn.com/t/font_2032782_8d5kxvn09md.js <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    carousel: https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span><br><span class="line">    tag_plugins_css: https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css3.参数释义</span><br></pre></td></tr></table></figure><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><p>样</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line">带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line">带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line">带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line">键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line">密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><p>带 <u>下划线</u> 的文本<br>带 <emp>着重号</emp> 的文本<br>带 <wavy>波浪线</wavy> 的文本<br>带 <del>删除线</del> 的文本<br>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd><br>密码样式的文本：<psw>这里没有验证码</psw></p><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme <span class="keyword">for</span> Hexo %&#125;</span><br></pre></td></tr></table></figure><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">- 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme <span class="keyword">for</span> Hexo %&#125;</span><br></pre></td></tr></table></figure><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。- 超大号文字文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p>## 引用 note> 最新版 `butterfly` 标签支持引用 `fontawesome V5` 图标，效果上已经优于 `volantis` 的 note 标签。故不再额外引入 `volantis的note样式`。~~做样式适配好麻烦的啊，能偷懒就偷懒吧~~以下是 `butterfly` 主题的 note 写法。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h07e016vwmj21120u075x.jpg" alt="image-20220312204759352" style="zoom:25%;" /><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h07e0agnydj20yl0u00ue.jpg" alt="image-20220312204814299" style="zoom:25%;" /><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h07e0hxp9ej20z50u0myw.jpg" alt="image-20220312204826599" style="zoom:25%;" /><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h07e0r8mftj20zr0u0q45.jpg" alt="image-20220312204841058" style="zoom:25%;" /><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h07e11j6y4j211k0u0myz.jpg" alt="image-20220312204857997" style="zoom:25%;" />## 上标标签 tip<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip <span class="built_in">sync</span> %&#125;<span class="built_in">sync</span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div>## 动态标签 anima- On DOM load（当页面加载时显示动画）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>- 调整动画速度<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>- On hover（当鼠标悬停时显示动画）<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>- On parent hover（当鼠标悬停在父级元素时显示动画）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;&lt;p class=&quot;faa-horizontal&quot;&gt;warning&lt;/p&gt;&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;&lt;p class=&quot;faa-flash&quot;&gt;ban&lt;/p&gt;&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div>## 复选列表 checkbox<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox <span class="built_in">times</span> red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div>## 单选列表 radio<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [markdown](https://guides.github.com/features/mastering-markdown/) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div>## 时间轴 timeline<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% timeline %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-07-24 [2.6.6 -&gt; 3.0](https://github.com/volantis-x/hexo-theme-volantis/releases) %&#125;</span><br><span class="line"></span><br><span class="line">1. 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: <span class="literal">true</span>`。</span><br><span class="line">2. 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 `use_cdn: <span class="literal">true</span>` 则需要删除。</span><br><span class="line">3. 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line">4. 2.x 版本的置顶 `top: <span class="literal">true</span>` 改为了 `pin: <span class="literal">true</span>`，并且同样适用于 `layout: page` 的页面。</span><br><span class="line">5. 如果使用了 `hexo-offline` 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-05-15 [2.6.3 -&gt; 2.6.6](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) %&#125;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-04-20 [2.6.2 -&gt; 2.6.3](https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) %&#125;</span><br><span class="line"></span><br><span class="line">1. 全局搜索 `seotitle` 并替换为 `seo_title`。</span><br><span class="line">2. group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。</span><br><span class="line">2. group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline "></div>## 链接卡片 link<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div>## 按钮 btns> `Volantis` 的按钮使用的是 `btn` 和 `btns` 标签。`btns` 和 `butterfly` 的 `button` 不冲突，但是 `btn` 会被强制渲染，导致部分参数失效，而且 `btn` 的效果还是 `butterfly` 的 `button` 更好看些。所以就只适配了 `btns`。- 如果需要显示类似「团队成员」之类的一组含有头像的链接：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>- 或者含有图标的按钮：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>- 圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line">&lt;a href=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span><br><span class="line">  &lt;i class=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;&lt;/i&gt;</span><br><span class="line">  &lt;b&gt;心率管家&lt;/b&gt;</span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  &lt;img src=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a href=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span><br><span class="line">  &lt;i class=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;&lt;/i&gt;</span><br><span class="line">  &lt;b&gt;心率管家&lt;/b&gt;</span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  &lt;img src=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>## github卡片 ghcard用户信息卡片<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; |</span><br></pre></td></tr></table></figure>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a>                | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a>             || ---------------------------------- | ------------------------------------------ || <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a>   | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a> || <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a>  || <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a>            |仓库信息卡片<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure>| <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a>                | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a>       || ---------------------------------------------------------- | ------------------------------------------------------------ || <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a>   | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a> || <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a> || <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a> | <a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a>      |## github徽标 ghbdage> 关于ghbdage参数的更多具体用法可以参看站内教程：[添加github徽标](https://akilar.top/posts/e87ad7f8)基本参数,定义徽标左右文字和图标<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object>信息参数，定义徽标右侧内容背景色，指向链接<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object>拓展参数，支持shields的API的全部参数内容<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object>## 网站卡片 sites<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div>## 行内图片 inlineimage<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。## 单张图片 image添加描述：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>指定宽度：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>指定宽度并添加描述：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>设置占位背景色：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, <span class="built_in">bg</span>=<span class="comment">#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div>## 音频 audio<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div>## 视频 video100%宽度<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br></pre></td></tr></table></figure>​50%宽度<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>25%宽度<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>## 相册 gallery> `Butterfly`自带`gallery`相册，而且会根据图片大小自动调整排版，效果比`Volantis`的`gallery`更好，故不再收录`Volantis`的`gallery`标签。以下为`Butterfly`自带的`gallery`标签写法。相册图库和相册配合使用。> 对于很多同学提问的`gallerygroup`和`gallery`相册页的链接问题。这里说下我个人的使用习惯。> 一般使用相册图库的话，可以在导航栏加一个gallery的page(**使用指令`hexo new page gallery`添加**)，里面放相册图库作为封面。然后在`[Blogroot]/source/gallery/`下面建立相应的文件夹，例如若按照这里的示例，若欲使用`/gallery/MC/`路径访问MC相册，则需要新建`[Blogroot]/source/gallery/MC/index.md`，并在里面填入`gallery`相册内容。gallerygroup 相册图库<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;div class=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 <span class="string">&#x27;/gallery/MC/&#x27;</span> https://npm.elemecdn.com/akilar-candyassets/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ <span class="string">&#x27;/gallery/Gundam/&#x27;</span> https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 <span class="string">&#x27;/gallery/I-am-Akilar/&#x27;</span> https://npm.elemecdn.com/akilar-candyassets/image/20200907113116651.png %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://npm.elemecdn.com/akilar-candyassets/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure>  </div>gallery 相册<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>          </div>## 折叠框 folding<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line">- haha</span><br><span class="line">- hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha &lt;span&gt;&lt;img src=&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27; style=&#x27;height:24px&#x27;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details>## 分栏 tabDemo 1 - 预设选择第一个【默认】<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>Demo 2 - 预设选择tabs<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>Demo 3 - 没有预设值<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line">**tab名字为第一个Tab**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line">**只有图标 没有Tab名字**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line">**名字+icon**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>## 数据集合 issues时间轴标签`timeline`渲染<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&amp;creator=xaoxuu&amp;<span class="built_in">sort</span>=created&amp;direction=desc&amp;page=1&amp;per_page=100 %&#125;</span><br></pre></td></tr></table></figure>对应的仓库`issues`链接:<div class="issues-api timeline"api="https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&creator=xaoxuu&sort=created&direction=desc&page=1&per_page=100"></div>网站卡片标签`sites`渲染- gitee仓库示例  对应的仓库`issues`链接:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?<span class="built_in">sort</span>=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active %&#125;</span><br></pre></td></tr></table></figure><div class="issues-api sites"api="https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div>- github仓库示例<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/xaoxuu/friends/issues?<span class="built_in">sort</span>=updated&amp;state=open&amp;page=1&amp;per_page=100&amp;labels=active %&#125;</span><br></pre></td></tr></table></figure><div class="issues-api sites"api="https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div>网站卡片标签`sites`分组渲染这是`Volantis`主题官网的「示例博客」页面的数据：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/volantis-x/examples/issues?<span class="built_in">sort</span>=updated&amp;state=open&amp;page=1&amp;per_page=100 | group=version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125;</span><br></pre></td></tr></table></figure><div class="issues-api sites"api="https://api.github.com/repos/volantis-x/examples/issues?sort=updated&state=open&page=1&per_page=100"group="version:版本：^4.0,版本：^3.0,版本：^2.0"></div>## 诗词标签 poem<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div></li></ul><h2 id="阿里图标-icon"><a href="#阿里图标-icon" class="headerlink" title="阿里图标 icon"></a>阿里图标 icon</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% icon icon-rat_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-ox_chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-rabbit_mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-snake_si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-goat_wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-rooster_you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-boar_hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg><h2 id="特效标签wow"><a href="#特效标签wow" class="headerlink" title="特效标签wow"></a>特效标签wow</h2><p><code>flip</code>动画效果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate__flip %&#125;</span><br><span class="line">&#123;% note green &#x27;fas fa-fan&#x27; modern%&#125;</span><br><span class="line">`flip`动画效果。</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><div class='wow animate__flip' data-wow-duration='' data-wow-delay='' data-wow-offset=''  data-wow-iteration='' ><div class="note green icon modern"><i class="note-icon fas fa-fan"></i><p><code>flip</code>动画效果。</p></div></div><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate__zoomIn,5s,5s,100,10 %&#125;</span><br><span class="line">&#123;% note blue <span class="string">&#x27;fas fa-bullhorn&#x27;</span> modern%&#125;</span><br><span class="line">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate__slideInRight,5s,5s %&#125;</span><br><span class="line">&#123;% note orange <span class="string">&#x27;fas fa-car&#x27;</span> modern%&#125;</span><br><span class="line">`slideInRight`动画效果，持续`5s`，延时`5s`。</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% wow animate__heartBeat,,5s,,10 %&#125;</span><br><span class="line">&#123;% note red <span class="string">&#x27;fas fa-battery-half&#x27;</span> modern%&#125;</span><br><span class="line">`heartBeat`动画效果，延时`5s`，重复`10`次。</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><h2 id="进度条-progress"><a href="#进度条-progress" class="headerlink" title="进度条 progress"></a>进度条 progress</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><h2 id="注释-notation"><a href="#注释-notation" class="headerlink" title="注释 notation"></a>注释 notation</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span><h2 id="旋转相册-carousel"><a href="#旋转相册-carousel" class="headerlink" title="旋转相册 carousel"></a>旋转相册 carousel</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% carousel <span class="string">&#x27;SF&#x27;</span>,<span class="string">&#x27;strike freedom&#x27;</span> %&#125;</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110444226.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110525753.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110600751.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110621554.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110637459.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110654150.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110707916.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110719787.png)</span><br><span class="line">![](https://npm.elemecdn.com/akilar-candyassets/image/20200907110731118.png)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><div id='SF' class='carousel'><div id="SF-drag-container" class="drag-container"><div id="SF-spin-container" class="spin-container"><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110444226.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110508327.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110525753.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110600751.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110621554.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110637459.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110654150.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110707916.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110719787.png" alt=""><br><img src="https://npm.elemecdn.com/akilar-candyassets/image/20200907110731118.png" alt=""><p>strike freedom</p></div><div id="SF-carousel-ground" class="carousel-ground"></div></div></div><script type="text/javascript">carouselinit('SF');</script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>呆完成的hexo博客配置</title>
      <link href="/archives/29076.html"/>
      <url>/archives/29076.html</url>
      
        <content type="html"><![CDATA[<h2 id="未完成配置"><a href="#未完成配置" class="headerlink" title="未完成配置"></a>未完成配置</h2><ul><li>视频</li><li>碎碎念</li><li>文章首页图片显示，不是太大，就是太小</li><li>整个网站优化</li><li>webpack网站</li></ul><h2 id="需要去搞定的"><a href="#需要去搞定的" class="headerlink" title="需要去搞定的"></a>需要去搞定的</h2><p>这个图片的排版是以宽度100%为准，然后垂直居中。</p><p>你可以试着自己裁剪图片</p><p>网址收藏</p><p>唐先森的博客</p><p>长宽是550px:360px，宽度在不同屏幕下会有所变动。、</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker最新超详细版教程通俗易懂(基础版)</title>
      <link href="/archives/10297.html"/>
      <url>/archives/10297.html</url>
      
        <content type="html"><![CDATA[<p>Docker</p><p>学习重点！</p><ul><li>Docker数据卷</li><li>Docker容器</li><li>Docker Compose</li><li>Docker Swarm （类似于简化版的K8S）</li><li>CI / CD jenkins</li></ul><span id="more"></span><h2 id="一、Docker概述"><a href="#一、Docker概述" class="headerlink" title="一、Docker概述"></a>一、Docker概述</h2><h3 id="1-1-Docker为什么出现"><a href="#1-1-Docker为什么出现" class="headerlink" title="1.1 Docker为什么出现?"></a>1.1 Docker为什么出现?</h3><p>一款产品： 开发–上线 两套环境！应用环境，应用配置！</p><p>开发 — 运维。 问题：我在我的电脑上可以允许！版本更新，导致服务不可用！对于运维来说考验十分大？</p><p>环境配置是十分的麻烦，每一个机器都要部署环境(集群Redis、ES、Hadoop…) !费事费力。</p><p>发布一个项目( jar + (Redis MySQL JDK ES) )，项目能不能带上环境安装打包！</p><p>之前在服务器配置一个应用的环境 Redis、MySQL、JDK、ES、Hadoop 配置超麻烦了，不能够跨平台。开发环境Windows，最后发布到Linux！</p><p>传统：开发jar，运维来做！</p><p>现在：开发打包部署上线，一套流程做完！</p><p>安卓流程：java — apk —发布（应用商店）—- 张三使用apk一安装即可用！</p><p>docker流程： java-jar（环境） — 打包项目带上环境（镜像） — ( Docker仓库：商店）——-下载我们发布的镜像 —- 直接运行即可！</p><p>Docker给以上的问题，提出了解决方案！</p><p><img src="https://img-blog.csdnimg.cn/20210112222004427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Docker的思想就来自于集装箱！</p><p>JRE – 多个应用(端口冲突) – 原来都是交叉的！</p><p>隔离：Docker核心思想！打包装箱！每个箱子是互相隔离的。</p><p>Docker通过隔离机制，可以将服务器利用到极致！</p><p>本质：所有的技术都是因为出现了一些问题，我们需要去解决，才去学习！</p><h3 id="1-2-Docker的历史"><a href="#1-2-Docker的历史" class="headerlink" title="1.2 Docker的历史"></a>1.2 Docker的历史</h3><p>2010年，几个搞IT的年轻人，就在美国成立了一家公司 dotcloud</p><p>做一些 pass 的云计算服务！LXC（Linux Container容器）有关的容器技术！</p><ul><li>Linux Container容器是一种内核虚拟化技术，可以提供轻量级的虚拟化，以便隔离进程和资源。</li></ul><p>他们将自己的技术（容器化技术）命名就是 Docker。</p><p>Docker刚刚延生的时候，没有引起行业的注意！dotCloud，就活不下去！</p><ul><li>开源</li></ul><p>2013年，Docker开源！</p><p>越来越多的人发现docker的优点！火了。Docker每个月都会更新一个版本！</p><p>2014年4月9日，Docker1.0发布！</p><p><strong>docker为什么这么火？</strong>十分的轻巧！</p><p>在容器技术出来之前，我们都是使用虚拟机技术！</p><p>虚拟机：在window中装一个VMware，通过这个软件我们可以虚拟出来一台或者多台电脑！笨重！</p><p>虚拟机也属于虚拟化技术，Docker容器技术，也是一种虚拟化技术！</p><ul><li>vm : linux centos 原生镜像（一个电脑！） 隔离、需要开启多个虚拟机！ 几个G 几分钟</li><li>docker: 隔离，镜像（最核心的环境 4m + jdk + mysql）十分的小巧，运行镜像就可以了！小巧！<br>几个M 秒级启动！</li></ul><p>Docker基于Go语言开发的！开源项目！</p><p>docker官网：<a href="https://www.docker.com/">https://www.docker.com/</a></p><p>文档：<a href="https://docs.docker.com/">https://docs.docker.com/</a> Docker的文档是超级详细的！</p><p>仓库：<a href="https://hub.docker.com/">https://hub.docker.com/</a> 相当于 github</p><h3 id="1-3-Docker能做什么？"><a href="#1-3-Docker能做什么？" class="headerlink" title="1.3 Docker能做什么？"></a>1.3 Docker能做什么？</h3><p>比较Docker和虚拟机技术的不同：</p><ul><li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后在这个系统上安装和运行软件</li><li>容器内的应用直接运行在宿主机的内容，容器是没有自己的内核的，也没有虚拟我们的硬件，所以<br>就轻便了</li><li>每个容器间是互相隔离，每个容器内都有一个属于自己的文件系统，互不影响</li></ul><h3 id="1-4-DevOps-开发、运维"><a href="#1-4-DevOps-开发、运维" class="headerlink" title="1.4 DevOps(开发、运维)"></a>1.4 DevOps(开发、运维)</h3><ul><li>应用更快速的交付和部署</li></ul><p>传统：一对帮助文档，安装程序。</p><p>Docker：打包镜像发布测试一键运行。</p><ul><li>更便捷的升级和扩缩容</li></ul><p>使用了 Docker之后，我们部署应用就和搭积木一样</p><p>项目打包为一个镜像，扩展服务器A！服务器B</p><ul><li>更简单的系统运维</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在容器化之后，我们的开发，测试环境都是高度一致的</span><br></pre></td></tr></table></figure><ul><li>更高效的计算资源利用</li></ul><p>Docker是内核级别的虚拟化，可以在一个物理机上可以运行很多的容器实例！服务器的性能可以被压榨<br>到极致。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="2-1-Docker的基本组成"><a href="#2-1-Docker的基本组成" class="headerlink" title="2.1 Docker的基本组成"></a>2.1 Docker的基本组成</h3><p><img src="https://img-blog.csdnimg.cn/20210112223441225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>一个是Docker的客户端，一个是Docker的主机，一个是Docker的远程仓库：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211129191107734.png" alt="image-20211129191107734"></p><p>构建完之后，我们需要去运行,运行是在docker的服务上面去运行的  ，Docker的守护进程中去运行，首先去镜像中去运行，这个镜像好比是一个Java类模板，运行的时候会产生很多的对象，这些一个个的对象就是我们的镜像</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211129191214657.png" alt="image-20211129191214657"></p><ul><li>镜像（image)：</li></ul><p>docker镜像就好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像==&gt;run==&gt;容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</p><ul><li>容器(container)：</li></ul><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的.</p><p>启动，停止，删除，基本命令</p><p>目前就可以把这个容器理解为就是一个简易的 Linux系统。</p><ul><li>仓库(repository)：</li></ul><p>仓库就是存放镜像的地方！</p><p>仓库分为公有仓库和私有仓库。(很类似git)</p><p>Docker Hub是国外的。</p><p>阿里云…都有容器服务器(配置镜像加速!)</p><h3 id="2-2-安装Docker"><a href="#2-2-安装Docker" class="headerlink" title="2.2 安装Docker"></a>2.2 安装Docker</h3><p>环境准备</p><p>Linux要求内核3.0以上</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">linux内核</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# uname -r</span><br><span class="line">4.18.0-80.11.2.el8_0.x86_64</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">linux系统版本</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# cat /etc/os-release </span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;8 (Core)&quot;</span><br><span class="line">ID=&quot;centos&quot;</span><br><span class="line">ID_LIKE=&quot;rhel fedora&quot;</span><br><span class="line">VERSION_ID=&quot;8&quot;</span><br><span class="line">PLATFORM_ID=&quot;platform:el8&quot;</span><br><span class="line">PRETTY_NAME=&quot;CentOS Linux 8 (Core)&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:centos:centos:8&quot;</span><br><span class="line">HOME_URL=&quot;https://www.centos.org/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;</span><br><span class="line"></span><br><span class="line">CENTOS_MANTISBT_PROJECT=&quot;CentOS-8&quot;</span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=&quot;8&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;</span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=&quot;8&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>安装</li></ul><p>帮助文档：<a href="https://docs.docker.com/engine/install/">https://docs.docker.com/engine/install/</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">1.卸载旧的版本</span></span><br><span class="line">yum remove docker \</span><br><span class="line">    docker-client \</span><br><span class="line">    docker-client-latest \</span><br><span class="line">    docker-common \</span><br><span class="line">    docker-latest \</span><br><span class="line">    docker-latest-logrotate \</span><br><span class="line">    docker-logrotate \</span><br><span class="line">    docker-engine</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">2.需要的安装包</span></span><br><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">3.设置镜像仓库</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo #默认是从国外的，不推荐</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">推荐使用国内的</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="language-bash">更新yum软件包索引</span></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">4.安装docker相关的 docker-ce 社区版 而ee是企业版</span></span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>此时如果执行    <code>yum makecache fast出错的</code></p><p>解决方法：</p><p>1.进入/etc/yum.repos.d</p><p> cd /etc/yum.repos.d</p><p>2.删除相应文件，文件名称对应错误提示中的名称，如：</p><p><img src="https://img2020.cnblogs.com/blog/1060802/202011/1060802-20201104220517510-64681759.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">5.启动docker</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">6. 使用docker version查看是否按照成功</span></span><br><span class="line">docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.11</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.16.9</span><br><span class="line"> Git commit:        dea9396</span><br><span class="line"> Built:             Thu Nov 18 00:36:58 2021</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.11</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.16.9</span><br><span class="line">  Git commit:       847da18</span><br><span class="line">  Built:            Thu Nov 18 00:35:20 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.12</span><br><span class="line">  GitCommit:        7b11cfaabd73bb80907dd23182b9347b4245eb5d</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.2</span><br><span class="line">  GitCommit:        v1.0.2-0-g52b36a2</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">7. 测试</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">8.查看一下下载的这个hello-world镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><p>了解：卸载Docker</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">1. 卸载依赖</span></span><br><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta">#</span><span class="language-bash">2. 删除资源</span></span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"><span class="meta"># </span><span class="language-bash">/var/lib/docker 是docker的默认工作路径！</span></span><br></pre></td></tr></table></figure><h3 id="2-3-阿里云镜像加速"><a href="#2-3-阿里云镜像加速" class="headerlink" title="2.3 阿里云镜像加速"></a>2.3 阿里云镜像加速</h3><p>1、登录阿里云找到容器服务<br>        2、找到镜像加速器</p><p><img src="https://img-blog.csdnimg.cn/20210718152430680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3、配置使用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://78q96cy9.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>回顾HelloWorld流程:</p><p><img src="https://img-blog.csdnimg.cn/2021071908571839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-4-底层原理"><a href="#2-4-底层原理" class="headerlink" title="2.4 底层原理"></a>2.4 底层原理</h3><p>Docker是怎么工作的？</p><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访<br>问！</p><p>Docker-Server接收到Docker-Client的指令，就会执行这个命令！</p><p><img src="https://img-blog.csdnimg.cn/20210719092624997.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>Docker为什么比VM快？</strong></p><p>1、Dokcer有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>2、docker利用的是宿主机的内核，vm 需要是Guest OS</p><p><img src="https://img-blog.csdnimg.cn/20210719100837873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所以说，新建一个容器的时候，docker 不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载 Guest OS，分钟级别的，而docker 是利用宿主机的操作系统，省略了这个复杂的过程，秒级！</p><p><img src="https://img-blog.csdnimg.cn/20210719104158225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="三、Docker常用命令"><a href="#三、Docker常用命令" class="headerlink" title="三、Docker常用命令"></a>三、Docker常用命令</h2><h3 id="3-1-帮助命令"><a href="#3-1-帮助命令" class="headerlink" title="3.1 帮助命令"></a>3.1 帮助命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version #显示docker的版本信息。</span><br><span class="line">docker info #显示docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help #帮助命令</span><br></pre></td></tr></table></figure><p>帮助文档的地址：<a href="https://docs.docker.com/engine/reference/commandline/docker/">https://docs.docker.com/engine/reference/commandline/docker/</a></p><h3 id="3-2-镜像命令"><a href="#3-2-镜像命令" class="headerlink" title="3.2 镜像命令"></a>3.2 镜像命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images #查看所有本地主机上的镜像 可以使用docker image ls代替</span><br><span class="line">docker search 搜索镜像</span><br><span class="line">docker pull 下载镜像 docker image pull</span><br><span class="line">docker rmi 删除镜像 docker image rm</span><br></pre></td></tr></table></figure><p><strong>docker images</strong> 查看所有本地的主机上的镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">docker images</span></span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   4 months ago   13.3kB</span><br><span class="line"><span class="meta"># </span><span class="language-bash">解释</span></span><br><span class="line">REPOSITORY   镜像的仓库源</span><br><span class="line">TAG          镜像的标签</span><br><span class="line">IMAGE ID     镜像的ID</span><br><span class="line">CREATED      镜像的创建时间</span><br><span class="line">SIZE         镜像的大小</span><br><span class="line"><span class="meta"># </span><span class="language-bash">可选项</span></span><br><span class="line">  -a, --all             # 列出所有的镜像</span><br><span class="line">  -q, --quiet           # 只显示镜像的id</span><br><span class="line">docker images -aq ＃显示所有镜像的id</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">docker search mysql</span></span><br><span class="line">NAME                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                             MySQL is a widely used, open-source relation…   11138     [OK]       </span><br><span class="line">mariadb                           MariaDB Server is a high performing open sou…   4221      [OK]       </span><br><span class="line">mysql/mysql-server                Optimized MySQL Server Docker images. Create…   829                  [OK]</span><br><span class="line">percona                           Percona Server is a fork of the MySQL relati…   547       [OK]       </span><br><span class="line">phpmyadmin                        phpMyAdmin - A web interface for MySQL and M…   274       [OK]       </span><br><span class="line">centos/mysql-57-centos7           MySQL 5.7 SQL database server                   89                   </span><br><span class="line">mysql/mysql-cluster               Experimental MySQL Cluster Docker images. Cr…   88   </span><br><span class="line"><span class="meta"># </span><span class="language-bash">可选项</span></span><br><span class="line">--filter=STARS=3000   # 搜索出来的镜像就死starts 大于3000的</span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker search mysql --filter=STARS=3000</span></span><br><span class="line">NAME      DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   11138     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   4221      [OK]</span><br></pre></td></tr></table></figure><p><strong>docker pull 下载镜像</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker pull mysql</span></span><br><span class="line">Using default tag: latest #如果不写tag的话，默认使用的就是latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">b4d181a07f80: Pull complete   # 分层下载，docker images核心  联合文件系统</span><br><span class="line">a462b60610f5: Pull complete </span><br><span class="line">578fafb77ab8: Pull complete </span><br><span class="line">524046006037: Pull complete </span><br><span class="line">d0cbe54c8855: Pull complete </span><br><span class="line">aa18e05cc46d: Pull complete </span><br><span class="line">32ca814c833f: Pull complete </span><br><span class="line">9ecc8abdb7f5: Pull complete </span><br><span class="line">ad042b682e0f: Pull complete </span><br><span class="line">71d327c6bb78: Pull complete </span><br><span class="line">165d1d10a3fa: Pull complete </span><br><span class="line">2f40c47d0626: Pull complete </span><br><span class="line">Digest: sha256:52b8406e4c32b8cf0557f1b74517e14c5393aff5cf0384eff62d9e81f4985d4b   #签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest  #真实地址</span><br><span class="line"><span class="meta"># </span><span class="language-bash">等价于</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"><span class="meta"># </span><span class="language-bash">指定版本下载</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker pull mysql:5.7</span></span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">b4d181a07f80: Already exists </span><br><span class="line">a462b60610f5: Already exists </span><br><span class="line">578fafb77ab8: Already exists </span><br><span class="line">524046006037: Already exists </span><br><span class="line">d0cbe54c8855: Already exists </span><br><span class="line">aa18e05cc46d: Already exists </span><br><span class="line">32ca814c833f: Already exists </span><br><span class="line">52645b4af634: Pull complete </span><br><span class="line">bca6a5b14385: Pull complete </span><br><span class="line">309f36297c75: Pull complete </span><br><span class="line">7d75cacde0f8: Pull complete </span><br><span class="line">Digest: sha256:1a2f9cd257e75cc80e9118b303d1648366bc2049101449bf2c8d82b022ea86b7</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>docker rmi 删除镜像</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">docker rmi -f 镜像<span class="built_in">id</span>         <span class="comment"># 删除指定的镜像</span></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker rmi -f 镜像<span class="built_in">id</span> 镜像<span class="built_in">id</span> 镜像<span class="built_in">id</span> 镜像<span class="built_in">id</span>   <span class="comment"># 删除多个镜像</span></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker rmi -f $(docker images -aq)     <span class="comment"># 删除全部的镜像</span></span></span><br></pre></td></tr></table></figure><h3 id="3-3、容器命令"><a href="#3-3、容器命令" class="headerlink" title="3.3、容器命令"></a>3.3、容器命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run 镜像id 新建容器并启动</span><br><span class="line">docker ps 列出所有运行的容器 docker container list</span><br><span class="line">docker rm 容器id 删除指定容器</span><br><span class="line">docker start 容器id #启动容器</span><br><span class="line">docker restart容器id #重启容器</span><br><span class="line">docker stop 容器id #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id #强制停止当前容器</span><br></pre></td></tr></table></figure><p>说明：我们有了镜像才可以创建容器，linux，下载一个centos镜像来测试学习</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211129205120509.png" alt="image-20211129205120509"></p><p>新建容器并启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;     容器名字   tomcat01   tomcat02，  用来区分容器</span><br><span class="line">-d                后台方式运行  java常用的nohup</span><br><span class="line">-it               使用交互方式运行，进入容器查看内容</span><br><span class="line">-p                指定容器的端口 -p  8080:8080</span><br><span class="line">    -p   ip:主机端口:容器端口</span><br><span class="line">    -p   主机端口:容器端口（常用）</span><br><span class="line">    -p   容器端口</span><br><span class="line">    容器端口</span><br><span class="line">-p                随机指定端口</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker run -it centos /bin/bash</span><br><span class="line">runc: symbol lookup error: runc: undefined symbol: seccomp_api_get</span><br><span class="line">docker: Error response from daemon: cannot start a stopped process: unknown.</span><br></pre></td></tr></table></figure><p>直接运行的时候，我们有时候可能会出现错误，此时我们需要新增一下依赖即可。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libseccomp-devel</span><br></pre></td></tr></table></figure><p>然后重新运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">测试，启动并进入容器</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@460839d39a28 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><p>我们此时发现，我们的主机名称发生了一些变化，新的这个主机名称，也就是我们的镜像的id:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211129210251183.png" alt="image-20211129210251183"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">从容器中退回主机</span></span><br><span class="line">[root@460839d39a28 /]# exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211129210520722.png" alt="image-20211129210520722"></p><p><strong>列出所有的运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">docker ps命令 <span class="comment">#列出当前正在运行的容器</span></span></span><br><span class="line">    # 列出当前正在运行的容器</span><br><span class="line">-a  # 列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=? # 显示最近创建的容器</span><br><span class="line">-q  # 只显示容器的编号</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">列出当前正在运行的容器</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta">#</span><span class="language-bash">列出所有正在运行的容器包含历史运行过的容器</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED          STATUS                       PORTS     NAMES</span><br><span class="line">460839d39a28   centos         &quot;/bin/bash&quot;   6 minutes ago    Exited (127) 2 minutes ago             peaceful_mestorf</span><br><span class="line">cbe729c88d10   centos         &quot;/bin/bash&quot;   6 minutes ago    Created                                dreamy_agnesi</span><br><span class="line">185965df630e   centos         &quot;/bin/bash&quot;   7 minutes ago    Created                                friendly_davinci</span><br><span class="line">127e09783e48   feb5d9fea6a5   &quot;/hello&quot;      57 minutes ago   Created                                hardcore_black</span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit    # 直接容器停止并退出</span><br><span class="line">Ctrl + P + Q # 容器不停止退出</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@1bdee0b9ffdd /]# docker ps[root@iZuf65oftugvcjgk2jncyeZ /]# clear</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED              STATUS              PORTS     NAMES</span><br><span class="line">1bdee0b9ffdd   centos    &quot;/bin/bash&quot;   About a minute ago   Up About a minute             hardcore_khayyam</span><br></pre></td></tr></table></figure><p>此时我们发现，即使我们退出了容器，但是容器还是在后台运行的</p><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器id     # 删除指定容器，不能删除正在运行的容器，如果要强制删除  rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)  # 删除所有的容器</span><br><span class="line">docker ps -a -q | xargs docker rm  # 删除所有的容器</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start 容器id     #启动容器</span><br><span class="line">docker restart 容器id  #重启容器</span><br><span class="line">docker stop 容器id      #停止当前正在运行的容器</span><br><span class="line">docker kill 容器id      #强制停止当前容器</span><br></pre></td></tr></table></figure><h3 id="3-4、常用其他命令"><a href="#3-4、常用其他命令" class="headerlink" title="3.4、常用其他命令"></a>3.4、常用其他命令</h3><h4 id="3-4-1-后台启动容器"><a href="#3-4-1-后台启动容器" class="headerlink" title="3.4.1 后台启动容器:"></a>3.4.1 后台启动容器:</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">命令 docker  run -d 镜像名！</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker run -d centos</span><br><span class="line">6628b8a4eb5562a96213da7e58444554ef0cbf94b717df526072d1cc888812cb</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line"><span class="meta"># </span><span class="language-bash">问题docker  ps，发现centos停止了</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">常见的坑，docker 容器使用后台运行，就必须要有一个前台进程， docker 发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">nginx，容器启动后，发现自己没有提供服务，就会立刻停止，就是没有程序了</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-查看日志"><a href="#3-4-2-查看日志" class="headerlink" title="3.4.2 查看日志"></a>3.4.2 <strong>查看日志</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker logs --help</span><br><span class="line"></span><br><span class="line">Usage:  docker logs [OPTIONS] CONTAINER</span><br><span class="line"></span><br><span class="line">Fetch the logs of a container</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">      --details        Show extra details provided to logs</span><br><span class="line">  -f, --follow         Follow log output</span><br><span class="line">      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</span><br><span class="line">  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)</span><br><span class="line">  -t, --timestamps     Show timestamps</span><br><span class="line">      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)</span><br><span class="line"></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker logs --tf --tail 10 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">自己编写一段shell脚本</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker run -d mysql -c &quot;while true;do echo 666;sleep 1;done;&quot;</span><br><span class="line">41d294333ac2df9b6441f11c467af1c346ed2d243d9a5b02f649318b376c54da</span><br><span class="line"></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES</span><br><span class="line">b1177469c5ce   centos    &quot;/bin/bash -c &#x27;while…&quot;   32 seconds ago   Up 31 seconds             stoic_rubin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">显示日志</span></span><br><span class="line">-tf        #显示日志</span><br><span class="line">--tail=number     #要显示日志条数</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker logs -tf --tail 10 b1177469c5ce</span><br><span class="line">2021-11-30T05:36:35.119212478Z 666</span><br><span class="line">2021-11-30T05:36:36.121208677Z 666</span><br><span class="line">2021-11-30T05:36:37.123249288Z 666</span><br><span class="line">2021-11-30T05:36:38.125155628Z 666</span><br><span class="line">2021-11-30T05:36:39.127012899Z 666</span><br><span class="line">2021-11-30T05:36:40.128800099Z 666</span><br><span class="line">2021-11-30T05:36:41.130658457Z 666</span><br><span class="line">2021-11-30T05:36:42.132566895Z 666</span><br><span class="line">2021-11-30T05:36:43.134436292Z 666</span><br><span class="line">2021-11-30T05:36:44.136354825Z 666</span><br><span class="line">2021-11-30T05:36:45.138181418Z 666</span><br><span class="line">2021-11-30T05:36:46.140294276Z 666</span><br><span class="line">2021-11-30T05:36:47.142204299Z 666</span><br></pre></td></tr></table></figure><h4 id="3-4-3-查看容器中进程信息-ps"><a href="#3-4-3-查看容器中进程信息-ps" class="headerlink" title="3.4.3 查看容器中进程信息 ps"></a><strong>3.4.3 查看容器中进程信息 ps</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">命令 docker top 容器<span class="built_in">id</span></span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker top b1177469c5ce</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                44214               44195               0                   13:35               ?                   00:00:00            /bin/bash -c while true;do echo 666;sleep 1;done;</span><br><span class="line">root                44419               44214               0                   13:38               ?                   00:00:00            /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br></pre></td></tr></table></figure><h4 id="3-4-4-查看镜像的元数据"><a href="#3-4-4-查看镜像的元数据" class="headerlink" title="3.4.4 查看镜像的元数据"></a>3.4.4 <strong>查看镜像的元数据</strong></h4><p>我们想要具体的去了解这个镜像里面到底有一些什么东西</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">命令</span></span><br><span class="line">docker inspect 容器id</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker inspect b1177469c5ce</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;b1177469c5ce2c4dfe615b0291afbb9fcf02c9c8ab7ab47bc0e299a00bb38035&quot;,    #我们的显示的docker镜像id只是实际的id的前面部分</span><br><span class="line">        &quot;Created&quot;: &quot;2021-11-30T05:35:53.708359857Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/bash&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo 666;sleep 1;done;&quot;   #循环执行的脚本</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;running&quot;,</span><br><span class="line">            &quot;Running&quot;: true,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 44214,</span><br><span class="line">            &quot;ExitCode&quot;: 0,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2021-11-30T05:35:54.029745023Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/b1177469c5ce2c4dfe615b0291afbb9fcf02c9c8ab7ab47bc0e299a00bb38035/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/b1177469c5ce2c4dfe615b0291afbb9fcf02c9c8ab7ab47bc0e299a00bb38035/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/b1177469c5ce2c4dfe615b0291afbb9fcf02c9c8ab7ab47bc0e299a00bb38035/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/b1177469c5ce2c4dfe615b0291afbb9fcf02c9c8ab7ab47bc0e299a00bb38035/b1177469c5ce2c4dfe615b0291afbb9fcf02c9c8ab7ab47bc0e299a00bb38035-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/stoic_rubin&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;host&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                0,</span><br><span class="line">                0</span><br><span class="line">            ],</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: null,</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: null,</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;KernelMemory&quot;: 0,</span><br><span class="line">            &quot;KernelMemoryTCP&quot;: 0,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: false,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/28611847bb66c75b582935c3a2cca2dbfeea7eabf7d6a8e0da30388c39deebc6-init/diff:/var/lib/docker/overlay2/70adc9441b28ca6f085201c6718aec46939adcf4f6923a61974653c08e0bbe54/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/28611847bb66c75b582935c3a2cca2dbfeea7eabf7d6a8e0da30388c39deebc6/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/28611847bb66c75b582935c3a2cca2dbfeea7eabf7d6a8e0da30388c39deebc6/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/28611847bb66c75b582935c3a2cca2dbfeea7eabf7d6a8e0da30388c39deebc6/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;b1177469c5ce&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/bash&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo 666;sleep 1;done;&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;533c33305e4f20427ea415128fdc117e7888addc50f8dd3c02fff85413614892&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/533c33305e4f&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;a960b772e6ce24aaf872de835ff2d8b82ee439a7364b28d66884b1bbf4377104&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;54e8f3e9829b70b9677cd07b5fddc1a5cc45614885f9ee0037bb80785da84f91&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;a960b772e6ce24aaf872de835ff2d8b82ee439a7364b28d66884b1bbf4377104&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="3-4-5-进入当前正在运行的容器"><a href="#3-4-5-进入当前正在运行的容器" class="headerlink" title="3.4.5 进入当前正在运行的容器"></a>3.4.5 <strong>进入当前正在运行的容器</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">命令</span></span><br><span class="line">docker exec -it 容器id bashShell</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker exec -it b1177469c5ce /bin/bash</span><br><span class="line">[root@b1177469c5ce /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@b1177469c5ce /]# ps -ef</span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           1       0  0 05:35 ?        00:00:00 /bin/bash -c while true;do echo 666;sleep 1;done;</span><br><span class="line">root         654       0  0 05:46 pts/0    00:00:00 /bin/bash</span><br><span class="line">root         674       1  0 05:46 ?        00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1</span><br><span class="line">root         675     654  0 05:46 pts/0    00:00:00 ps -ef</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">方式二</span></span><br><span class="line">docker attach 容器id</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker attach 596b80f933ac</span><br><span class="line">666</span><br><span class="line">666</span><br><span class="line">666</span><br><span class="line">。。。。一直在执行刚刚我们创建的那个脚本</span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker <span class="built_in">exec</span>    <span class="comment">#进入容器后开启一个新的终端，可以在里面操作（常用）</span></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">docker attach  <span class="comment">#进入容器正在执行的终端，不会启动新的进程！</span></span></span><br></pre></td></tr></table></figure><h4 id="3-4-6-从容器内拷贝到主机上"><a href="#3-4-6-从容器内拷贝到主机上" class="headerlink" title="3.4.6 从容器内拷贝到主机上"></a>3.4.6 <strong>从容器内拷贝到主机上</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 容器id:容器内路径   目的的主机路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看当前主机目录下</span></span><br><span class="line">root@iZuf65oftugvcjgk2jncyeZ ~]# docker ps </span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker run -it centos /bin/bash</span><br><span class="line">[root@7020acf78fbd /]# [root@iZuf65oftugvcjgk2jncyeZ ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS         PORTS     NAMES</span><br><span class="line">7020acf78fbd   centos    &quot;/bin/bash&quot;   7 seconds ago   Up 6 seconds             quizzical_austin</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker exec -it 7020acf78fbd /bin/bash</span><br><span class="line">[root@7020acf78fbd /]# ls </span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@7020acf78fbd /]# cd home </span><br><span class="line">[root@7020acf78fbd home]# ls</span><br><span class="line"><span class="meta">#</span><span class="language-bash">在容器内部新建一个md文件，然后准备在容器外部，将此文件拷贝出来</span></span><br><span class="line">[root@7020acf78fbd home]# touch test.md</span><br><span class="line">[root@7020acf78fbd home]# ls</span><br><span class="line">test.md</span><br><span class="line"></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker cp 7020acf78fbd:/home/test.md /home</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# ls</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# cd home</span><br><span class="line">-bash: cd: home: No such file or directory</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# ls</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# cd /home</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ home]# ls</span><br><span class="line">test.md</span><br><span class="line"><span class="meta"># </span><span class="language-bash">拷贝是一个手动过程，未来我们使用 -v 卷的技术，可以实现数据的自动同步 可以实现镜像的home目录和我们的主机的home目录联通</span></span><br></pre></td></tr></table></figure><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p><img src="https://img-blog.csdnimg.cn/20210720092439814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><div class="table-container"><table><thead><tr><th>命令</th><th>en</th><th>ch</th></tr></thead><tbody><tr><td>attach</td><td>Attach to a running container</td><td>当前shell下attach连接指定运行镜像  但是只会进入默认的执行的终端</td></tr><tr><td>build</td><td>Build an image from a Dockerfile</td><td>通过Dockerfile定制镜像</td></tr><tr><td>commit</td><td>Create a new image from a containers changes</td><td>提交当前容器为新的镜像</td></tr><tr><td>cp</td><td>Copy files/folders from a container to a HOSTDIR or to STDOUT</td><td>从容器中拷贝指定文件或者目录到宿主机中</td></tr><tr><td>create</td><td>Create a new container</td><td>创建一个新的容器，同run 但不启动容器</td></tr><tr><td>diff</td><td>Inspect changes on a containers filesystem</td><td>查看docker容器变化</td></tr><tr><td>events</td><td>Get real time events from the server</td><td>从docker服务获取容器实时事件</td></tr><tr><td>exec</td><td>Run a command in a running container</td><td>在已存在的容器上运行命令</td></tr><tr><td>export</td><td>Export a containers filesystem as a tar archive</td><td>导出容器的内容流作为一个tar归档文件(对应import)</td></tr><tr><td>history</td><td>Show the history of an image</td><td>展示一个镜像形成历史</td></tr><tr><td>images</td><td>List images</td><td>列出系统当前镜像</td></tr><tr><td>import</td><td>Import the contents from a tarball to create a filesystem image</td><td>从tar包中的内容创建一个新的文件系统映像(对应export)</td></tr><tr><td>info</td><td>Display system-wide information</td><td>显示系统相关信息</td></tr><tr><td>inspect</td><td>Return low-level information on a container or image</td><td>查看容器详细信息</td></tr><tr><td>kill</td><td>Kill a running container</td><td>kill指定docker容器</td></tr><tr><td>load</td><td>Load an image from a tar archive or STDIN</td><td>从一个tar包中加载一个镜像(对应save)</td></tr><tr><td>login</td><td>Register or log in to a Docker registry</td><td>注册或者登陆一个docker源服务器</td></tr><tr><td>logout</td><td>Log out from a Docker registry</td><td>从当前Docker registry退出</td></tr><tr><td>logs</td><td>Fetch the logs of a container</td><td>输出当前容器日志信息</td></tr><tr><td>pause</td><td>Pause all processes within a container</td><td>暂停容器</td></tr><tr><td>port</td><td>List port mappings or a specific mapping for the CONTAINER</td><td>查看映射端口对应的容器内部源端口</td></tr><tr><td>ps</td><td>List containers</td><td>列出容器列表</td></tr><tr><td>pull</td><td>Pull an image or a repository from a registry</td><td>从docker镜像源服务器拉取指定镜像或者库镜像</td></tr><tr><td>push</td><td>Push an image or a repository to a registry</td><td>推送指定镜像或者库镜像至docker源服务器</td></tr><tr><td>rename</td><td>Rename a container</td><td>重命名容器</td></tr><tr><td>restart</td><td>Restart a running container</td><td>重启运行的容器</td></tr><tr><td>rm</td><td>Remove one or more containers</td><td>移除一个或者多个容器</td></tr><tr><td>rmi</td><td>Remove one or more images</td><td>移除一个或多个镜像(无容器使用该镜像才可以删除，否则需要删除相关容器才可以继续或者-f强制删除)</td></tr><tr><td>run</td><td>Run a command in a new container</td><td>创建一个新的容器并运行一个命令</td></tr><tr><td>save</td><td>Save an image(s) to a tar archive</td><td>保存一个镜像为一个tar包(对应load)</td></tr><tr><td>search</td><td>Search the Docker Hub for images</td><td>在docker hub中搜索镜像</td></tr><tr><td>start</td><td>Start one or more stopped containers</td><td>启动容器</td></tr><tr><td>stats</td><td>Display a live stream of container(s) resource usage statistics</td><td>统计容器使用资源</td></tr><tr><td>stop</td><td>Stop a running container</td><td>停止容器</td></tr><tr><td>tag</td><td>Tag an image into a repository</td><td>给源中镜像打标签</td></tr><tr><td>top</td><td>Display the running processes of a container</td><td>查看容器中运行的进程信息</td></tr><tr><td>unpause</td><td>Unpause all processes within a container</td><td>取消暂停容器</td></tr><tr><td>version</td><td>Show the Docker version information</td><td>查看容器版本号</td></tr><tr><td>wait</td><td>Block until a container stops, then print its exit code</td><td>截取容器停止时的退出状态值</td></tr></tbody></table></div><h2 id="五、练习"><a href="#五、练习" class="headerlink" title="五、练习"></a>五、练习</h2><h3 id="5-1安装nginx"><a href="#5-1安装nginx" class="headerlink" title="5.1安装nginx"></a>5.1<strong>安装nginx</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">1. 搜索镜像 search 建议大家去docker hub搜索，可以看到帮助文档</span></span><br><span class="line">docker search nginx</span><br><span class="line"><span class="meta">#</span><span class="language-bash">2. 拉取镜像 pull</span></span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="meta">#</span><span class="language-bash">3. 运行测试</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-d 后台运行</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">--name 给容器命名</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-p 宿主机端口：容器内部端口</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">nginx        latest    ea335eea17ab   12 days ago    141MB</span><br><span class="line">mysql        8.0       b05128b000dd   12 days ago    516MB</span><br><span class="line">mysql        latest    b05128b000dd   12 days ago    516MB</span><br><span class="line">centos       latest    5d0da3dc9764   2 months ago   231MB</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">我们通过-d进行后台启动  --name 给我们的容器重新命名  -P 我们容器对外暴露的端口号+</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker run -d --name nginx01 -p 3344:80 nginx</span><br><span class="line">ed2c04828c9f1caa30a2b109af2831b0606e7d1b14122ef66a0df1d0e1a71b93</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS          PORTS                  NAMES</span><br><span class="line">ed2c04828c9f   nginx     &quot;/docker-entrypoint.…&quot;   4 seconds ago       Up 3 seconds    0.0.0.0:3344-&gt;80/tcp   nginx01</span><br><span class="line">7020acf78fbd   centos    &quot;/bin/bash&quot;              About an hour ago   Up 12 minutes   </span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试链接</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# curl localhost:3344</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">进入容器</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@ed2c04828c9f:/# ls</span><br><span class="line">bin  boot  devdocker-entrypoint.d  docker-entrypoint.sh  etchome  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@ed2c04828c9f:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@ed2c04828c9f:/# cd /etc/nginx</span><br><span class="line">root@ed2c04828c9f:/etc/nginx# ls</span><br><span class="line">conf.dfastcgi_paramsmime.types  modules  nginx.conf  scgi_params  uwsgi_params</span><br></pre></td></tr></table></figure><p><code>公网访问nginx:</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130151029501.png" alt="image-20211130151029501"></p><p>端口暴露示意图：</p><p><img src="https://img-blog.csdnimg.cn/2021072014364032.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>思考问题：我们每次改动nginx配置文件，都需要进入容器内部？十分的麻烦，我要是可以在容器外部提供一个映射路径，达到在容器修改文件名，容器内部就可以自动修改？ -v 数据卷！</p><h3 id="5-2安装tomcat"><a href="#5-2安装tomcat" class="headerlink" title="5.2安装tomcat"></a>5.2<strong>安装tomcat</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">官方的使用</span></span><br><span class="line">docker run -it --rm tomcat:9.0</span><br><span class="line"><span class="meta"># </span><span class="language-bash">我们之前的启动都是后台，停止了容器之后，容器还是可以查到     docker run -it --<span class="built_in">rm</span>，一般用来测试，用完就删除</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">下载再启动</span></span><br><span class="line">docker pull tomcat </span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动运行</span></span><br><span class="line">docker run -d -p 3355:8080 --name tomcat01 tomcat</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试访问没有问题</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">进入容器</span></span><br><span class="line">[root@iZ8vbgc3u6dvwrjyp45lyrZ home]# docker exec -it tomcat01 /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">发现问题：1、linux命令少了，2、没有webapps，阿里云镜像的原因。默认是最小的镜像，所有不必要的都剔除掉了。</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">保证最小可运行的环境</span></span><br></pre></td></tr></table></figure><p>思考：如果我们需要部署项目的话，如果我们每次都要进入容器的话是十分麻烦的？如果我们在外部提供了一个映射路径，webapps,那么我们在外部放置项目，就自动同步到内部就好了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130152354136.png" alt="image-20211130152354136"></p><h3 id="5-3部署es-kibana"><a href="#5-3部署es-kibana" class="headerlink" title="5.3部署es+kibana**"></a><em>5.3</em>部署es+kibana**</h3><ul><li>es 暴露的端口很多！</li><li>es 十分消耗内存</li><li>es 的数据一般需要放置到安全目录！挂载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">--net somenetwork ? 网络配置</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">下载启动elasticsearch（Docker一步搞定）</span></span><br><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:7.6.2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">我们可以使用docke stats 来查看cpu的状态</span></span><br><span class="line">CONTAINER ID   NAME      CPU %     MEM USAGE / LIMIT   MEM %     NET I/O   BLOCK I/O   PIDS</span><br><span class="line"><span class="meta">#</span><span class="language-bash">此时我们已经关闭了大部分的进程，为了避免elassicSearch很卡，我们就先关闭其他的全部的端口</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">（轻身经历，不要自己尝试去安装，巨卡无比）</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试一下es是否成功启动</span></span><br><span class="line">➜ ~ curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot; : &quot;d73ad2f22dd3&quot;,</span><br><span class="line">&quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">&quot;cluster_uuid&quot; : &quot;atFKgANxS8CzgIyCB8PGxA&quot;,</span><br><span class="line">&quot;version&quot; : &#123;</span><br><span class="line">&quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">&quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">&quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">&quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">&quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">&quot;build_snapshot&quot; : false,</span><br><span class="line">&quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">&quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">&quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看docker容器使用内存情况（每秒刷新，也挺耗内存的一个命令）</span></span><br><span class="line">➜ ~ docker stats</span><br><span class="line"><span class="meta">#</span><span class="language-bash">关闭，添加内存的限制，修改配置文件 -e 环境配置修改</span></span><br><span class="line">➜ ~ docker rm -f d73ad2f22dd3</span><br><span class="line">➜ ~ docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e</span><br><span class="line">&quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot;</span><br><span class="line">elasticsearch:7.6.2</span><br><span class="line"><span class="meta">#</span><span class="language-bash">下面的这个是搬用别人的结果</span></span><br><span class="line">➜ ~ curl localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot; : &quot;b72c9847ec48&quot;,</span><br><span class="line">&quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">&quot;cluster_uuid&quot; : &quot;yNAK0EORSvq3Wtaqe2QqAg&quot;,</span><br><span class="line">&quot;version&quot; : &#123;</span><br><span class="line">&quot;number&quot; : &quot;7.6.2&quot;,</span><br><span class="line">&quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">&quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">&quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">&quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">&quot;build_snapshot&quot; : false,</span><br><span class="line">&quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">&quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">&quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作业：使用kibana连接es？思考网络如何才能连接。</p><p><img src="https://img-blog.csdnimg.cn/20210720172452779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-4-Docker可视化"><a href="#5-4-Docker可视化" class="headerlink" title="5.4 Docker可视化"></a>5.4 Docker可视化</h3><ul><li>什么是portainer？</li></ul><p>Docker图形化界面管理工具！提供一个后台面板供我们操作！</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">运行如下命令即可 打开可视化服务    -v是挂在，将里面的数据挂在到我们的本机   后面的这个--privileged=<span class="literal">true</span>是授权可以访问，最后的就是安装</span></span><br><span class="line">docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure><p>访问：<a href="http://ip:8088/">http://ip:8088/</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130163401229.png" alt="image-20211130163401229"></p><p>注册登录之后，我们选择一个本地的链接就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130163546756.png" alt="image-20211130163546756"></p><p>登录之后，我们就可以看到当前的这个界面，就是我们本地的docker服务了</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130163749501.png" alt="image-20211130163749501"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130163908561.png" alt="image-20211130163908561"></p><p>平时用的很少的，自己测试玩玩就可以了。</p><ul><li>Rancher(CI/CD)持续集成和持续部署的时候再用</li></ul><h2 id="六、Docker镜像讲解"><a href="#六、Docker镜像讲解" class="headerlink" title="六、Docker镜像讲解"></a>六、Docker镜像讲解</h2><h3 id="6-1-镜像是什么"><a href="#6-1-镜像是什么" class="headerlink" title="6.1 镜像是什么?"></a>6.1 镜像是什么?</h3><p><code>镜像是一种轻量级、可执行的独立软件包</code>，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括<code>代码</code>、<code>运行时</code>、<code>库</code>、<code>环境变量</code>和<code>配置文件</code>。</p><p><strong>所有的应用，直接打包docker镜像，就可以直接跑起来！</strong></p><p>如何得到镜像：</p><ul><li><strong>从远程仓库下载</strong></li><li><strong>朋友拷贝给你</strong></li><li><strong>自己制作一个镜像DockerFile</strong></li></ul><h3 id="6-2-Docker镜像加载原理"><a href="#6-2-Docker镜像加载原理" class="headerlink" title="6.2 Docker镜像加载原理?"></a>6.2 Docker镜像加载原理?</h3><h4 id="6-2-1-UnionFS（联合文件系统）："><a href="#6-2-1-UnionFS（联合文件系统）：" class="headerlink" title="6.2.1 UnionFS（联合文件系统）："></a><strong>6.2.1 UnionFS（联合文件系统）</strong>：</h4><p>Union文件系统（UnionFS）是<code>一种分层、轻量级并且高性能的文件系统</code>，它支持对文件系统的修改作为一次提交来一层层的叠加，类似于Git中的一层一层提交的一个概念，同时可以将不同目录挂载到同一个虚拟文件系统下（unite several directories into a single virtual filesystem）。Union文件系统是Docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把文件系统及叠加起来，这样最终的文件系统包含所有底层的文件和目录</p><p>我们下载的时候看到的一层一层的那个东西，就是我们的一个UnionFS的一个概念：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130164813095.png" alt="image-20211130164813095"></p><p><strong>分层下载。</strong></p><p>我们打个比方，我们现在下载一个mysql5.7版本的镜像，我们再去下载一个mysql8.0版本的镜像，此时我们看下有什么不同点：</p><p>mysql5.7 下载：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130165128846.png" alt="image-20211130165128846"></p><p><strong>mysql8.0下载：<code>此时我们发现，我们下载的时候，提示了，很多文件已经存在了，那么我们就不需要再去下载，我们只需要下载8.0的一些核心文件就可以了，此时，用到的就是我们的一个联合文件系统的一个东西。极大的节省了内存和空间</code>。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130165204766.png" alt="image-20211130165204766"></p><h4 id="6-2-2Dcoker镜像加载原理"><a href="#6-2-2Dcoker镜像加载原理" class="headerlink" title="6.2.2Dcoker镜像加载原理"></a>6.2.2<strong>Dcoker镜像加载原理</strong></h4><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p><p><strong>bootfs</strong>（boot file system）:主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们电箱的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><blockquote><p><code>这个bootfs就相当我们系统启动时候的引导加载，我们启动的时候，主需要一个内核Kernel，以及一个我们用到的加载器bootloader,加载器加载内核之后，我们的系统就运行起来了</code>，此时系统就会卸载bootfs</p></blockquote><p><strong>rootfs</strong>（root file system）:在bootfs之上。包含的就是典型Linux 系统中的 /dev，/proc，/bin，/etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img src="https://img-blog.csdnimg.cn/20210721144206155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li><p>平时我们安装进虚拟机的CentOS都是好几个G，为什么Docker这里才200M？</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql                 5.7       8b43c6af2ad0   12 days ago    448MB</span><br><span class="line">mysql                 8.0       b05128b000dd   12 days ago    516MB</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   8 months ago   79.1MB</span><br></pre></td></tr></table></figure><blockquote><p>对于个精简的<code>OS</code>,<code>rootfs</code>可以很小，只需要包合最基本的命令，工具和程序库就可以了，因为底层直接用<code>Host</code>的<code>kernel</code>，自己只需要提供<code>rootfs</code>就可以了。由此可见对于不同的Linux发行版， boots基本是一致的， <code>rootfs</code>会有差別，因此不同的发行版可以公用<code>bootfs</code>。</p><p>虚拟机是分钟级别，容器是秒级！</p></blockquote></li></ul><h3 id="6-3、分层理解"><a href="#6-3、分层理解" class="headerlink" title="6.3、分层理解"></a>6.3、分层理解</h3><p>我们可以去下载一个镜像，注意观察下载的日志输出，可以看到是一层层的在下载 ，可能有些层是与我们之前是有一些冲突的，或许也有一些层在我们之前下载镜像的时候已经下载过了，所以我们此时下载的时候，我们看下结果。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130165204766.png" alt="image-20211130165204766"></p><p>思考：为什么Docker镜像要采用这种分层的结构呢？</p><p>最大的好处，我觉得莫过于资源共享了！比如有多个镜像都从相同的Base镜像构建而来，那么宿主机只需在磁盘上保留一份base镜像，同时内存中也只需要加载一份base镜像，这样就可以为所有的容器服务了，而且镜像的每一层都可以被共享。</p><p>查看镜像分层的方式可以通过docker image inspect 命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect redis</span><br></pre></td></tr></table></figure><p><strong>最后展示的结果，就是我们所看到的每一层的效果的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130170514747.png" alt="image-20211130170514747"></p><p>理解：</p><p>所有的<code>docker镜像</code>都起始于一个<code>基础镜像层</code>，当进行修改或者增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><blockquote><p>举一个简单的例子，加入基于Ubuntu Linux 16.04创建一个新的镜像，这就是新镜像的第一层；如果在该镜像中添加Python包，就会在基础镜像层之上穿件第二个镜像层；这个就像是windows里面的安全补丁的原理差不多，如果继续添加一个安全补丁，就会创建第三个镜像层。</p></blockquote><p>该镜像当前已经包含3个镜像层，如下图（这只是一个用于演示的很简单的例子）。</p><p><img src="https://img-blog.csdnimg.cn/20210721150133371.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在添加额外的镜像层的同时，镜像始终是保持当前所有镜像的组合，理解这一点非常重要。下图中举了一个简单的例子，每个镜像层包含3个文件，而镜像层包含了来自两镜像层的6个文件。</p><p><img src="https://img-blog.csdnimg.cn/202107211515246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>上图中的镜像层跟之前图中的略有区别，主要目的是便于展示文件。</p><p>下图总展示了一个稍微复杂的三层镜像，在外部看来整个镜像只有6个文件，这是因为最上层的文件7是文件5的一个更新版本。</p><blockquote><p><strong>比如说我们在我们一些基础层当中，原本有了一些环境，比如java、tomcat、maven，然后我们需要再去安装一些redis、mysql或者是python等等，那么我们就只需要在层的概念上，我们添加上一层我们需要添加的环境就可以了，这个是不互相影响的。</strong></p></blockquote><p><img src="https://img-blog.csdnimg.cn/2021072115154375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>那么如果我们此时有一个新增的镜像，此时第一层也是基础的java、tomcat、maven等等，那我们此时第一层的时候就不需要去新建一个层，将我们刚刚的那个镜像的第一层的基础，直接拿过来用就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130171412778.png" alt="image-20211130171412778"></p><p>如果我们的其他层级也不变，那我们也可以直接服用就可以了，如果其他的一些文件发生了一些变化，那我们只需要操作文件就可以，新增挥着修改这一层的文件。所有的镜像都是一步一步的进行分层的 </p><p>这种情况下，上层镜像层中的文件覆盖了底层镜像层中的文件。这样就使得文件的更新版本作为一个新的镜像层添加到镜像当中。</p><p>Docker通过存储引擎（新版本采用快照机制）的方式来实心镜像层堆栈，并保证多镜像层对外展示为统一的文件系统。</p><p>Linux 上可用的存储引擎有AUFS、Overlay2，Device Maper、Btrfs 以及 ZFS。顾名思义，没种存储引擎都基于Linux中对应的文件系统或者块设备技术，并且每种存储引擎都有其独有的性能特点。</p><p>Docker在Windows上仅支持windowsfiler 一种存储引擎，该引擎基于NTFS文件系统之上实现了分层和CoW。</p><p>下图展示了与系统显示相同的三层镜像。所有镜像层堆叠并合并，对外提供统一的视图。</p><p><img src="https://img-blog.csdnimg.cn/20210721155437445.png" alt="在这里插入图片描述"></p><p><strong>特点</strong></p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部！</p><p>这一层就是我们通常说的容器层，容器之下的都叫镜像层。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130174838804.png" alt="image-20211130174838804"></p><p><strong>我们原本的tomcat只是一个镜像，如果我们在tomcat上执行一些操作的话，我们就会在本来tomcat上新增一层，我们执行的所有的操作都在这里，此时我们将我们的tomcat底层镜像和我们对它的一些操作，依然可以打包成一个大的新的镜像。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130200246710.png" alt="image-20211130200246710"></p><h3 id="6-4-commit镜像"><a href="#6-4-commit镜像" class="headerlink" title="6.4 commit镜像"></a>6.4 commit镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器成为一个新的副本</span><br><span class="line"><span class="meta"># </span><span class="language-bash">命令和git原理类似</span></span><br><span class="line">docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]</span><br></pre></td></tr></table></figure><p>实战测试：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">1、启动一个默认的tomcat</span></span><br><span class="line">docker run -d -p 8080:8080 tomcat</span><br><span class="line"><span class="meta"># </span><span class="language-bash">2、发现这个默认的tomcat 是没有webapps应用，官方的镜像默认webapps下面是没有文件的！</span></span><br><span class="line">docker exec -it 容器id</span><br><span class="line"><span class="meta"># </span><span class="language-bash">3、拷贝文件进去</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">4、将操作过的容器通过commit**为一个镜像！我们以后就使用我们修改过的镜像即可，这就是我们自己的一个修改的镜像。</span></span><br><span class="line">docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[TAG]docker commit -a=&quot;kuangshen&quot; -m=&quot;add webapps app&quot; 容器id tomcat02:1.0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211130205722972.png" alt="image-20211130205722972"></p><p>如果你想要保存当前容器的状态，就可以通过commit来提交，获得一个镜像，就好比我们我们使用虚拟机的快照。</p><p>到了这里才算入门成功！！！！</p><h2 id="七、容器数据卷"><a href="#七、容器数据卷" class="headerlink" title="七、容器数据卷"></a>七、容器数据卷</h2><h3 id="7-1-什么是容器卷？"><a href="#7-1-什么是容器卷？" class="headerlink" title="7.1 什么是容器卷？"></a>7.1 什么是容器卷？</h3><p>docker的理念回顾</p><p>将应用和环境打包成一个镜像！</p><p>数据？如果数据都在容器中，那么我们容器删除，数据就会丢失！·需求：<code>数据可以持久化</code></p><p>MySQL，容器删除了，删库跑路！需求：<code>MySQL数据可以存储在本地</code>！</p><p>容器之间可以有一个数据共享的技术！Docker容器中产生的数据，同步到本地！</p><p>这就是卷技术！目录的挂载，将我们容器内的目录，挂载到Linux上面！</p><p><img src="https://img-blog.csdnimg.cn/20210721201603322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>总结一句话：容器的持久化和同步操作！容器间也是可以数据共享的！</p><h3 id="7-2-使用数据卷"><a href="#7-2-使用数据卷" class="headerlink" title="7.2 使用数据卷"></a>7.2 使用数据卷</h3><p>方式一 ：直接使用命令挂载 -v</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-v, --volume list Bind mount a volume</span><br><span class="line">docker run -it -v 主机目录:容器内目录 </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">测试案例</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker run -it -v /home/centosTest:/home centos /bin/bash</span><br><span class="line">[root@7ec96a6e11b1 /]# ls</span><br><span class="line">bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">[root@7ec96a6e11b1 /]# cd home</span><br><span class="line">[root@7ec96a6e11b1 home]# [root@iZuf65oftugvcjgk2jncyeZ ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND        CREATED          STATUS          PORTS                    NAMES</span><br><span class="line">7ec96a6e11b1   centos                &quot;/bin/bash&quot;    14 seconds ago   Up 13 seconds                            wonderful_babbage</span><br><span class="line">0cbfc2fdebb0   tomcat:8.0            &quot;/bin/bash&quot;    13 hours ago     Up 13 hours     0.0.0.0:3344-&gt;8080/tcp   tomcat_cesium</span><br><span class="line">f8e444781a2b   portainer/portainer   &quot;/portainer&quot;   17 hours ago     Up 17 hours     0.0.0.0:8088-&gt;9000/tcp   friendly_black</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">我们可以通国如下命令查看</span></span><br><span class="line">docker inspect</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201090838131.png" alt="image-20211201090838131"></p><p>测试文件的同步:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201091209467.png" alt="image-20211201091209467"></p><p><strong>我们此时发现，我们容器内的数据和我们宿主机的挂在地址的数据是同步的。</strong></p><p>再来测试！<br><strong>1、停止容器</strong><br><strong>2、宿主机修改文件</strong><br><strong>3、启动容器</strong><br><strong>4、容器内的数据依旧是同步的</strong></p><p>5.<strong>数据的同步是双向的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201092052234.png" alt="image-20211201092052234"></p><h3 id="7-3-实战：安装MySQL"><a href="#7-3-实战：安装MySQL" class="headerlink" title="7.3 实战：安装MySQL"></a>7.3 实战：安装MySQL</h3><p>思考：MySQL的数据持久化的问题</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">1.获取mysql镜像</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">2.运行容器,需要做数据挂载</span> </span><br><span class="line"><span class="meta"># </span><span class="language-bash">3.安装启动mysql，需要配置密码的，这是要注意点！</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">参考官网hub</span></span><br><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag</span><br><span class="line"><span class="meta">#</span><span class="language-bash">启动我们得</span></span><br><span class="line">-d 后台运行</span><br><span class="line">-p 端口映射</span><br><span class="line">-v 卷挂载</span><br><span class="line">-e 环境配置  MYSQL_ROOT_PASSWORD mysql启动的时候需要我们手动去配置数据密码</span><br><span class="line">-- name 容器名字</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker run -d -p 3305:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=mysql01 mysql:8.0</span><br><span class="line">363237d651c59a35ce0069a1b224481eecc4c07ec7dda22f6f86812d7b7d6f59</span><br><span class="line"><span class="meta"># </span><span class="language-bash">启动成功之后，我们在本地使用navicat来测试一下</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">navicat-连接到服务器的3305--和容器内的3306映射</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">在本地测试创建一个数据库，查看一下我们映射的路径是否ok！</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-2021120109470036123.png" alt="image-20211201094700361"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201093838156.png" alt="image-20211201093838156"></p><p>此时我们本地连接的时候，我们手动创建了一个数据库，我们去镜像中看下，是否存在一个。此时我们发现，我们的数据在我们的宿主机和容器内都是同时存在的</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201095100098.png" alt="image-20211201095100098"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201095039843.png" alt="image-20211201095039843"></p><p>那么如果我们之后想要去修改mysql的配置文件，我们只需要在挂在的宿主机的文件目录下修改即可。</p><p>那如果我们此时有个场景，如果我们把mysql的镜像都删除掉了，那么我们的数据会被删除吗，我们测试下。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201095403173.png" alt="image-20211201095403173"></p><p>在我们删除完数据之后，我们的容器没有了，但是我们宿主机中的数据依旧是存在的。数据依旧是保存在我们的本地，数据是不会丢失的。这就实现了我们的容器数据持久化功能。</p><h3 id="7-4-具名和匿名挂载"><a href="#7-4-具名和匿名挂载" class="headerlink" title="7.4 具名和匿名挂载"></a>7.4 具名和匿名挂载</h3><h4 id="7-4-1-匿名挂载"><a href="#7-4-1-匿名挂载" class="headerlink" title="7.4.1 匿名挂载"></a>7.4.1 匿名挂载</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-v 容器内路径</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">-d  后台启动</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-P 随机端口</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">--name 容器命名</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">-v 挂载地址</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line">Unable to find image &#x27;nginx:latest&#x27; locally</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">eff15d958d66: Already exists </span><br><span class="line">1e5351450a59: Pull complete </span><br><span class="line">2df63e6ce2be: Pull complete </span><br><span class="line">9171c7ae368c: Pull complete </span><br><span class="line">020f975acd28: Pull complete </span><br><span class="line">266f639b35ad: Pull complete </span><br><span class="line">Digest: sha256:097c3a0913d7e3a5b01b6c685a60c03632fc7a2b50bc8e35bcaa3691d788226e</span><br><span class="line">Status: Downloaded newer image for nginx:latest</span><br><span class="line">5277eeef2d08bd10759a69068ae89b4a8c449d08be514cf0822f62d72912567b</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">查看所有数据卷  这些都是匿名的  这就是匿名挂载  就像我们java中去new一个匿名内部类，这个内部类是没有名字的</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     2c38ac8053ab09fdd8b18ac921b4f08bee0c4789420eb21261dcb3921332e33b</span><br><span class="line">local     2ce495b1fffb7902dc33945543608fa9829bc15753764f548eb823169b7d6362</span><br><span class="line">local     125f78fb872eee7af45cc23cd7224432ab3b0a6425578f90fbf22a44b06cb3e2</span><br><span class="line">local     0155988c6b53246891a663b09b7ff31f4e033845f915ab6cbb435bd32e9d3a11</span><br><span class="line">local     aa9e30b0c9437a528c1142a9ec0bcc44eb81df9a17e3150eec9d919bc1013942</span><br><span class="line">local     fa435dae2195899e60a26aad1f5ed0fb8e9864ac29d5e8ac8330633abf704cf8</span><br></pre></td></tr></table></figure><h4 id="7-4-2-具名挂载"><a href="#7-4-2-具名挂载" class="headerlink" title="7.4.2 具名挂载"></a>7.4.2 具名挂载</h4><p>我们重启动一个新的容器，给他命名，然后我们去具体的看下他的volume</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker run -d -P --name nginx02 -v nginx_hh:/etc/nginx nginx</span><br><span class="line">998a07b58223180bb99e6a57da9d08bf4f6327e62c95a1eb78bde1d23acb29d1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker volume ls</span><br><span class="line">DRIVER    VOLUME NAME</span><br><span class="line">local     2c38ac8053ab09fdd8b18ac921b4f08bee0c4789420eb21261dcb3921332e33b</span><br><span class="line">local     2ce495b1fffb7902dc33945543608fa9829bc15753764f548eb823169b7d6362</span><br><span class="line">local     125f78fb872eee7af45cc23cd7224432ab3b0a6425578f90fbf22a44b06cb3e2</span><br><span class="line">local     0155988c6b53246891a663b09b7ff31f4e033845f915ab6cbb435bd32e9d3a11</span><br><span class="line">local     aa9e30b0c9437a528c1142a9ec0bcc44eb81df9a17e3150eec9d919bc1013942</span><br><span class="line">local     fa435dae2195899e60a26aad1f5ed0fb8e9864ac29d5e8ac8330633abf704cf8</span><br><span class="line">local     nginx_hh</span><br></pre></td></tr></table></figure><p>此时我们发现，我们指定的这个nginx__hh卷名，在我们的数据卷列表中可以看到，那么我们如何查看这个卷<code>在哪个目录下面</code>呢</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker volume inspect nginx_hh</span><br><span class="line">或者</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker inspect nginx_hh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201131658871.png" alt="image-20211201131658871"></p><p>所有的docker容器内的卷，没有指定目录的情况下都是在 <code>/var/lib/docker/volumes/xxx/_data</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201131956641.png" alt="image-20211201131956641"></p><p>我们通过具名挂载可以方便的找到我们的 一个卷，大多数情况使用的是 具名挂载</p><p><strong>那么我们是如何确定是具名挂载，还是匿名挂载还是指定路径挂载呢？</strong></p><ul><li>-v 容器内地址     <code>匿名挂载</code></li><li>-v 卷名:容器内地址  <code>具名挂载</code></li><li>-v /宿主机路径：容器路径  <code>指定路径挂载</code></li></ul><p>拓展：</p><p><code>通过 -v 容器内路径： ro rw 改变读写权限</code></p><ul><li>ro readonly   只读</li><li><p>rw readwrite  可读可写</p><p><strong>一旦设置了容器权限，容器对我们挂载出来的内容就有限定了！</strong></p></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx05 -v juming:/etc/nginx:rw nginx</span><br></pre></td></tr></table></figure><p><strong>ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</strong></p><h3 id="7-5-初识Dockerfile"><a href="#7-5-初识Dockerfile" class="headerlink" title="7.5 初识Dockerfile"></a>7.5 初识Dockerfile</h3><p>Dockerfile 就是用来构建docker镜像的构建文件！</p><p>镜像是如何生成的，我们就可以通过Dockerfile来一步一步的去进行构建，之前我们可以通过commit的方式来创建，现在我们需要通过Dockerfile的方式来进行构建，其实这就是一堆的<code>命令</code>和<code>脚本</code></p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本就是一个一个的命令.</p><p>我们只需要去写一个一个的Dockerfile的命令去执行一下就可以了。</p><p>1<strong>.我们先创建一个dockerfile，名字随便定义</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ docker-test-volume]# cat dockerfile01 </span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line">CMD echo &quot;-----end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta"># </span><span class="language-bash">这里的每个命令，就是镜像的一层！</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201134735503.png" alt="image-20211201134735503"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201134757322.png" alt="image-20211201134757322"></p><p>启动自己写的镜像</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/20210722153212255.png" alt="img"></p><p>这个卷和外部有一个同步的目录，我们去看一下，我们简单修改下容器中数据卷目录下，然后看下，宿主机中的目录中是否有新增。</p><p><img src="https://img-blog.csdnimg.cn/20210722155132469.png" alt="在这里插入图片描述"></p><p>查看一下卷挂载的路径</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201140059739.png" alt="image-20211201140059739"></p><p>我们通过如上命令查看到了我们挂载的本地路径，我们测试下，数据是否进行同步，我们在我们自己构建的容器中的volume1中新增一个文件</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201140258123.png" alt="image-20211201140258123"></p><p>我们再去宿主机的相关目录中查看是否有新的文件生成</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201140354956.png" alt="image-20211201140354956"></p><p>此时我们发现，在我们的宿主机当中，也生成了一个对应的文件。</p><p>这种方式使用的十分多，因为我们通常会构建自己的镜像！在我们构建镜像的 时候，我们就去指定我们挂载 的目录。</p><p>假设构建镜像时候没有挂载卷，要手动镜像挂载 -v 卷名：容器内路径！</p><h3 id="7-6-数据卷容器"><a href="#7-6-数据卷容器" class="headerlink" title="7.6 数据卷容器"></a>7.6 数据卷容器</h3><p>多个MySQL同步数据！</p><p>命名的容器挂载数据卷！</p><p>我们现在有两个容器，centos01和centos02,我们现在有个需求就是实现01和02的数据同步，一般我们把谁去挂载了谁，我们成为父容器，里面的数据内容就都是同步的了，被挂载的这个父容器，就是我们所谓的数据卷容器。我们可以通过此种方式实现，容器间的共享，或者共享给别人。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/509123ae482041b594dff90c81dd799c.png" alt="在这里插入图片描述"></p><p><code>启动3个容器，通过我们刚才自己写的镜像启动</code>,我们依次启动docker01,docker02,docker03</p><p><strong>docker01</strong>-&gt;<strong>docker02</strong>-&gt;<strong>docker03</strong><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201141656655.png" alt="image-20211201141656655"></p><p>我们在创建第二个容器的时候，我们就需要去指定需要<code>继承</code>的<code>docker01</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--volumes-from list                Mount volumes from the specified container(s)</span><br><span class="line"><span class="meta"># </span><span class="language-bash">测试，</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ _data]# docker run -it --name dockerTest02 --volumes-from dockerTest01 liuhuanhuan:1.0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201142407487.png" alt="image-20211201142407487"></p><p>此时我们去dockerTest01中去新增一个文件，看下，我们的dockerTest02中的数据是否同步了</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201142753004.png" alt="image-20211201142753004"></p><p>此时我们会发现，我们的docerTest01和我们的dockerTest02中的数据是同步的。</p><p>我们一旦使用<code>–volumes-from</code>我们就实现了数据的同步挂载，类似我们java中的父类和子类的关系被继承的，我们叫做<code>数据卷容器</code>。如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201143317423.png" alt="image-20211201143317423"></p><p>我们此时再新建一个dockerTest03，我们也继承与我们的01。此时我们看下，数据是否进行了同步。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ /]# docker run -it --name dockerTest03 --volumes-from dockerTest01 liuhuanhuan:1.0</span><br></pre></td></tr></table></figure><p>此时我们新建了一个dockerTest03，我们再去看下目录下，我们的数据依旧是进行同步的。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201143730884.png" alt="image-20211201143730884"></p><p>此时我们考虑在我们的docerTest03中，新建了一个文件，我们去01和02中查看下，数据是否进行了同步呢。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201144057085.png" alt="image-20211201144057085"></p><p>此时我们发现，3个容器目录下的数据是进行同步的。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201144238534.png" alt="image-20211201144238534"></p><p>由于<code>dockerTest01</code>是数据容器卷，<code>dockerTest02</code>和<code>dockerTest03</code>都是基于他的,那么此时我们考虑一个场景，如果我们将<code>dockerTest01</code>停掉，或者删除掉这个容器的话，那么<code>docerTest02</code>和<code>dockerTest03</code>中的数据是否还存在呢。</p><p>测试下，我们删除这个<code>dockerTest01</code>的这个数据容器，此时我们通过docker ps -a发现已经被全部删除了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201144729666.png" alt="image-20211201144729666"></p><p><strong>现在已经<code>dockerTest01</code>已经被删除了，那么我们去看下我们的<code>dockerTest02</code>和<code>dockerTest03</code>中的数据是否还在呢？</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201144923075.png" alt="image-20211201144923075"></p><p>此时我们去<code>dockerTest03</code>中去发现，我们的数据依旧是存在的。nice!!!!!!</p><p><strong>这种容器之间的数据共享的机制，其实就是一共<code>数据备份</code>的机制，也就是一种<code>双向拷贝</code>的概念.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201145255469.png" alt="image-20211201145255469"></p><h3 id="7-7-多个mysql实现数据共享"><a href="#7-7-多个mysql实现数据共享" class="headerlink" title="7.7 多个mysql实现数据共享"></a>7.7 多个mysql实现数据共享</h3><p>我们来测试下，新建多个mysql数据容器的创建，此时我们新建了第一个容器：我们新建之后，我们本地连接测试下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -p 3305:3306 --name mysql01 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201150155209.png" alt="image-20211201150155209"></p><p>此时我们去新建第二个mysql02容器  由于我们的文件的地址是一样的，所以我们在继承的时候，不需要再去指定相关路径了，我们直接使用就可以了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql02 --volumes-from mysql01 mysql:8.0</span><br><span class="line">6fffaa5beb7079e3b1bf8e0a103d2170b00ccae10acee29717111248047ba7c5</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE             COMMAND                  CREATED          STATUS          PORTS                               NAMES</span><br><span class="line">6fffaa5beb70   mysql:8.0         &quot;docker-entrypoint.s…&quot;   3 seconds ago    Up 3 seconds    33060/tcp, 0.0.0.0:3307-&gt;3306/tcp   mysql02</span><br><span class="line">948f73079989   mysql:8.0         &quot;docker-entrypoint.s…&quot;   3 minutes ago    Up 3 minutes    33060/tcp, 0.0.0.0:3305-&gt;3306/tcp   mysql01</span><br><span class="line">b1bba449a8b9   liuhuanhuan:1.0   &quot;/bin/sh -c /bin/bash&quot;   26 minutes ago   Up 26 minutes                                       dockerTest03</span><br><span class="line">8f03dc19c94b   liuhuanhuan:1.0   &quot;/bin/sh -c /bin/bash&quot;   40 minutes ago   Up 40 minutes                                       dockerTest02</span><br></pre></td></tr></table></figure><p>这个时候，我们就可以实现两个容器的数据同步。</p><p><strong>结论：</strong></p><p>容器之间的配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止。因为配置的容器之间的数据一直是相互复制的，直到我们所有继承或者是所有挂载的容器全都删除掉，我们的这个数据卷才会消失。</p><p>但是一旦你持久化到了本地，这个时候，本地的数据是不会删除的！</p><h2 id="八、DockerFile"><a href="#八、DockerFile" class="headerlink" title="八、DockerFile"></a>八、DockerFile</h2><h3 id="8-1-DockerFile介绍"><a href="#8-1-DockerFile介绍" class="headerlink" title="8.1 DockerFile介绍"></a>8.1 DockerFile介绍</h3><p>dockerfile 是用来构建docker镜像的文件！命令参数脚本！</p><p>构建步骤：</p><p>1、 编写一个dockerfile文件</p><p>2、 docker build 构建称为一个镜像</p><p>3、 docker run运行镜像</p><p>4、 docker push发布镜像（DockerHub 、阿里云仓库)</p><p>查看下官方地址：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/3e9dde477bcd4f10a93d106af5501e81.png" alt="在这里插入图片描述"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/765a0bd85ff947fcb008bfc88ecf9cab.png" alt="在这里插入图片描述"></p><p>但是很多官方镜像都是基础包，很多功能没有，我们通常会自己搭建自己的镜像！</p><p>官方既然可以制作镜像，那我们也可以！</p><h3 id="8-2-DockerFile构建过程"><a href="#8-2-DockerFile构建过程" class="headerlink" title="8.2 DockerFile构建过程"></a>8.2 DockerFile构建过程</h3><p>基础知识：</p><p>1、每个保留关键字(指令）都是必须是大写字母</p><p>2、执行从上到下顺序</p><p>3、#表示注释</p><p>4、每一个指令都会创建提交一个新的镜像曾，并提交！</p><p><img src="https://img-blog.csdnimg.cn/c40a1beeb33140e687c92a3ef54a0680.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>Dockerfile是面向开发的，我们以后要发布项目，做镜像，就需要编写dockerfile文件，这个文件十分简单！</p><p>Docker镜像逐渐成企业交付的标准，必须要掌握！</p><ul><li><p><code>DockerFile</code>：构建文件，定义了一切的步骤，源代码</p></li><li><p><code>DockerImages</code>：通过DockerFile构建生成的镜像，最终发布和运行产品。</p></li><li><p><code>Docker容器</code>：容器就是镜像运行起来提供服务。</p></li></ul><h3 id="8-3-DockerFile常用指令"><a href="#8-3-DockerFile常用指令" class="headerlink" title="8.3 DockerFile常用指令"></a>8.3 DockerFile常用指令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM             # 基础镜像，一切从这里开始构建  centos</span><br><span class="line">MAINTAINER        # 镜像是谁写的， 姓名+邮箱</span><br><span class="line">RUN             # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD             # 步骤，tomcat镜像，这个tomcat压缩包！添加内容 添加同目录</span><br><span class="line">WORKDIR         # 镜像的工作目录</span><br><span class="line">VOLUME             # 挂载的目录</span><br><span class="line">EXPOSE             # 暴露端口配置  和我们的-p一样的</span><br><span class="line">CMD             # 指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。</span><br><span class="line">ENTRYPOINT         # 指定这个容器启动的时候要运行的命令，可以追加命令</span><br><span class="line">ONBUILD         # 当构建一个被继承 DockerFile 这个时候就会运行ONBUILD的指令，触发指令。</span><br><span class="line">COPY             # 类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV             # 构建的时候设置环境变量！</span><br></pre></td></tr></table></figure><h3 id="8-4-实战测试-构建自己的centos"><a href="#8-4-实战测试-构建自己的centos" class="headerlink" title="8.4 实战测试 构建自己的centos"></a>8.4 实战测试 构建自己的centos</h3><p>Docker Hub中 99% 镜像都是从这个基础镜像过来的<code>FROM scratch</code> , 然后配置需要的软件和配置来进行的构建</p><p><img src="https://img-blog.csdnimg.cn/1e323c4feaf9415cbc0a79e7e2418c90.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>案例：创建一个自己的centos</p><p>我们看下之前的centos的环境：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201203621155.png" alt="image-20211201203621155"></p><p>1.编写配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# vim myFirstDockerFile</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# cat myFirstDockerFile </span><br><span class="line">FROM centos</span><br><span class="line">MAINTAINER liuhuanhuan&lt;liuhuanhuan96@163.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;-----end-----&quot;</span><br><span class="line">CMD /bin/bash  </span><br></pre></td></tr></table></figure><p>2.通过这个文件构建镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">命令 docker build -f 文件路径 -t 镜像名:[tag] .</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker build -f myFirstDockerFile -t mycentos:1.0 .</span><br></pre></td></tr></table></figure><p>我们看下build之后的效果：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker build -f myFirstDockerFile -t mycentos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/10 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">5d0da3dc9764</span></span><br><span class="line">Step 2/10 : MAINTAINER liuhuanhuan&lt;liuhuanhuan96@163.com&gt;</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 8b9a850e6709</span></span><br><span class="line">Removing intermediate container 8b9a850e6709</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">b451c01f5e46</span></span><br><span class="line">Step 3/10 : ENV MYPATH /usr/local</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> a5ceede1147e</span></span><br><span class="line">Removing intermediate container a5ceede1147e</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">cdb4ec6e6af0</span></span><br><span class="line">Step 4/10 : WORKDIR $MYPATH</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> abc95adef4e1</span></span><br><span class="line">Removing intermediate container abc95adef4e1</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">fadd756f9367</span></span><br><span class="line">Step 5/10 : RUN yum -y install vim</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 42df864b1bda</span></span><br><span class="line">CentOS Linux 8 - AppStream                       13 MB/s | 8.1 MB     00:00    </span><br><span class="line">CentOS Linux 8 - BaseOS                         8.0 MB/s | 3.5 MB     00:00    </span><br><span class="line">CentOS Linux 8 - Extras                          16 kB/s |  10 kB     00:00    </span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package             Arch        Version                   Repository      Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> vim-enhanced        x86_64      2:8.0.1763-16.el8         appstream      1.4 M</span><br><span class="line">Installing dependencies:</span><br><span class="line"> gpm-libs            x86_64      1.20.7-17.el8             appstream       39 k</span><br><span class="line"> vim-common          x86_64      2:8.0.1763-16.el8         appstream      6.3 M</span><br><span class="line"> vim-filesystem      noarch      2:8.0.1763-16.el8         appstream       49 k</span><br><span class="line"> which               x86_64      2.21-16.el8               baseos          49 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  5 Packages</span><br><span class="line"></span><br><span class="line">Total download size: 7.8 M</span><br><span class="line">Installed size: 30 M</span><br><span class="line">Downloading Packages:</span><br><span class="line">(1/5): gpm-libs-1.20.7-17.el8.x86_64.rpm        1.2 MB/s |  39 kB     00:00    </span><br><span class="line">(2/5): vim-filesystem-8.0.1763-16.el8.noarch.rp 3.6 MB/s |  49 kB     00:00    </span><br><span class="line">(3/5): which-2.21-16.el8.x86_64.rpm             2.4 MB/s |  49 kB     00:00    </span><br><span class="line">(4/5): vim-enhanced-8.0.1763-16.el8.x86_64.rpm   13 MB/s | 1.4 MB     00:00    </span><br><span class="line">(5/5): vim-common-8.0.1763-16.el8.x86_64.rpm     44 MB/s | 6.3 MB     00:00    </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           8.0 MB/s | 7.8 MB     00:00     </span><br><span class="line">warning: /var/cache/dnf/appstream-02e86d1c976ab532/packages/gpm-libs-1.20.7-17.el8.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID 8483c65d: NOKEY</span><br><span class="line">CentOS Linux 8 - AppStream                      1.6 MB/s | 1.6 kB     00:00    </span><br><span class="line">Importing GPG key 0x8483C65D:</span><br><span class="line"> Userid     : &quot;CentOS (CentOS Official Signing Key) &lt;security@centos.org&gt;&quot;</span><br><span class="line"> Fingerprint: 99DB 70FA E1D7 CE22 7FB6 4882 05B5 55B3 8483 C65D</span><br><span class="line"> From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial</span><br><span class="line">Key imported successfully</span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1 </span><br><span class="line">  Installing       : which-2.21-16.el8.x86_64                               1/5 </span><br><span class="line">  Installing       : vim-filesystem-2:8.0.1763-16.el8.noarch                2/5 </span><br><span class="line">  Installing       : vim-common-2:8.0.1763-16.el8.x86_64                    3/5 </span><br><span class="line">  Installing       : gpm-libs-1.20.7-17.el8.x86_64                          4/5 </span><br><span class="line">  Running scriptlet: gpm-libs-1.20.7-17.el8.x86_64                          4/5 </span><br><span class="line">  Installing       : vim-enhanced-2:8.0.1763-16.el8.x86_64                  5/5 </span><br><span class="line">  Running scriptlet: vim-enhanced-2:8.0.1763-16.el8.x86_64                  5/5 </span><br><span class="line">  Running scriptlet: vim-common-2:8.0.1763-16.el8.x86_64                    5/5 </span><br><span class="line">  Verifying        : gpm-libs-1.20.7-17.el8.x86_64                          1/5 </span><br><span class="line">  Verifying        : vim-common-2:8.0.1763-16.el8.x86_64                    2/5 </span><br><span class="line">  Verifying        : vim-enhanced-2:8.0.1763-16.el8.x86_64                  3/5 </span><br><span class="line">  Verifying        : vim-filesystem-2:8.0.1763-16.el8.noarch                4/5 </span><br><span class="line">  Verifying        : which-2.21-16.el8.x86_64                               5/5 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  gpm-libs-1.20.7-17.el8.x86_64         vim-common-2:8.0.1763-16.el8.x86_64    </span><br><span class="line">  vim-enhanced-2:8.0.1763-16.el8.x86_64 vim-filesystem-2:8.0.1763-16.el8.noarch</span><br><span class="line">  which-2.21-16.el8.x86_64             </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 42df864b1bda</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">d84b4ffa9afb</span></span><br><span class="line">Step 6/10 : RUN yum -y install net-tools</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 85b0c64b0d12</span></span><br><span class="line">Last metadata expiration check: 0:00:09 ago on Wed Dec  1 12:42:36 2021.</span><br><span class="line">Dependencies resolved.</span><br><span class="line">================================================================================</span><br><span class="line"> Package         Architecture Version                        Repository    Size</span><br><span class="line">================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> net-tools       x86_64       2.0-0.52.20160912git.el8       baseos       322 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================</span><br><span class="line">Install  1 Package</span><br><span class="line"></span><br><span class="line">Total download size: 322 k</span><br><span class="line">Installed size: 942 k</span><br><span class="line">Downloading Packages:</span><br><span class="line">net-tools-2.0-0.52.20160912git.el8.x86_64.rpm   7.4 MB/s | 322 kB     00:00    </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Total                                           763 kB/s | 322 kB     00:00     </span><br><span class="line">Running transaction check</span><br><span class="line">Transaction check succeeded.</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded.</span><br><span class="line">Running transaction</span><br><span class="line">  Preparing        :                                                        1/1 </span><br><span class="line">  Installing       : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line">  Running scriptlet: net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line">  Verifying        : net-tools-2.0-0.52.20160912git.el8.x86_64              1/1 </span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  net-tools-2.0-0.52.20160912git.el8.x86_64                                     </span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">Removing intermediate container 85b0c64b0d12</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">3123875290fe</span></span><br><span class="line">Step 7/10 : EXPOSE 80</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 30144fe42de8</span></span><br><span class="line">Removing intermediate container 30144fe42de8</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">802e023a0271</span></span><br><span class="line">Step 8/10 : CMD echo $MYPATH</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> fee95b4dddfc</span></span><br><span class="line">Removing intermediate container fee95b4dddfc</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">eb5650da5a20</span></span><br><span class="line">Step 9/10 : CMD echo &quot;-----end-----&quot;</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 33d26b8a4fc1</span></span><br><span class="line">Removing intermediate container 33d26b8a4fc1</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">4f46706ae96a</span></span><br><span class="line">Step 10/10 : CMD /bin/bash</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 6ad7fa93ddc6</span></span><br><span class="line">Removing intermediate container 6ad7fa93ddc6</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">735e68690d0a</span></span><br><span class="line">Successfully built 735e68690d0a</span><br><span class="line">Successfully tagged mycentos:1.0</span><br></pre></td></tr></table></figure><p>我们看到最后都successful，构建成功了，那么我们就成功的构建了一个我们的自己的镜像。</p><p>此时我们启动容器，然后查看下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker attach 67aefcac09e1</span><br><span class="line">[root@67aefcac09e1 local]# pwd</span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure><p>此时我们会发现，我们进入的就是一个工作目录。就是我们在dockerfile文件中定义的工作目录。此时我们再尝试下ifconfig命令，看下。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@67aefcac09e1 local]# ifconfig</span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.4  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:ac:11:00:04  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>此时我们发现，<code>ifconfig</code>命令可以用了，我们相比较之前的纯净版的centos，我们在构建镜像的 时候，我们就自己下载了很多的镜像。</p><p>当我们拿到一个镜像的时候，我们可以通过history的命令查看，我们的这个镜像是怎么一步一步制作起来的。具体的结果如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211201205251351.png" alt="image-20211201205251351"></p><p>此时就列出了，我们刚刚制作的那个镜像的全部历史记录。</p><h3 id="8-5-CMD-和-ENTRYPOINT区别"><a href="#8-5-CMD-和-ENTRYPOINT区别" class="headerlink" title="8.5  CMD 和 ENTRYPOINT区别"></a>8.5  CMD 和 ENTRYPOINT区别</h3><ul><li><code>CMD</code>        指定这个容器启动的时候要运行的命令，只有最后一个会生效，可被替代。</li><li><code>ENTRYPOINT</code>    指定这个容器启动的时候要运行的命令，可以追加命令</li></ul><p>测试cmd</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">编写dockerfile文件</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# vim testCmdDockerFile</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# cat testCmdDockerFile </span><br><span class="line">FROM centos</span><br><span class="line"></span><br><span class="line">CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta">#</span><span class="language-bash">此时我们就执行一个CMD命令，我们去看下实际的效果</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">此时我们开始去构建docker镜像</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker build -f testCmdDockerFile -t cmddocker:1.0 .</span><br><span class="line">Sending build context to Docker daemon  3.072kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">5d0da3dc9764</span></span><br><span class="line">Step 2/2 : CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> acb8129389a9</span></span><br><span class="line">Removing intermediate container acb8129389a9</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">c84db5be03af</span></span><br><span class="line">Successfully built c84db5be03af</span><br><span class="line">Successfully tagged cmddocker:1.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">运行镜像</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker run c84db5be03af</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">此时我们发现，他执行的是<span class="built_in">ls</span> -a的一个命令</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">那么如果我们想要追加一个命令-l呢，成为<span class="built_in">ls</span> -al</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker run c84db5be03af -l</span><br><span class="line">docker: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: exec: &quot;-l&quot;: executable file not found in $PATH: unknown.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">cmd的情况下 -l 替换了CMD[<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-l&quot;</span>]  又由于 -l不是一个命令   所以出现了报错</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">我们需要写一个完整的路径来代替</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker run c84db5be03af ls -al</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x   1 root root   6 Dec  1 13:16 .</span><br><span class="line">drwxr-xr-x   1 root root   6 Dec  1 13:16 ..</span><br><span class="line">-rwxr-xr-x   1 root root   0 Dec  1 13:16 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root 340 Dec  1 13:16 dev</span><br><span class="line">drwxr-xr-x   1 root root  66 Dec  1 13:16 etc</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root   6 Sep 15 14:17 lost+found</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 105 root root   0 Dec  1 13:16 proc</span><br><span class="line">dr-xr-x---   2 root root 162 Sep 15 14:17 root</span><br><span class="line">drwxr-xr-x  11 root root 163 Sep 15 14:17 run</span><br><span class="line">lrwxrwxrwx   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root   0 Nov 29 13:52 sys</span><br><span class="line">drwxrwxrwt   7 root root 171 Sep 15 14:17 tmp</span><br><span class="line">drwxr-xr-x  12 root root 144 Sep 15 14:17 usr</span><br><span class="line">drwxr-xr-x  20 root root 262 Sep 15 14:17 var</span><br></pre></td></tr></table></figure><p>测试ENTRYPOINT</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">编写dockerfile文件</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# vim testEntryPointDockerFile</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# ls</span><br><span class="line">myFirstDockerFile  testCmdDockerFile  testEntryPointDockerFile</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# cat testEntryPointDockerFile </span><br><span class="line">FROM centos</span><br><span class="line">ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"># </span><span class="language-bash">开始创建镜像</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker build -f testEntryPointDockerFile -t entrypointdocker:1.0 .</span><br><span class="line">Sending build context to Docker daemon  4.096kB</span><br><span class="line">Step 1/2 : FROM centos</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">5d0da3dc9764</span></span><br><span class="line">Step 2/2 : ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> b6acadcc217a</span></span><br><span class="line">Removing intermediate container b6acadcc217a</span><br><span class="line"><span class="meta"> ---&gt; </span><span class="language-bash">d6152ef85374</span></span><br><span class="line">Successfully built d6152ef85374</span><br><span class="line">Successfully tagged entrypointdocker:1.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">此时我们直接进行run</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker run d6152ef85374</span><br><span class="line">.</span><br><span class="line">..</span><br><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">lost+found</span><br><span class="line">media</span><br><span class="line">mnt</span><br><span class="line">opt</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">run</span><br><span class="line">sbin</span><br><span class="line">srv</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">usr</span><br><span class="line">var</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">那么我们再进行一下测试</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">我们的命令，是直接拼接在我们得ENTRYPOINT命令后面的</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ dockerfile]# docker run d6152ef85374 -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x   1 root root   6 Dec  1 13:26 .</span><br><span class="line">drwxr-xr-x   1 root root   6 Dec  1 13:26 ..</span><br><span class="line">-rwxr-xr-x   1 root root   0 Dec  1 13:26 .dockerenv</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x   5 root root 340 Dec  1 13:26 dev</span><br><span class="line">drwxr-xr-x   1 root root  66 Dec  1 13:26 etc</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------   2 root root   6 Sep 15 14:17 lost+found</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x 104 root root   0 Dec  1 13:26 proc</span><br><span class="line">dr-xr-x---   2 root root 162 Sep 15 14:17 root</span><br><span class="line">drwxr-xr-x  11 root root 163 Sep 15 14:17 run</span><br><span class="line">lrwxrwxrwx   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x  13 root root   0 Nov 29 13:52 sys</span><br><span class="line">drwxrwxrwt   7 root root 171 Sep 15 14:17 tmp</span><br><span class="line">drwxr-xr-x  12 root root 144 Sep 15 14:17 usr</span><br><span class="line">drwxr-xr-x  20 root root 262 Sep 15 14:17 var</span><br><span class="line"><span class="meta">#</span><span class="language-bash">我们此时发现，这个命令是最佳到我们需要执行的命令后面的</span></span><br></pre></td></tr></table></figure><p>Dockerfile中很多命令都十分的相似，我们需要了解它们的区别，我们最好的学习就是对比他们然后测试效果！</p><h3 id="8-6-实战：tomcat镜像"><a href="#8-6-实战：tomcat镜像" class="headerlink" title="8.6 实战：tomcat镜像"></a>8.6 实战：tomcat镜像</h3><p>1、准备镜像文件</p><p>准备<code>tomcat</code> 和<code>jdk</code>到当前目录，编写好<code>README.md</code> 文件。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207094520680.png" alt="image-20211207094520680"></p><p>2、编写dokerfile，官方命令为<code>Dockerfile</code>,在我们build的时候会自动寻找这个文件，就不需要-f指定指定的dockerfile文件路径！</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM centos   #初始化镜像源</span><br><span class="line">MAINTAINER liuhuanhuan&lt;liuhuanhuan96@163.com&gt;   #作者，邮箱</span><br><span class="line">COPY README.md /usr/local/README.md    #文件拷贝</span><br><span class="line">ADD apache-tomcat-9.0.55.tar.gz /usr/local/   #新增tomcat文件 会自动解压到我们的容器当中</span><br><span class="line">ADD jdk-8u311-linux-x64.tar.gz /usr/local/    #新增jdk文件 会自动解压到我们的容器当中</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim     #命令安装</span><br><span class="line">ENV MYPATH /usr/local    # 配置基础环境</span><br><span class="line">WORKDIR $MYPATH    #配置工作目录</span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_311    # 配置java环境</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.55   # 配置tomcat环境</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080   #暴露外部端口</span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.55/bin/startup.sh &amp;&amp; tail -F /usr/local/apache-tomcat-9.0.55/logs/catalina.out  </span><br></pre></td></tr></table></figure><p>3、构建镜像</p><p><code>因为dockerfile命名使用默认命名 因此不用使用-f 指定文件</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t diytomcat .</span><br></pre></td></tr></table></figure><p>4、启动镜像</p><ul><li>-d 后台启动</li><li>-p 指定外部访问接口</li><li>-v 数据卷挂载</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker run -d -p 9090:8080 --name tomcat01 -v /home/tomcat/test:/usr/local/apache-tomcat-9.0.55/webapps/test -v /home/tomcat/logs/:/usr/local/apache-tomcat-9.0.55/logs diytomcat</span><br></pre></td></tr></table></figure><p>5、访问测试</p><p>当然，此时如果我们需要访问的话，我们还需要去阿里云配置下我们的网络安全组，不然我们是无法正常访问外部接口的</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207100331133.png" alt="image-20211207100331133"></p><p>6、发布项目(由于做了卷挂载，我们直接在本地编写项目就可以发布了！)</p><p>我们在我们的外部<code>/home/tomcat/test</code>目录下新增几个文件</p><p>style.css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#5e3434</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;Lato&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content_container</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content_container</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;[&quot;</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content_container</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content_container</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.content_container</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#a04d16</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    -webkit-<span class="attribute">animation-name</span>: opacity;</span><br><span class="line">            <span class="attribute">animation-name</span>: opacity;</span><br><span class="line">    -webkit-<span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span><br><span class="line">            <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span><br><span class="line">    -webkit-<span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">            <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content_container_text</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content_container_list</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">110px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    -webkit-<span class="attribute">animation-name</span>: change;</span><br><span class="line">            <span class="attribute">animation-name</span>: change;</span><br><span class="line">    -webkit-<span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">            <span class="attribute">animation-duration</span>: <span class="number">10s</span>;</span><br><span class="line">    -webkit-<span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">            <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content_container_list_item</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> opacity &#123;</span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> opacity &#123;</span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> change &#123;</span><br><span class="line">    <span class="number">0%</span>, <span class="number">12.66%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">16.66%</span>, <span class="number">29.32%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">25%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">33.32%</span>, <span class="number">45.98%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">49.98%</span>, <span class="number">62.64%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">75%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">66.64%</span>, <span class="number">79.3%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">83.3%</span>, <span class="number">95.96%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">25%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> change &#123;</span><br><span class="line">    <span class="number">0%</span>, <span class="number">12.66%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">16.66%</span>, <span class="number">29.32%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">25%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">33.32%</span>, <span class="number">45.98%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">49.98%</span>, <span class="number">62.64%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">75%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">66.64%</span>, <span class="number">79.3%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">50%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">83.3%</span>, <span class="number">95.96%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">0</span>, -<span class="number">25%</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>一个动态的文字框动画<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./style.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/css?family=Lato&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content_container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;content_container_text&quot;</span>&gt;</span></span><br><span class="line">      Hello</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;content_container_list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;content_container_list_item&quot;</span>&gt;</span>world !<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;content_container_list_item&quot;</span>&gt;</span>friend !<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;content_container_list_item&quot;</span>&gt;</span>users !<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;content_container_list_item&quot;</span>&gt;</span>everybody !<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们再去我们刚刚启动的容器中去查看，是否有文件新增：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207100738296.png" alt="image-20211207100738296"></p><p>此时我们发现有文件新增，那么我们就可以直接在外部访问了。我们看下效果。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207100834004.png" alt="image-20211207100834004"></p><p>此时我们发现：项目部署成功，可以直接访问！nice!!!部署项目的这部分，我们可以暂时先告一段落了。</p><p>我们以后开发的步骤：需要掌握Dockerfile的编写！我们之后的一切都是使用docker镜像来发布运行！</p><h3 id="8-7-发布自己的镜像"><a href="#8-7-发布自己的镜像" class="headerlink" title="8.7 发布自己的镜像"></a>8.7 发布自己的镜像</h3><p>1、地址 <a href="https://hub.docker.com/注册账号">https://hub.docker.com/注册账号</a></p><p>2、确定这个账号可以登录</p><p>3、登录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ test]# docker login --help </span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ test]# docker login -u liuhuanhuan963019</span><br><span class="line">Password: </span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>出现如上即可表示我们登录成功了！！！</p><p>4、提交 push镜像.</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">push自己的镜像到服务器上！</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ test]# docker push diytomcat</span><br><span class="line">Using default tag: latest</span><br><span class="line">The push refers to repository [docker.io/library/diytomcat]</span><br><span class="line">48634880c0b2: Preparing </span><br><span class="line">5a27e124f752: Preparing </span><br><span class="line">280b959488cc: Preparing </span><br><span class="line">ce96dfda7353: Preparing </span><br><span class="line">74ddd0ec08fa: Preparing </span><br><span class="line">denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p>此时提示我们<code>push</code>失败,那么我们去修改下我们的镜像配置，我们给我们的容器新增一个<code>tag</code>标签</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ test]# docker tag df03f9daf7fc liuhuanhuan963019/diytomcat:1.0</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ test]# docker images</span><br><span class="line">REPOSITORY                    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">diytomcat                     latest    df03f9daf7fc   3 days ago     677MB</span><br><span class="line">liuhuanhuan963019/diytomcat   1.0       df03f9daf7fc   3 days ago     677MB</span><br><span class="line">mysql                         8.0       bbf6571db497   4 days ago     516MB</span><br><span class="line">nginx                         latest    f652ca386ed1   4 days ago     141MB</span><br><span class="line">tomcat                        latest    904a98253fbf   2 weeks ago    680MB</span><br><span class="line">centos                        latest    5d0da3dc9764   2 months ago   231MB</span><br><span class="line">portainer/portainer           latest    580c0e4e98b0   8 months ago   79.1MB</span><br></pre></td></tr></table></figure><p>此时我们再去重新提交下看看：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ test]# docker push liuhuanhuan963019/diytomcat:1.0</span><br></pre></td></tr></table></figure><p>我们看下效果</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207102352554.png" alt="image-20211207102352554"></p><p>此时提交的时候也是一层一层的去进行提交的，我们等待片刻，即可push成功了。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">会发现push不上去，因为如果没有前缀的话默认是push到 官方的library</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">解决方法</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">第一种 build的时候添加你的dockerhub用户名，然后在push就可以放到自己的仓库了</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">docker build -t chengcoder/mytomcat:0.1 .</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">第二种 使用docker tag <span class="comment">#然后再次push</span></span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">docker tag 容器<span class="built_in">id</span> chengcoder/mytomcat:1.0</span> </span><br><span class="line"><span class="meta">#</span><span class="language-bash">然后再次push</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">docker push kuangshen/tomcat:1.0</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5e8f3ade8f7947f2a154c40c4b58d5ca.png" alt="在这里插入图片描述"></p><p><strong>提交的时候也是按照镜像的层级来提交的！</strong></p><h3 id="8-8-发布阿里云镜像服务上"><a href="#8-8-发布阿里云镜像服务上" class="headerlink" title="8.8 发布阿里云镜像服务上"></a>8.8 发布阿里云镜像服务上</h3><p>1、登录阿里云</p><p>2、找到容器镜像服务 之前我们配置过镜像加速，现在我们需要去实际运用下镜像仓库。</p><p>3、创建命名空间</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207103148902.png" alt="image-20211207103148902"></p><p>4、创建容器镜像</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207103324569.png" alt="image-20211207103324569"></p><p>然后选择我们本地仓库就可以了。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207103148902.png" alt=""></p><p>点开我们查看下具体的具体的使用方式：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207103438352.png" alt="image-20211207103438352"></p><p>看官网 很详细<a href="https://cr.console.aliyun.com/repository/">https://cr.console.aliyun.com/repository/</a></p><p><code>下面来实战操作下：</code></p><ul><li>先登录阿里云的镜像服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login --username=最爱吃大米1111 registry.cn-shanghai.aliyuncs.com</span><br></pre></td></tr></table></figure><ul><li>然后加标签后开始push</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker images</span><br><span class="line">REPOSITORY                    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">diytomcat                     latest    df03f9daf7fc   3 days ago     677MB</span><br><span class="line">liuhuanhuan963019/diytomcat   1.0       df03f9daf7fc   3 days ago     677MB</span><br><span class="line">mysql                         8.0       bbf6571db497   4 days ago     516MB</span><br><span class="line">nginx                         latest    f652ca386ed1   4 days ago     141MB</span><br><span class="line">tomcat                        latest    904a98253fbf   2 weeks ago    680MB</span><br><span class="line">centos                        latest    5d0da3dc9764   2 months ago   231MB</span><br><span class="line">portainer/portainer           latest    580c0e4e98b0   8 months ago   79.1MB</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker tag df03f9daf7fc xxxx:1.0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207104653247.png" alt="image-20211207104653247"></p><p>此时我们就可以看到我们的镜像已经在push了。</p><p>具体操作步骤，看下官方文档会有很详细的步骤：<a href="https://cr.console.aliyun.com/repository/cn-shanghai/liuhuanhuan963019/liuhuanhuan963019-test/details">https://cr.console.aliyun.com/repository/cn-shanghai/liuhuanhuan963019/liuhuanhuan963019-test/details</a></p><h3 id="8-8、小结"><a href="#8-8、小结" class="headerlink" title="8.8、小结"></a>8.8、小结</h3><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207104948208.png" alt="image-20211207104948208" style="zoom:50%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207105231039.png" alt="image-20211207105231039" style="zoom:50%;" /></p><h2 id="九、Docker网络"><a href="#九、Docker网络" class="headerlink" title="九、Docker网络"></a>九、Docker网络</h2><h3 id="9-1-理解Docker0"><a href="#9-1-理解Docker0" class="headerlink" title="9.1 理解Docker0"></a>9.1 理解Docker0</h3><p>1.清空所有网络</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker rmi -f $(docker images -aq)</span><br></pre></td></tr></table></figure><p>获取当前ip地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc fq_codel state UP group default qlen 1000</span><br><span class="line">    link/ether 00:16:3e:25:1a:9d brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.28.216.81/20 brd 172.28.223.255 scope global dynamic noprefixroute eth0</span><br><span class="line">       valid_lft 314696843sec preferred_lft 314696843sec</span><br><span class="line">3: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:18:94:19:89 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p><strong>三个网络地址（本机地址、阿里云生成的地址、docker0地址）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207133046082.png" alt="image-20211207133046082"></p><p>此时我们需要去思考一个问题，<code>`docker 是如果处理容器网络访问的？</code></p><p>比如我现在有一个tomcat容器，还有一个mysql容器，那么 tomcat中的项目，如何去访问mysql容器中的数据呢，<code>这个链接是写阿里云地址呢，还是写我们的docker地址呢，还是写我们的127.0.0.1呢，我们需要来多多观察下。</code>我们研究docker网络，主要就是研究这部分的内容的。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207134445990.png" alt="image-20211207134445990"></p><p>现在我们来运行一个简单的容器，然后看下我们的网络地址变化情况,由于官网现实版本tomcat镜像阉割了很多命令，连基础的<code>yum</code>命令都没有了，所以我们还是使用我们之前的镜像来测试下。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker exec -it 86f90cc3847b ip addr</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207143132921.png" alt="image-20211207143132921"></p><p>在我们启动镜像之后，我们看到了一个<code>`etho@if175</code>这样的 地址，这个就是docker给他分配的地址！每个容器都会有一个这样的地址</p><p>思考一个问题，linux能不能ping同内部的网络呢？</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# ping 172.17.0.2</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207143420110.png" alt="image-20211207143420110"></p><p>此时发现我们可以成功的ping通！！！。</p><p><strong>linux是可以ping通docker地址内部地</strong>址</p><p><strong>原理</strong></p><p>1、我们每启动一个docker容器，Docker就会给docker容器分配一个ip，我们只要安装了docker，就会有一个docker0桥接模式，使用的技术是 veth-pair 技术！</p><p><a href="https://www.cnblogs.com/bakari/p/10613710.html">https://www.cnblogs.com/bakari/p/10613710.html</a></p><p>再次测试ip addr</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207143650194.png" alt=""></p><p>2 、在启动一个容器测试，发现又多了一对网络</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker run -d -P --name tomcat02 e2babf72ba72 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207144013658.png" alt="image-20211207144013658"></p><p>我们发现这个容器带来网卡，都是一对对的</p><p><strong>veth-pair</strong> 就是一对的虚拟设备接口，他们都是成对出现的，一端连着协议，一端彼此相连，正因为有这个特性 veth-pair 充当一个桥梁，连接各种虚拟网络设备的OpenStac,Docker容器之间的连接，OVS的连接，都是使用evth-pair技术</p><p>3、我们来测试下tomcat01和tomcat02是否可以ping通</p><p><strong>通过tomcat01来ping tomcat02</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207144410622.png" alt="image-20211207144410622"></p><p><strong>通过tomcat02来ping tomcat01</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207144455274.png" alt="image-20211207144455274"></p><p>此时我们发现都可以互相ping通。</p><p><strong>容器与容器之间是可以互相ping通的</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/cce22e1584b349f69aa07c6a01ad9d1e.png" alt="在这里插入图片描述"></p><p><strong>结论</strong>：tomcat01和tomcat02公用一个路由器，docker0。</p><p>所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用ip。</p><p>那么我们的这个可用ip有多少个呢。</p><p>小结： Docker使用的是Linux的桥接，宿主机是一个Docker容器的网桥 docker0，容器之间想要链接就需要通过vet-pair进行转发，访问。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/690de016b877403296c0ec5edd23e370.png" alt="在这里插入图片描述"></p><p><strong>Docker 中的所有的网络接口都是虚拟的。虚拟的转发效率高！</strong></p><p>只要容器删除，对应网桥一对就没了！</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E5%90%83%E6%92%92%E7%9A%84%E6%93%A6%E6%93%A6%E6%93%A6w5.png" alt="image-20211207145640865"></p><p>思考一个场景：我们编写了一个微服务，database url=ip: ，项目不重启，数据库ip换了，我们希望可以处理这个问题，可以通过名字来进行访问容器？</p><h3 id="9-2-—link"><a href="#9-2-—link" class="headerlink" title="9.2    —link"></a>9.2    —link</h3><p>思考一个场景：我们编写了一个微服务，database url=ip: ，项目不重启，数据库ip换了，我们希望可以处理这个问题，可以通过名字来进行访问容器？</p><p>我们使用刚刚创建的两个容器，使用tomcat01 来 ping tomcat02看看，是否能ping通呢？</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker exec -it tomcat01 ping tomcat02</span><br><span class="line">ping: tomcat02: Name or service not known</span><br></pre></td></tr></table></figure><p>此时我们发现根本ping不同，那我们尝试着去解决这个问题。</p><p>我们重新启动一个tomcat容器,使用<code>--link</code>的方式进行启动，然后尝试去ping下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker run -d -P --name tomcat03 --link tomcat02 diytomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207150232419.png" alt="image-20211207150232419"></p><p>此时我们惊奇的发现，可以通过来ping通了！！！之后我们就可以通过<code>--link</code>的方式进行操作，就不要操作ip地址，即可访问了</p><p>此时我们启动<code>tomcat03</code>的时候，我们<code>–link</code>链接的是<code>`tomcat02</code>,所以我们可以通过<code>tomcat03</code>来直接<code>ping</code> <code>tomcat02</code>,那么如果我们进行反向操作呢？尝试下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker exec -it tomcat02 ping tomcat03</span><br><span class="line">ping: tomcat03: Name or service not known</span><br></pre></td></tr></table></figure><p>此时我们发现，反向<code>`ping</code>的时候根本ping不通，我们去查看下为什么？通过<code>network</code>可以查看</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run &#x27;docker network COMMAND --help&#x27; for more information on a command.</span><br></pre></td></tr></table></figure><p>我们可以用通过ls查看我们前的一些网络信息。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE   </span><br><span class="line">54e8f3e9829b   bridge    bridge    local   #这是系统默认的桥接的 这个就是docker0</span><br><span class="line">fec761935499   host      host      local</span><br><span class="line">af96498edc1e   none      null      local</span><br></pre></td></tr></table></figure><p>我们来看下这个第一个<code>bridge</code>的这个网络配置</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207151215689.png" alt="image-20211207151215689"></p><blockquote><p>以下是我们的启动的3个容器的地址，在我们没有指定ip的时候，会给我们的容器<code>自动分配ip</code>地址。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207151316863.png" alt=""></p><p>刚刚我们启动tomcat03的时候通过<code>--link</code>的方式绑定了我们的<code>tomcat02</code>。</p><p>本质上其实就是在我们的<code>tomcat03</code>当中配置了<code>`tomcat02</code>的配置，让我们去容器内部去一探究竟。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker exec -it tomcat03 cat /etc/hosts</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">::1localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0ip6-localnet</span><br><span class="line">ff00::0ip6-mcastprefix</span><br><span class="line">ff02::1ip6-allnodes</span><br><span class="line">ff02::2ip6-allrouters</span><br><span class="line">172.17.0.3tomcat02 8f923b56b788</span><br><span class="line">172.17.0.490370f44e98a</span><br></pre></td></tr></table></figure><p>此时我们惊奇的发现，在我们的<code>tomcat03</code>容器内部的<code>hosts</code>文件，自动配置了<code>tomcat02</code>的<code>ip地址</code>，直接写死了地址，所以说我们<code>tomcat03</code> <code>ping</code> <code>tomcat02</code>的时候，可以直接ping通.</p><font size=14><strong>**本质探究:**</strong></font>`--link` 本质就是在hosts配置中`tomcat02`的映射`ip`地址。<font size=5 color='red'><strong>但是现在使用Docker已经不建议使用–link了！</strong></font><font size=5 color='purple'><strong>我们需要的是自定义网络！,已经不在适合docker0了！！！</strong></font><font size=5 color='purple'><strong>主要是因为docker0，已经不在支持容器名进行访问了，我们只需要定义一个网络，让他支持容器名访问就可以了！！！</strong></font><h3 id="9-3-自定义网络"><a href="#9-3-自定义网络" class="headerlink" title="9.3 自定义网络"></a>9.3 自定义网络</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">docker network --<span class="built_in">help</span></span></span><br><span class="line">connect -- Connect a container to a network</span><br><span class="line">create -- Creates a new network with a name specified by the</span><br><span class="line">disconnect -- Disconnects a container from a network</span><br><span class="line">inspect -- Displays detailed information on a network</span><br><span class="line">ls -- Lists all the networks created by the user</span><br><span class="line">prune -- Remove all unused networks</span><br><span class="line">rm -- Deletes one or more networks</span><br></pre></td></tr></table></figure><p>上一节中所提到的<code>--link</code>和本章节中所提到的自定义网络，我们都叫做容器互联技术。</p><p>我们现在来查看下所有的docker网络</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">54e8f3e9829b   bridge    bridge    local</span><br><span class="line">fec761935499   host      host      local</span><br><span class="line">af96498edc1e   none      null      local</span><br></pre></td></tr></table></figure><p><strong>网络模式</strong></p><p><code>bridge</code> ：<font size=6 color="red">桥接 docker（默认，自己创建也是使用bridge模式）  主要用的是这个桥接模式</font></p><p><code>none</code> ：<strong>不配置网络，一般不用</strong></p><p><code>host</code> ：和宿主机共享网络</p><p><code>container</code> ：容器网络连通（用得少！局限很大）</p><p><strong>测试桥接模式</strong></p><p>测试之前，我们先删除掉我们全部的容器，保证环境干净</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207154749985.png" alt="image-20211207154749985"></p><p><strong>我们直接启动的命令 —net bridge,而这个就是我们得docker0</strong>  <code>bridge就是我们所说的docker0</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br></pre></td></tr></table></figure><p><strong>等价于 =&gt;</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -P --name tomcat01  tomcat</span><br></pre></td></tr></table></figure><p>两种实现方式，最后的效果是一样的 </p><p>docker0特点：<strong>默认，域名不能访问。 —link可以打通连接，但是很麻烦！</strong></p><p>我们可以 自定义一个网络，之后我们的服务，就可以在我们的自定义网络下进行使用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br></pre></td></tr></table></figure><ul><li><p><code>--driver</code>       bridge</p></li><li><p><code>--subnet</code>       192.168.0.0/16  子网     (192.168.0.2-192.168.255.255)</p></li><li><p><code>--gateway</code>      192.168.0.1  网关</p></li></ul><p>这个192.168.0.1就类似我们家中所使用的路由器的配置，这就是我们网关的一个概念。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line">3736e3efc939650ab2bb0a082c1a556ba188af22c0ce5747545ef95f9130d691</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">54e8f3e9829b   bridge    bridge    local</span><br><span class="line">fec761935499   host      host      local</span><br><span class="line">3736e3efc939   mynet     bridge    local</span><br><span class="line">af96498edc1e   none      null      local</span><br></pre></td></tr></table></figure><p>此时发现，我们新建的网络已经创建成功了！！！</p><p>我们查看下我们的自己的网络的相关配置：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207155859336.png" alt="image-20211207155859336"></p><p>既然我们创建了自己的网络，那我们也要来使用下，下面我们来创建两个容器，来看下我们的网络配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker run -d -P --name tomcat01 --net mynet diytomcat</span><br><span class="line">e4de5660a3d23287e71b8ff6702e052b146d5626921328b840ae5172bc807dcb</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker run -d -P --name tomcat02 --net mynet diytomcat</span><br><span class="line">78fddd1c9ecc95654fb9dd498738d82004d2617ab65f0d5000098348a24c5baa</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network inspect mynet </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;mynet&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;3736e3efc939650ab2bb0a082c1a556ba188af22c0ce5747545ef95f9130d691&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-12-07T15:55:50.112416535+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;192.168.0.0/16&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;192.168.0.1&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;</span><br><span class="line">            &quot;78fddd1c9ecc95654fb9dd498738d82004d2617ab65f0d5000098348a24c5baa&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat02&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;e4209762b16c66e8b78dda8cb0014fcdcce447c591ff21ba9fd4881577bc2d68&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:03&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.3/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;e4de5660a3d23287e71b8ff6702e052b146d5626921328b840ae5172bc807dcb&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;tomcat01&quot;,</span><br><span class="line">                &quot;EndpointID&quot;: &quot;f8f96a34ec4a8967a978f1dcef5a4ec6fae484a760d5d54e4a27bb0048c6b9e0&quot;,</span><br><span class="line">                &quot;MacAddress&quot;: &quot;02:42:c0:a8:00:02&quot;,</span><br><span class="line">                &quot;IPv4Address&quot;: &quot;192.168.0.2/16&quot;,</span><br><span class="line">                &quot;IPv6Address&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时我们可以清楚的看到，我们指定的地址下面，就有了2个容器。一个是tomcat01 ,一个是tomcat02</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207160258812.png" alt="image-20211207160258812"></p><p>我们此时测试下，通过<code>tomcat01</code>来<code>ping</code> <code>tomcat02</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker exec -it tomcat01 ping 192.168.0.3 -c 5</span><br><span class="line">PING 192.168.0.3 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=1 ttl=64 time=0.082 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=2 ttl=64 time=0.075 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=3 ttl=64 time=0.074 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=4 ttl=64 time=0.078 ms</span><br><span class="line">64 bytes from 192.168.0.3: icmp_seq=5 ttl=64 time=0.076 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.0.3 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 4091ms</span><br><span class="line">rtt min/avg/max/mdev = 0.074/0.077/0.082/0.003 ms</span><br></pre></td></tr></table></figure><p><strong>此时我们通过ping容器名称来尝试看下，在我们没有指定<code>--link</code>的情况下，是否可以<code>ping</code> 通过呢?</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker exec -it tomcat01 ping tomcat02 -c 5</span><br><span class="line">PING tomcat02 (192.168.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.063 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=2 ttl=64 time=0.085 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=3 ttl=64 time=0.094 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=4 ttl=64 time=0.081 ms</span><br><span class="line">64 bytes from tomcat02.mynet (192.168.0.3): icmp_seq=5 ttl=64 time=0.080 ms</span><br><span class="line"></span><br><span class="line">--- tomcat02 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 4118ms</span><br><span class="line">rtt min/avg/max/mdev = 0.063/0.080/0.094/0.014 ms</span><br></pre></td></tr></table></figure><p><strong>此时我们发现，依然可以ping通过，这就是使用自定义网络之后的好处！！！</strong></p><font size=5 color="green">总结：</font>在自定义的网络下，服务可以互相ping通，不用使用–link​                我们自定义的网络docker当我们维护好了对应的关系，推荐我们平时这样使用网络！**好处：**- `redis` -不同的集群使用不同的网络，保证集群是安全和健康的- `mysql`-不同的集群使用不同的网络，保证集群是安全和健康的<img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207161556612.png" alt="image-20211207161556612" style="zoom:50%;" />### 9.4 网络连通此时我们考虑一个，使用`tomcat-01`来`ping` `tomcat-net-01`是否可以ping通呢？![image-20211207162001076](https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207162001076.png)**实际情况时根本ping不同，这是一个不现实的问题！！！**那我们此时怎么去实现这个操作呢。我们`--help`查看下![image-20211207162319859](https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207162319859.png)这就是我们链接容器的一个核心！！！![image-20211207162744283](https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207162744283.png)**此时我们需要去测试连通不同网络下的容器！！！**<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network connect mynet tomcat-01</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network inspect mynet </span><br></pre></td></tr></table></figure>此时我们看下运行效果:![image-20211207163404340](https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207163404340.png)此时我们搭建连通之后，在我们的自定义网络，我们发现，多了一个我们定义的`tomcat-01`。连通就是将我们的`tomcat-01`加入到我们的自定义的网络当中了！！！！官方俗称：一个容器，两个ip地址。！！！**简单打个比方，我们现在使用的这个阿里云服务器，有两个ip地址，一个是公网ip，一个是内网ip**此时我们再去ping尝试下看看:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker exec -it tomcat-01 ping tomcat01 -c 5</span><br><span class="line">PING tomcat01 (192.168.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.083 ms</span><br><span class="line">64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.077 ms</span><br><span class="line">64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.105 ms</span><br><span class="line">64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=4 ttl=64 time=0.080 ms</span><br><span class="line">64 bytes from tomcat01.mynet (192.168.0.2): icmp_seq=5 ttl=64 time=0.089 ms</span><br><span class="line"></span><br><span class="line">--- tomcat01 ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 4105ms</span><br><span class="line">rtt min/avg/max/mdev = 0.077/0.086/0.105/0.015 ms</span><br></pre></td></tr></table></figure>成功ping通了！！！！我们在测试下tomcat-02看看，由于我们没有连通网络，理论上是没法打通的，我们看下实际的效果：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker exec -it tomcat-02 ping tomcat01 -c 5</span><br><span class="line">ping: tomcat01: Name or service not known</span><br></pre></td></tr></table></figure>连通失败！！！<font size=6 color="purple">结论：假设要跨网络操作别人，就需要使用 docker network connect 连通！</font><h3 id="9-5-Redis集群实战部署"><a href="#9-5-Redis集群实战部署" class="headerlink" title="9.5 Redis集群实战部署"></a>9.5 Redis集群实战部署</h3><p><code>用的是分片集群  +  高可用+ 负载均衡</code></p><p>我们创建6台Redis主机，3台主机，3台从机，为了实现高可用，下面就是做一个备份了，一旦我们的主机挂掉了，那么我们的从机就需要顶上去，代替我们的主机</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207164511827.png" alt="image-20211207164511827" style="zoom:50%;" /></p><p>6个容器，单个启动太慢了，我们选择写一个shell脚本来一键启动：</p><p>既然我们要搭建集群的话，那么我们就需要去新建一个Redis的网卡,在此之前，建议还是先清空本地全部的容器，不然1核2G的服务器，卡死可就不好玩咯</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm -f $(docker ps -aq)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network create redis --subnet 172.38.0.0/16</span><br><span class="line">5d1b3390482eb00db03573a22da4ad9dfab72ea08e0c0364b6c9be1468f3b43d</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">54e8f3e9829b   bridge    bridge    local</span><br><span class="line">fec761935499   host      host      local</span><br><span class="line">3736e3efc939   mynet     bridge    local</span><br><span class="line">af96498edc1e   none      null      local</span><br><span class="line">5d1b3390482e   redis     bridge    local</span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ tomcat]# docker network inspect redis</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;redis&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;5d1b3390482eb00db03573a22da4ad9dfab72ea08e0c0364b6c9be1468f3b43d&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2021-12-07T16:51:46.267025951+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;bridge&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">            &quot;Config&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;Subnet&quot;: &quot;172.38.0.0/16&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时我们可以看到，我们新建的这个网卡下面是没有一个网络的！！！现在我们需要区新建容器。</p><p>由于Redis我们需要去配置配置文件，我们现在写一个脚本一键去配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">通过脚本创建六个redis配置</span></span><br><span class="line">for port in $(seq 1 6);\</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;&gt; /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>执行完脚本之后，我们去看下文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ redis]# ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 3 root root 18 Dec  7 19:14 node-1</span><br><span class="line">drwxr-xr-x 3 root root 18 Dec  7 19:14 node-2</span><br><span class="line">drwxr-xr-x 3 root root 18 Dec  7 19:14 node-3</span><br><span class="line">drwxr-xr-x 3 root root 18 Dec  7 19:14 node-4</span><br><span class="line">drwxr-xr-x 3 root root 18 Dec  7 19:14 node-5</span><br><span class="line">drwxr-xr-x 3 root root 18 Dec  7 19:14 node-6</span><br></pre></td></tr></table></figure><p>通过脚本启动6个redis服务：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">通过脚本运行六个redis</span></span><br><span class="line">for port in $(seq 1 6);\</span><br><span class="line">docker run -p 637$&#123;port&#125;:6379 -p 1667$&#123;port&#125;:16379 --name redis-$&#123;port&#125; \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/data:/data \</span><br><span class="line">-v /mydata/redis/node-$&#123;port&#125;/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$&#123;port&#125; redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">单个依次启动</span></span><br><span class="line">docker run -p 6371:6379 -p 16671:16379 --name redis-1 \</span><br><span class="line">-v /mydata/redis/node-1/data:/data \</span><br><span class="line">-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6372:6379 -p 16672:16379 --name redis-2 \</span><br><span class="line">-v /mydata/redis/node-2/data:/data \</span><br><span class="line">-v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6373:6379 -p 16673:16379 --name redis-3 \</span><br><span class="line">-v /mydata/redis/node-3/data:/data \</span><br><span class="line">-v /mydata/redis/node-3/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.13 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6374:6379 -p 16674:16379 --name redis-4 \</span><br><span class="line">-v /mydata/redis/node-4/data:/data \</span><br><span class="line">-v /mydata/redis/node-4/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.14 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6375:6379 -p 16675:16379 --name redis-5 \</span><br><span class="line">-v /mydata/redis/node-5/data:/data \</span><br><span class="line">-v /mydata/redis/node-5/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.15 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"></span><br><span class="line">docker run -p 6376:6379 -p 16676:16379 --name redis-6 \</span><br><span class="line">-v /mydata/redis/node-6/data:/data \</span><br><span class="line">-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>此时我们看到我们所有的服务已经全部启动起来了！！！</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ redis]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                    COMMAND                  CREATED              STATUS              PORTS                                              NAMES</span><br><span class="line">b02ca37755b1   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   3 seconds ago        Up 3 seconds        0.0.0.0:6376-&gt;6379/tcp, 0.0.0.0:16676-&gt;16379/tcp   redis-6</span><br><span class="line">b744ec0c8e7b   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   35 seconds ago       Up 34 seconds       0.0.0.0:6375-&gt;6379/tcp, 0.0.0.0:16675-&gt;16379/tcp   redis-5</span><br><span class="line">e2d30288447f   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute   0.0.0.0:6374-&gt;6379/tcp, 0.0.0.0:16674-&gt;16379/tcp   redis-4</span><br><span class="line">cb8fcaf83120   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   About a minute ago   Up About a minute   0.0.0.0:6373-&gt;6379/tcp, 0.0.0.0:16673-&gt;16379/tcp   redis-3</span><br><span class="line">b88c1bbfb253   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   2 minutes ago        Up 2 minutes        0.0.0.0:6372-&gt;6379/tcp, 0.0.0.0:16672-&gt;16379/tcp   redis-2</span><br><span class="line">2c694e4bde3b   redis:5.0.9-alpine3.11   &quot;docker-entrypoint.s…&quot;   4 minutes ago        Up 4 minutes        0.0.0.0:6371-&gt;6379/tcp, 0.0.0.0:16671-&gt;16379/tcp   redis-1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="language-bash">redis默认没有bash</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker exec -it redis-1 /bin/sh</span><br><span class="line">/data # ls</span><br><span class="line">appendonly.aof  nodes.conf</span><br></pre></td></tr></table></figure><p>此时我们成功的进入到我们的redis-1里面了</p><p>然后依次创建集群：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">创建集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207193333326.png" alt="image-20211207193333326"></p><p>出现如下即表示集群配置成功！！！</p><p>我们看下集群的相关配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">通过redis-cli -c 进入到集群当中来</span></span><br><span class="line">/data # redis-cli -c</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:328</span><br><span class="line">cluster_stats_messages_pong_sent:322</span><br><span class="line">cluster_stats_messages_sent:650</span><br><span class="line">cluster_stats_messages_ping_received:317</span><br><span class="line">cluster_stats_messages_pong_received:328</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:650</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">46342612ff91a491c74f899d25cc7e1956c435f4 172.38.0.11:6379@16379 myself,master - 0 1638876972000 1 connected 0-5460</span><br><span class="line">cc56770681f898eb9939649e97b405e52b7bac9f 172.38.0.12:6379@16379 master - 0 1638876972977 2 connected 5461-10922</span><br><span class="line">90c01415ccf6437c161840d55a016159cd3f2169 172.38.0.13:6379@16379 master - 0 1638876973078 3 connected 10923-16383</span><br><span class="line">98d60136a3e19f7a324680cf27a81a481d053785 172.38.0.15:6379@16379 slave 46342612ff91a491c74f899d25cc7e1956c435f4 0 1638876971474 5 connected</span><br><span class="line">b097c919d8011f4242536a195d42bc1afabba196 172.38.0.16:6379@16379 slave cc56770681f898eb9939649e97b405e52b7bac9f 0 1638876971976 6 connected</span><br><span class="line">dc89dd2075766c12924b0a5b06286eabf308727b 172.38.0.14:6379@16379 slave 90c01415ccf6437c161840d55a016159cd3f2169 0 1638876972000 4 connected</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207193640205.png" alt="image-20211207193640205"></p><p>现在我们来做一个简单的数据存储来测试下。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name &quot;lhh&quot;</span><br><span class="line"><span class="meta">-&gt; </span><span class="language-bash">Redirected to slot [5798] located at 172.38.0.12:6379</span></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>可以看到此时分配的是12这个主机，那么如果当我们12这个主机停掉的时候，那么12的从机，应该顶替上去，这样就可以实现我们的高可用。此时我们在docker中去停掉我们的这个12的这个服务器的端口：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker stop b88c1bbfb253</span><br><span class="line">b88c1bbfb253</span><br></pre></td></tr></table></figure><p>此时我们停掉了redis-2这个容器，那么我们刚刚set的这条数据，我们还能拿到吗</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ ~]# docker exec -it redis-1 /bin/sh</span><br><span class="line">/data # redis-cli -c</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="meta">-&gt; </span><span class="language-bash">Redirected to slot [5798] located at 172.38.0.16:6379</span></span><br><span class="line">&quot;lhh&quot;</span><br><span class="line">172.38.0.16:6379&gt; </span><br></pre></td></tr></table></figure><p>此时我们停掉了redis-2，那么我们此时对应的丛集redis-6就顶替了之前的redis-2，此时我们依旧是可以查看到我们之前存放的值的。</p><p>此时我们再去看下节点：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">172.38.0.16:6379&gt; cluster nodes</span><br><span class="line">cc56770681f898eb9939649e97b405e52b7bac9f 172.38.0.12:6379@16379 master,fail - 1638877301557 1638877300054 2 connected</span><br><span class="line">98d60136a3e19f7a324680cf27a81a481d053785 172.38.0.15:6379@16379 slave 46342612ff91a491c74f899d25cc7e1956c435f4 0 1638877591130 5 connected</span><br><span class="line">b097c919d8011f4242536a195d42bc1afabba196 172.38.0.16:6379@16379 myself,master - 0 1638877589000 7 connected 5461-10922</span><br><span class="line">46342612ff91a491c74f899d25cc7e1956c435f4 172.38.0.11:6379@16379 master - 0 1638877590000 1 connected 0-5460</span><br><span class="line">dc89dd2075766c12924b0a5b06286eabf308727b 172.38.0.14:6379@16379 slave 90c01415ccf6437c161840d55a016159cd3f2169 0 1638877590128 4 connected</span><br><span class="line">90c01415ccf6437c161840d55a016159cd3f2169 172.38.0.13:6379@16379 master - 0 1638877590629 3 connected 10923-16383</span><br></pre></td></tr></table></figure><p>此时提示我们的redis-2出现主张，我们的redis-6顶替了之前的主机，</p><p>docker搭建redis集群完成！</p><p>我们使用docker之后，所有的技术都会慢慢变得简单起来！</p><h3 id="9-6-SpingBoot微服务打包Docker镜像"><a href="#9-6-SpingBoot微服务打包Docker镜像" class="headerlink" title="9.6 SpingBoot微服务打包Docker镜像"></a>9.6 SpingBoot微服务打包Docker镜像</h3><p>1.构建SpringBoot镜像</p><p>2.打包运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207201111422.png" alt="image-20211207201111422"></p><p>打包成功</p><p>3.编写dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> *.jar /app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;---server.port=8000&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>4、构建镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">1.复制jar和DockerFIle到服务器</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">2.构建镜像</span></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ project]# docker build -t springboot .</span><br></pre></td></tr></table></figure><p>5、发布运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ project]# docker images</span><br><span class="line">REPOSITORY   TAG                IMAGE ID       CREATED         SIZE</span><br><span class="line">springboot   latest             f4de784883a0   2 minutes ago   661MB</span><br><span class="line">diytomcat    latest             e2babf72ba72   6 hours ago     677MB</span><br><span class="line">centos       latest             5d0da3dc9764   2 months ago    231MB</span><br><span class="line">redis        5.0.9-alpine3.11   3661c84ee9d0   19 months ago   29.8MB</span><br><span class="line">java         8                  d23bdf5b1b1b   4 years ago     643MB</span><br><span class="line"></span><br><span class="line">[root@iZuf65oftugvcjgk2jncyeZ project]# docker run -d -p 8000:8000 --name springboot01 springboot</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211207203615687.png" alt="image-20211207203615687"></p><p>以后我们使用了Docker之后，给别人交付就是一个镜像即可！</p><h3 id="9-7-总结"><a href="#9-7-总结" class="headerlink" title="9.7 总结"></a>9.7 总结</h3><h4 id="9-7-1-认识docker"><a href="#9-7-1-认识docker" class="headerlink" title="9.7.1 认识docker"></a>9.7.1 认识docker</h4><p>Docker定义：Docker 是一个开源的应用容器引擎，它可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制（ 沙箱是一个虚拟系统程序，沙箱提供的环境相对于每一个运行的程序都是独立的，而且不会对现有的系统产生影响 ），相互之间不会有任何接口，更重要的是容器性能开销极低。</p><p>Docker的优点</p><p>Docker 是一个用于开发，交付和运行应用程序的开放平台。Docker 使您能够将应用程序与基础架构分开，从而可以快速交付软件。借助 Docker，您可以与管理应用程序相同的方式来管理基础架构。通过利用Docker 的方法来快速交付，测试和部署代码，您可以大大减少编写代码和在生产环境中运行代码之间的延迟。</p><p>Docker应用场景</p><ul><li>Web 应用的自动化打包和发布。</li><li>自动化测试和持续集成、发布。</li><li>在服务型环境中部署和调整数据库或其他的后台应用。</li><li>从头编译或者扩展现有的 OpenShift 或 Cloud Foundry 平台来搭建自己的 PaaS 环境。</li></ul><h4 id="9-7-2-Docker容器与虚拟机"><a href="#9-7-2-Docker容器与虚拟机" class="headerlink" title="9.7.2 Docker容器与虚拟机"></a>9.7.2 Docker容器与虚拟机</h4><p>我们用的传统虚拟机如 VMware之类的需要模拟整台机器包括硬件，每台虚拟机都需要有自己的操作系统，虚拟机一旦被开启，预分配给它的资源将全部被占用。每一台虚拟机包括应用，必要的二进制和库，以及一个完整的用户操作系统。</p><p>而容器技术是和我们的宿主机共享硬件资源及操作系统，可以实现资源的动态分配。容器包含应用和其所有的依赖包，但是与其他容器共享内核。容器在宿主机操作系统中，在用户空间以分离的进程运行。</p><p>容器技术是实现操作系统虚拟化的一种途径，可以让您在资源受到隔离的进程中运行应用程序及其依赖关系。通过使用容器，我们可以轻松打包应用程序的代码、配置和依赖关系，将其变成容易使用的构建块，从而实现环境一致性、运营效率、开发人员生产力和版本控制等诸多目标。容器可以帮助保证应用程序快速、可靠、一致地部署，其间不受部署环境的影响。容器还赋予我们对资源更多的精细化控制能力，让我们的基础设施效率更高。</p><p><strong>Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。</strong>它是目前最流行的 Linux容器解决方案。</p><p>Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker ，就不用担心环境问题。</p><p>总体来说， Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><ul><li>Docker的几个重要概念，如下图所示：</li><li>镜像就类似于在创建虚拟机前需要下载的系统镜像文件，比如iso文件、img文件等一些镜像文件。</li></ul><blockquote><p>镜像是 Docker 运行容器的前提，仓库是存放镜像的场所，可见镜像更是Docker的核心。</p></blockquote><ul><li>容器可以类比于正在运行中的虚拟机。</li><li>你可以将你的镜像save为一个tar文件，别人就可以通过load来获取你的镜像。</li><li>仓库中则保存了很多公共的常用的镜像，比如常用的JDK镜像、MySQL镜像、tomcat镜像、Ubuntu镜像、ngnix镜像等等。你可以通过pull来拉取获得这些镜像，你也可以自定义一些镜像通过push推送到仓库中。</li><li>Dockerfile就是一个build镜像的文件，它描述并指定了应该如何构建一个镜像。</li></ul><blockquote><p>Dockerfile 是自动构建 docker 镜像的配置文件， 用户可以使用 Dockerfile 快速创建自定义的镜像。</p><p>Dockerfile 中的命令非常类似于 linux 下的 shell 命令。</p><p>一般来说，我们可以将 Dockerfile 分为四个部分：</p><ul><li>基础镜像(父镜像)信息指令 FROM- 维护者信息指令 MAINTAINER- 镜像操作指令 RUN 、 EVN 、 ADD 和 WORKDIR 等- 容器启动指令 CMD 、 ENTRYPOINT 和 USER 等</li></ul></blockquote><h4 id="9-7-3-Docker-命令"><a href="#9-7-3-Docker-命令" class="headerlink" title="9.7.3 Docker 命令"></a>9.7.3 Docker 命令</h4><div class="table-container"><table><thead><tr><th>获取镜像</th><th>docker pull  镜像名称:版本号</th></tr></thead><tbody><tr><td>启动容器</td><td>1.docker run -d 镜像名称   （后台启动） 2.docker run -it 镜像名称 (进入容器)</td></tr><tr><td>查看容器</td><td>1.docker attach 容器id    2.docker exec -it 容器id    /bin/bash</td></tr><tr><td>启动已经停止的容器</td><td>docker ps -a</td></tr><tr><td>停止一个容器</td><td>docker stop 容器id</td></tr><tr><td>退出容器</td><td>ctrl + p +q</td></tr><tr><td>导出容器</td><td>docker save</td></tr><tr><td>导入容器</td><td>docker load</td></tr><tr><td>删除容器</td><td>docker rm -f 容器id</td></tr><tr><td>清理掉所有处于终止状态的容器</td><td>docker rm -f $(docker ps-aq)</td></tr></tbody></table></div><p>2.Docker Web应用<br>            运行一个web应用<br>            以端口5000开启端口<br>            关闭web应用<br>            重启web应用<br>            移除web应用<br>3.Docker 镜像应用<br>            列出镜像列表<br>            获取镜像<br>4.Dockerfile<br>            构建镜像</p><h4 id="9-7-4、SpringBoot项目容器化步骤"><a href="#9-7-4、SpringBoot项目容器化步骤" class="headerlink" title="9.7.4、SpringBoot项目容器化步骤"></a>9.7.4、SpringBoot项目容器化步骤</h4><p><code>step1</code>：添加Docker的maven的插件，配置Dockerfile的path；</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;!-- Docker maven plugin --&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;com.spotify&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.4.13&lt;/version&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;imageName&gt;$&#123;docker.image.prefix&#125;/$&#123;project.artifactId&#125;</span><br><span class="line">        &lt;/imageName&gt;</span><br><span class="line">        &lt;dockerDirectory&gt;$&#123;project.basedir&#125;/src/main/docker&lt;/dockerDirectory&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;targetPath&gt;/&lt;/targetPath&gt;</span><br><span class="line">                &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt;</span><br><span class="line">                &lt;include&gt;$&#123;project.build.finalName&#125;.jar&lt;/include&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><p><code>step2</code>：在配置的Dockerfile的path处添加Dockerfile文件；</p><p><code>Step3</code>：文件中添加配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">FROM openjdk:8-jdk-alpine</span><br><span class="line">VOLUME /tmp</span><br><span class="line"><span class="meta">#</span><span class="language-bash">把当前项目下dockertest-0.0.1-SNAPSHOT.jar 改名为test.jar 添加到镜像中</span></span><br><span class="line">ADD web-app-template-1.0.0.jar test.jar</span><br><span class="line"><span class="meta">#</span><span class="language-bash">指定端口,最好写与项目配置的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="meta">#</span><span class="language-bash">在镜像中运行/test.jar包,这样在运行镜像的时候就已经启动好了test.jar</span></span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-Djava.security.egd=file:/dev/./urandom&quot;,&quot;-jar&quot;,&quot;/test.jar&quot;]</span><br></pre></td></tr></table></figure><p><code>Step4</code>：mvn clean package -Dmaven.test.skip=true （表示不执行测试用例，也不编译测试用例类。）</p><p><code>step5</code>：mvn package docker:build 打镜像</p><p><code>step6</code>：docker images 查看镜像</p><p><code>step7</code>：docker run -p 8081:8081 -t springboot/web-app-template 运行</p><p><code>step8</code>：查看运行结果：<a href="http://localhost:8081/…">http://localhost:8081/…</a>.</p><p><code>step9</code>：docker push</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH登录：WARNING REMOTE HOST IDENTIFICATION HAS CHANGED!</title>
      <link href="/archives/7478.html"/>
      <url>/archives/7478.html</url>
      
        <content type="html"><![CDATA[<p>在我们使用ssh链接服务器的时候。会出现如下的错误</p><span id="more"></span><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint for the RSA key sent by the remote host is</span><br><span class="line">SHA256:6zKiuPSPE90dB6PNCj1fICgA1DTrTxPFiVbl82+sS0E.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key in /c/Users/xuliugen/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending RSA key in /c/Users/xuliugen/.ssh/known_hosts:4</span><br><span class="line">RSA host key for 119.19.19.19 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure><p>我们需要进行如下操作，来解决这种问题：</p><p>1.在客户端执行下述指令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/known_hosts</span><br></pre></td></tr></table></figure><p>2.例如我的机子IP地址为：1.1.1.1  则把里面所有与IP相关的内容删掉即可.</p><p>然后再重新使用ssh链接即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置本地图片服务器</title>
      <link href="/archives/54429.html"/>
      <url>/archives/54429.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Nginx介绍"><a href="#一、Nginx介绍" class="headerlink" title="一、Nginx介绍"></a>一、Nginx介绍</h2><p>Nginx就是反向代理服务器。<br><span id="more"></span></p><p>首先我们先来看看什么是代理服务器，代理服务器一般是指局域网内部的机器通过代理服务发送请求到互联网上的服务器，代理服务器一般作用于客户端。比如GoAgent，FQ神器。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/081121520378740.png" alt="img"></p><p>一个完整的代理请求过程为：客户端首先与代理服务器创建连接，然后根据代理服务器所使用的代理协议，请求对目标服务器创建连接、或则获得目标服务器的指定资源。Web代理服务器是网络的中间实体。代理位于Web客户端和Web服务器之间，扮演“中间人”的角色。<br>HTTP的代理服务器既是Web服务器又是Web客户端。</p><p>代理服务器是介于客户端和Web服务器之间的另一台服务器，有了它之后，浏览器不是直接到Web服务器去取回网页，而是通过向代理服务器发送请求，信号会先送到代理服务器，由代理服务器来取回浏览器所需要的信息并传送给你的浏览器。</p><p>正向代理是一个位于客户端和原始服务器之间的服务器，为了从原始服务器取的内容，客户端向代理发送一个请求并指定目标（原始服务器），然后代理向原始服务器转交请求并将获得的内容返回给客户端，客户端必须要进行一些特别的设置才能使用正向代理。</p><p>反向代理服务器：在服务器端接收客户端的请求，然后把请求分发给具体的服务器进行处理，然后再将服务器的响应结果反馈给客户端。Nginx就是其中的一种反向代理服务器软件。<br>Nginx：Nginx（“engine x”），Nginx是俄罗斯人Igor Sysoev(塞索耶夫)编写的一款高性能的 HTTP 和反向代理服务器。也是一个IMAP/POP3/SMTP代理服务器，也就是说，Nginx本身就可以托管网站，进行HTTP服务处理，也可以作为反向代理服务器使用。</p><p>正向代理客户端必须设置正向代理服务器，当然前提是要知道正向代理服务器的IP地址，还有代理程序的端口。<br>反向代理正好与正向代理相反，对于客户端而言代理服务器就像是原始服务器，并且客户端不需要进行任何特别的设置。客户端向反向代理的命名空间中的内容发送普通请求，接着反向代理将判断向哪个原始服务器转交请求，并将获得的内容返回给客户端。</p><h2 id="二、图片服务器搭建"><a href="#二、图片服务器搭建" class="headerlink" title="二、图片服务器搭建"></a>二、图片服务器搭建</h2><p>本地安装好nginx之后，我们可以通过端口来进行访问，默认的端口是80端口，我这边由于和本地80端口冲突了，我修改为了8089。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211210195430120.png" alt="image-20211210195430120"></p><p>此时我们成功启动nginx,然后在nginx目录下面，新增我们需要配置的图片路径，如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">添加图片的代码</span></span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png)$ &#123;  </span><br><span class="line">    expires 24h;  </span><br><span class="line">    root H:/radar/;#指定图片存放路径  </span><br><span class="line">    access_log H:/radar/log;#图片路径  </span><br><span class="line">    proxy_store on;  </span><br><span class="line">    proxy_store_access user:rw group:rw all:rw;  </span><br><span class="line">    proxy_temp_path         H:/radar/;#图片路径  </span><br><span class="line">    proxy_redirect          off;  </span><br><span class="line">    </span><br><span class="line">    proxy_set_header        Host 127.0.0.1;  </span><br><span class="line">    proxy_set_header        X-Real-IP $remote_addr;  </span><br><span class="line">    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;  </span><br><span class="line">    client_max_body_size    10m;  </span><br><span class="line">    client_body_buffer_size 1280k;  </span><br><span class="line">    proxy_connect_timeout   900;  </span><br><span class="line">    proxy_send_timeout      900;  </span><br><span class="line">    proxy_read_timeout      900;  </span><br><span class="line">    proxy_buffer_size       40k;  </span><br><span class="line">    proxy_buffers           40 320k;  </span><br><span class="line">    proxy_busy_buffers_size 640k;  </span><br><span class="line">    proxy_temp_file_write_size 640k;  </span><br><span class="line">    if ( !-e $request_filename)  </span><br><span class="line">    &#123;  </span><br><span class="line">    proxy_pass  http://127.0.0.1:8089;  #代理访问地址</span><br><span class="line">     &#125;  </span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure><p>按照如上配置，找到我们需要的路径。然后重启服务后，就可以看到我们配置的图片了。如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211210195955312.png" alt="image-20211210195955312"></p><p>此时一个简单的nginx图片服务器就搭建好了。更多的nginx的用户的话，之后会继续更新。。。。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SpringBoot进阶】使用Docker Net部署项目（包含mysql,redis环境）.md</title>
      <link href="/archives/10872.html"/>
      <url>/archives/10872.html</url>
      
        <content type="html"><![CDATA[<p>1.先准备我们需要准备打包的项目jar文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn packeage </span><br></pre></td></tr></table></figure><p>出现如下即表示打包成功：</p><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx5ozm66gyj312w08sab5.jpg" alt="image-20211207233557859"></p><p>2.准备Dockerfile文件</p><p>在我们项目的同级目录下，新增一个<code>Dockerfile</code>文件，保证我们在<code>docker build</code>的时候，我们就不需要指定我们的dockerfile文件地址。</p><p>新增如下内容：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> oasys.jar /home/project/oasys.jar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;---server.port=8088&quot;</span>]</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8088</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/home/project/oasys.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>3.将我们的<code>Dockerfile</code>和我们打包好的jar文件上传到我们的服务器，如果没有工具的话，我们可以使用<code>rz</code> 命令来进行上传，</p><p>4.在我们拉取镜像之前，我们先去创建一个我们需要的Docker Net,</p><p>如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create project --subnet 192.168.0.0/16</span><br></pre></td></tr></table></figure><p>我们可以通过<code>docker network ls</code>查看到我们配置的网络：以下就是我们查看到的结果，可以看到我们创建的网络</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZuf65oftugvcjgk2jncyeZ oasys]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">54e8f3e9829b   bridge    bridge    local</span><br><span class="line">fec761935499   host      host      local</span><br><span class="line">af96498edc1e   none      null      local</span><br><span class="line">09c5df6f85c8   project   bridge    local</span><br><span class="line">5d1b3390482e   redis     bridge    local</span><br></pre></td></tr></table></figure><p>5.拉取redis镜像，启动容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull redis:5.0.9-alpine3.11</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6379:6379 --name projectRedis -v /home/project/redis/data:/data -v /home/project/redis/conf/redis.conf:/etc/redis/redis.conf --net project redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>我们通过<code>docker network inspect project</code>来查看下我们的网络，以下就是我们配置的redis</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx5pdwa6udj31h80aimze.jpg" alt="image-20211207234943630"></p><p>6.拉取mysql镜像,启动容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -v /home/project/mysql/conf:/etc/mysql/conf.d -v /home/project/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name=projectMysql mysql:8.0</span><br></pre></td></tr></table></figure><p>我们配置我们mysql指定的地址，记住在我们启动的时候，一定要指定我们mysql的密码：</p><p>我们进入到我们的容器中进行查看：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx5pfuqvvhj31ee0godjk.jpg" alt="image-20211207235136577"></p><p>7.开始build我们的项目容器。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t oasys .</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx5phnvrj8j31hk0k0q7f.jpg" alt="image-20211207235320950"></p><p>我们启动我们的容器：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8088:8088 --name oasys --net project -v /home/project/oasys:/home/project oasys</span><br></pre></td></tr></table></figure><p>注意在我们启动项目的时候，我们在我们项目中配置的mysql链接地址，一定要选择我们之前创建的docker net网络地址！！！</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx5pkfypb0j314u09ctad.jpg" alt="image-20211207235601250"></p><p>此时我们去我们创建的网络中具体去查看一下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network inspect project</span><br></pre></td></tr></table></figure><p>此时我们的项目已经搭建好了，我们去外部公网查看下我们的项目运行：此时看到我们的运行的项目程序如下图所示：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gx5po6em1zj321z0u0gqc.jpg" alt="image-20211207235936820"></p><p>注意！！！注意！！！在我们运行mysql和redis的时候，我们一定要指定我们创建的docker net网络地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--net project</span><br></pre></td></tr></table></figure><p>指定！！！。此时我们的全部项目已经部署好了！！！</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python实战】markdown转pdf（包含公式转换）</title>
      <link href="/archives/19411.html"/>
      <url>/archives/19411.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Pandoc转换"><a href="#一、Pandoc转换" class="headerlink" title="一、Pandoc转换"></a>一、Pandoc转换</h2><h3 id="1-1-问题"><a href="#1-1-问题" class="headerlink" title="1.1 问题"></a>1.1 问题</h3><p>由于我们markdown编辑器比较特殊，一般情况下，我们不太好看，如果转换成pdf的话，我们就不需要可以的去安装各种编辑器才可以看了，所以我们有了md转pdf或者是docx的需求。</p><span id="more"></span><h3 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2 下载"></a>1.2 下载</h3><p><a href="https://link.csdn.net/?target=pandoc.org">官网地址：</a>但是官网可能被限制了，无法打开，此时可以去我的资源库中去下载，免费的！！！</p><p><a href="https://download.csdn.net/download/qq_38140292/47989154">我的资源地址</a></p><p>安装后，本地查看版本，是否安装成功：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211124101617971.png" alt="image-20211124101617971"></p><p>出现如上图表示安装成功。</p><h3 id="1-3-md转docx"><a href="#1-3-md转docx" class="headerlink" title="1.3 md转docx"></a>1.3 md转docx</h3><p><code>cd</code>进入我们需要转换的文件目录下，输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pandoc xxx.md -s -o xxxx.docx</span><br></pre></td></tr></table></figure><ul><li>-s：生成恰当的文件头部和底部。</li><li>-o：指定输出的文件。</li></ul><p>查看实际效果：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211124101947673.png" alt="image-20211124101947673"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211124102010291.png" alt="image-20211124102010291"></p><p>此时发现文件已经生成好.我们打开看下，</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211124102120717.png" alt="image-20211124102120717" style="zoom:50%;" /></p><p>整体转换效果还是不错的。</p><h3 id="1-4-md转pdf"><a href="#1-4-md转pdf" class="headerlink" title="1.4 md转pdf"></a>1.4 md转pdf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pandoc xxx.md -o xxxx.pdf --pdf-engine=xelatex</span><br></pre></td></tr></table></figure><h2 id="二、python库实现"><a href="#二、python库实现" class="headerlink" title="二、python库实现"></a>二、python库实现</h2><ul><li>使用 Typora可以直接转换</li><li>结合 <a href="https://wkhtmltopdf.org/downloads.html">wkhtmltopdf</a> 使用 <code>markdown</code> 库 和 <code>pdfkit</code> 库</li></ul><h4 id="2-1-安装-wkhtmltopdf"><a href="#2-1-安装-wkhtmltopdf" class="headerlink" title="2.1 安装 wkhtmltopdf"></a><strong>2.1 安装 wkhtmltopdf</strong></h4><p><a href="https://wkhtmltopdf.org/downloads.html">wkhtmltopdf 下载地址</a></p><h3 id="2-2-安装-mdutils"><a href="#2-2-安装-mdutils" class="headerlink" title="2.2 安装 mdutils"></a>2.2 <strong>安装 mdutils</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install markdown</span><br><span class="line">pip install pdfkit</span><br></pre></td></tr></table></figure><p>参考案例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfkit</span><br><span class="line"><span class="keyword">from</span> markdown <span class="keyword">import</span> markdown</span><br><span class="line"></span><br><span class="line"><span class="built_in">input</span> = <span class="string">r&quot;F:\csdn博客\pytorch\【Pytorch】pytorch安装.md&quot;</span></span><br><span class="line">output = <span class="string">r&quot;【Pytorch】pytorch安装.pdf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="built_in">input</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line"></span><br><span class="line">html = markdown(text, output_format=<span class="string">&#x27;html&#x27;</span>)  <span class="comment"># MarkDown转HTML</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">htmltopdf = <span class="string">r&#x27;D:\htmltopdf\wkhtmltopdf\bin\wkhtmltopdf.exe&#x27;</span></span><br><span class="line">configuration = pdfkit.configuration(wkhtmltopdf=htmltopdf)</span><br><span class="line">pdfkit.from_string(html, output_path=output, configuration=configuration, options=&#123;<span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;)  <span class="comment"># HTML转PDF</span></span><br></pre></td></tr></table></figure><p>但是我们此时存在一个问题，如果我们的md中有表格的话，如图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211124104648667.png" alt="image-20211124104648667"></p><p>那么转换之后会发现是乱的:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211124104741204.png" alt="image-20211124104741204"></p><p>我们此时需要设定参数，修改为如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">html = markdown(text, output_format=<span class="string">&#x27;html&#x27;</span>,extensions=[<span class="string">&#x27;tables&#x27;</span>])</span><br></pre></td></tr></table></figure><p>我们再看下效果：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211124104951528.png" alt="image-20211124104951528"></p><h3 id="2-3-引入数学公式"><a href="#2-3-引入数学公式" class="headerlink" title="2.3 引入数学公式"></a>2.3 引入数学公式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install python-markdown-math</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfkit</span><br><span class="line"><span class="keyword">from</span> markdown <span class="keyword">import</span> markdown</span><br><span class="line"></span><br><span class="line">input_filename = <span class="string">&#x27;xxxx.md&#x27;</span></span><br><span class="line">output_filename = <span class="string">&#x27;xxxx.pdf&#x27;</span></span><br><span class="line">html = <span class="string">&#x27;&lt;!DOCTYPE html&gt;&lt;body&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/katex/dist/katex.min.css&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/katex/dist/katex.min.js&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/katex/dist/contrib/mathtex-script-type.min.js&quot; defer&gt;&lt;/script&gt;&#123;&#125;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;$$E=mc^2$$&#x27;</span></span><br><span class="line">text = markdown(text, output_format=<span class="string">&#x27;html&#x27;</span>, extensions=[<span class="string">&#x27;mdx_math&#x27;</span>])  <span class="comment"># MarkDown转HTML</span></span><br><span class="line">html = html.<span class="built_in">format</span>(text)</span><br><span class="line">pdfkit.from_string(html, output_filename, options=&#123;<span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;)  <span class="comment"># HTML转PDF</span></span><br></pre></td></tr></table></figure><h3 id="2-4-网页转pdf"><a href="#2-4-网页转pdf" class="headerlink" title="2.4 网页转pdf"></a>2.4 网页转pdf</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfkit</span><br><span class="line"></span><br><span class="line">pdfkit.from_file(<span class="string">&#x27;xxx.html&#x27;</span>, <span class="string">&#x27;xxxx.pdf&#x27;</span>, options=&#123;<span class="string">&#x27;encoding&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>&#125;)  <span class="comment"># HTML转PDF</span></span><br></pre></td></tr></table></figure><h3 id="2-5-进度条转换"><a href="#2-5-进度条转换" class="headerlink" title="2.5  进度条转换"></a>2.5  进度条转换</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pymdown-extensions</span><br></pre></td></tr></table></figure><p>progressbar.css</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.progress-label</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#2979ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.5rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eeeeee</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress</span><span class="selector-class">.thin</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0.9rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress</span><span class="selector-class">.thin</span> <span class="selector-class">.progress-label</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">0.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress</span><span class="selector-class">.thin</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0.4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-100plus</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#00e676</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-80plus</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fbc02d</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-60plus</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff9100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-40plus</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff5252</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-20plus</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ff1744</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-0plus</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f50057</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>progressbar.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> markdown <span class="keyword">import</span> markdown</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;progressbar.md&#x27;</span></span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, minimal-ui&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;progressbar&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;link rel=&quot;stylesheet&quot; href=&quot;progressbar.css&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">        &#123;&#125;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, encoding=encoding) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line"></span><br><span class="line">extensions = [</span><br><span class="line">    <span class="string">&#x27;markdown.extensions.attr_list&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;pymdownx.progressbar&#x27;</span></span><br><span class="line">]</span><br><span class="line">text = markdown(text, output_format=<span class="string">&#x27;html&#x27;</span>, extensions=extensions)  <span class="comment"># MarkDown转HTML</span></span><br><span class="line">html = html.<span class="built_in">format</span>(text)</span><br><span class="line"><span class="built_in">print</span>(html)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename.replace(<span class="string">&#x27;.md&#x27;</span>, <span class="string">&#x27;.html&#x27;</span>), <span class="string">&#x27;w&#x27;</span>, encoding=encoding) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(html)</span><br><span class="line"><span class="comment"># pdfkit.from_string(html, output, options=&#123;&#x27;encoding&#x27;: &#x27;utf-8&#x27;&#125;)  # HTML转PDF</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;完成&#x27;</span>)</span><br></pre></td></tr></table></figure><p>progressbar.md</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[=<span class="number">0</span>% <span class="string">&quot;0%&quot;</span>]</span><br><span class="line">[=<span class="number">5</span>% <span class="string">&quot;5%&quot;</span>]</span><br><span class="line">[=<span class="number">25</span>% <span class="string">&quot;25%&quot;</span>]</span><br><span class="line">[=<span class="number">45</span>% <span class="string">&quot;45%&quot;</span>]</span><br><span class="line">[=<span class="number">65</span>% <span class="string">&quot;65%&quot;</span>]</span><br><span class="line">[=<span class="number">85</span>% <span class="string">&quot;85%&quot;</span>]</span><br><span class="line">[=<span class="number">100</span>% <span class="string">&quot;100%&quot;</span>]</span><br><span class="line">[=<span class="number">85</span>% <span class="string">&quot;85%&quot;</span>]&#123;: .candystripe&#125;</span><br><span class="line">[=<span class="number">100</span>% <span class="string">&quot;100%&quot;</span>]&#123;: .candystripe .candystripe-animate&#125;</span><br><span class="line"></span><br><span class="line">[=<span class="number">0</span>%]&#123;: .thin&#125;</span><br><span class="line">[=<span class="number">5</span>%]&#123;: .thin&#125;</span><br><span class="line">[=<span class="number">25</span>%]&#123;: .thin&#125;</span><br><span class="line">[=<span class="number">45</span>%]&#123;: .thin&#125;</span><br><span class="line">[=<span class="number">65</span>%]&#123;: .thin&#125;</span><br><span class="line">[=<span class="number">85</span>%]&#123;: .thin&#125;</span><br><span class="line">[=<span class="number">100</span>%]&#123;: .thin&#125;</span><br></pre></td></tr></table></figure><p>我们看下最后的实际效果：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211124110424857.png" alt="image-20211124110424857"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python进阶】Python标准库之logging</title>
      <link href="/archives/63822.html"/>
      <url>/archives/63822.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、日志处理的方式"><a href="#一、日志处理的方式" class="headerlink" title="一、日志处理的方式"></a>一、日志处理的方式</h2><div class="table-container"><table><thead><tr><th>python</th><th>java</th></tr></thead><tbody><tr><td>print()</td><td>System.out.println()</td></tr><tr><td>logging</td><td>log4j</td></tr></tbody></table></div><p>一般我们在进行学习或者是简单的项目中，我们可以使用print()函数来直接输出结果，但是在一些文件比较多，更加复杂的项目中，我们需要自己重新整理一个日志库，来管理我们整个项目工程的日志管理</p><span id="more"></span><h2 id="二、logging库日志级别"><a href="#二、logging库日志级别" class="headerlink" title="二、logging库日志级别"></a>二、logging库日志级别</h2><div class="table-container"><table><thead><tr><th>级别</th><th>级别数值</th><th>使用时机</th></tr></thead><tbody><tr><td>DEBUG</td><td>10</td><td>详细信息，常用于调试</td></tr><tr><td>INFO</td><td>20</td><td>程序正常运行过程中产生的一些信息</td></tr><tr><td>WARNING</td><td>30</td><td>警告用户，虽然程序还在正常工作，但有可能发生错误</td></tr><tr><td>ERROR</td><td>40</td><td>由于更严重的问题，程序已经不能执行一些功能了</td></tr><tr><td>CRITICAL</td><td>50</td><td>严重错误，程序已经不能继续运行</td></tr></tbody></table></div><p><code>默认的日志级别是warning</code></p><h2 id="三、代码实战"><a href="#三、代码实战" class="headerlink" title="三、代码实战"></a>三、代码实战</h2><h3 id="1-使用baseconfig-来指定日志输出级别"><a href="#1-使用baseconfig-来指定日志输出级别" class="headerlink" title="1.使用baseconfig()来指定日志输出级别"></a><strong>1.使用baseconfig()来指定日志输出级别</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认的日志输出级别为warning</span></span><br><span class="line"><span class="comment">#使用baseconfig()来指定日志输出级别</span></span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">&quot;this is a debug log&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;this is a info log&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;this is a warning log&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;this is a error log&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;this is a criticial log&quot;</span>)</span><br></pre></td></tr></table></figure><p>修改日志输出级别后结果:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123095331801.png" alt="image-20211123095331801"></p><p>我们此时做个案例，看下logging和print谁先输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认的日志输出级别为warning</span></span><br><span class="line"><span class="comment">#使用baseconfig()来指定日志输出级别</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is a print data&quot;</span>)</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">&quot;this is a debug log&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;this is a info log&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;this is a warning log&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;this is a error log&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;this is a criticial log&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123095525428.png" alt="image-20211123095525428"></p><p>但是实际情况是，这个输出顺序是随机的，因为<code>logging</code>这些库并不是像print一样，直接输出，他是一种<code>多线程的方式</code>，为了控制<code>大量日志输出</code>并发的问题,他只能保证所有logging输出的日志的顺序是一致，但是不能保证和其他的输出的顺序是一致的。</p><h3 id="2-输出日志到文件"><a href="#2-输出日志到文件" class="headerlink" title="2.输出日志到文件"></a>2.输出日志到文件</h3><p>此种方式是通过函数<code>basicConfig</code>来指定参数<code>filename</code>来输出到文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认的日志输出级别为warning</span></span><br><span class="line"><span class="comment">#使用baseconfig()来指定日志输出级别</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;this is a print data&quot;</span>)</span><br><span class="line">logging.basicConfig(filename=<span class="string">&quot;demo.log&quot;</span>,level=logging.DEBUG)</span><br><span class="line">logging.debug(<span class="string">&quot;this is a debug log&quot;</span>)</span><br><span class="line">logging.info(<span class="string">&quot;this is a info log&quot;</span>)</span><br><span class="line">logging.warning(<span class="string">&quot;this is a warning log&quot;</span>)</span><br><span class="line">logging.error(<span class="string">&quot;this is a error log&quot;</span>)</span><br><span class="line">logging.critical(<span class="string">&quot;this is a criticial log&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出到文件中：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123100001210.png" alt="image-20211123100001210"></p><p>我们再重新执行一次，发现，我们的文件中，日志又新增了几行，默认的是将我们的日志追加到我们的文件当中去的。但是如果我们想要的是，每次执行程序，我们最后输出的话都是先清空文件夹，然后再输出日志到文件中，那么我们需要怎么去进行操作呢。我们只需要新增一个属性<code>filemode</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(filename=<span class="string">&quot;demo.log&quot;</span>,filemode=<span class="string">&quot;w&quot;</span>,level=logging.DEBUG)</span><br></pre></td></tr></table></figure><h3 id="3-输出对象"><a href="#3-输出对象" class="headerlink" title="3.输出对象"></a>3.输出对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">name = <span class="string">&quot;lhh&quot;</span></span><br><span class="line">age = <span class="string">&quot;25&quot;</span></span><br><span class="line">logging.debug(<span class="string">&quot;name:%s,age:%s&quot;</span>,name,age)</span><br><span class="line">logging.debug(<span class="string">&quot;name:%s,age:%s&quot;</span>%(name,age))</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123100837568.png" alt="image-20211123100837568"></p><h3 id="4-输出格式添加一些重要提示信息"><a href="#4-输出格式添加一些重要提示信息" class="headerlink" title="4.输出格式添加一些重要提示信息"></a>4.输出格式添加一些重要提示信息</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=<span class="string">&quot;%(asctime)s|%(levelname)s|%(filename)s:%(lineno)s|%(message)s&quot;</span>,level=logging.DEBUG)</span><br><span class="line">name = <span class="string">&quot;lhh&quot;</span></span><br><span class="line">age = <span class="string">&quot;25&quot;</span></span><br><span class="line">logging.debug(<span class="string">&quot;name:%s,age:%s&quot;</span>,name,age)</span><br><span class="line">logging.debug(<span class="string">&quot;name:%s,age:%s&quot;</span>%(name,age))</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123101948200.png" alt="image-20211123101948200"></p><p>参数解读：</p><ul><li>asctime 表示当前时间</li><li>levelname 表示输出日志级别</li><li>filename 表示文件名称</li><li>lineno 表示输出文件行号</li><li>message 表示输出信息</li></ul><p>当然我们也可以修改显示的时间信息:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=<span class="string">&quot;%(asctime)s|%(levelname)s|%(filename)s:%(lineno)s|%(message)s&quot;</span>,</span><br><span class="line">                    datefmt=<span class="string">&quot;%Y%m%d&quot;</span>,</span><br><span class="line">                    level=logging.DEBUG)</span><br><span class="line">name = <span class="string">&quot;lhh&quot;</span></span><br><span class="line">age = <span class="string">&quot;25&quot;</span></span><br><span class="line">logging.debug(<span class="string">&quot;name:%s,age:%s&quot;</span>,name,age)</span><br><span class="line">logging.debug(<span class="string">&quot;name:%s,age:%s&quot;</span>%(name,age))</span><br></pre></td></tr></table></figure><p>此时我们发现只输出了年月日，没有时分秒的输出结果：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123102349916.png" alt="image-20211123102349916"></p><h2 id="四、logging的高级应用"><a href="#四、logging的高级应用" class="headerlink" title="四、logging的高级应用"></a>四、logging的高级应用</h2><p>logging模块采用了模块化设计，主要包含四种组件:</p><ul><li><strong>Loggers</strong>：记录器，提供应用程序代码能直接使用的接口。</li><li><strong>Handlers</strong>: 处理器，将记录器产生的日志发送至目的地。</li><li><strong>Filters</strong>：过滤器，提供更好的粒度控制，决定那些日志会被输出。</li><li><strong>Formatters</strong>：格式化器，设置日志内容的组成结构和消息字段。</li></ul><p><strong>logging模块的工作流程</strong>：</p><h3 id="4-1-loggers记录器"><a href="#4-1-loggers记录器" class="headerlink" title="4.1.loggers记录器"></a><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123102844420.png" alt="image-20211123102844420">4.1.loggers记录器</h3><ul><li>提供应用程序的调用接口</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger  = logging.getLogger(__name__)</span><br></pre></td></tr></table></figure><p>logger是单例的</p><ul><li>决定日志记录的级别</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.setLevel()</span><br></pre></td></tr></table></figure><ul><li><p>将日志内容传递相关联的handlers中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.addHandler()和logger.removeHandler()</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-2-Handlers处理器"><a href="#4-2-Handlers处理器" class="headerlink" title="4.2 Handlers处理器"></a>4.2 Handlers处理器</h3><p>他们将日志分发到不同的目的地。可以是文件、标准输出、邮件、或者通过socke、http等协议发送到任何地方。</p><p><strong>SreamHandler</strong>标准输出stdout(如显示器)分发器。</p><p>创建方法：sh = logging.StreamHandler(stream=None)</p><p><strong>FileHandler</strong>将日志保存到磁盘文件的处理器</p><p>创建方法:fh=logging.FileHandler(filename,mode=“a”,encoding=Node,delay=False)</p><p>setFormatter()：设置当前handler对象使用的消息格式。</p><p><code>常用的几个处理器:</code></p><ul><li><strong>StreamHandler</strong></li><li><strong>FileHandler</strong></li><li><strong>BaseRotatingHandler</strong></li><li><strong>RotatingFileHandler</strong></li><li><strong>TimedRotatingFileHandler</strong></li></ul><h3 id="4-3-Formatters-格式"><a href="#4-3-Formatters-格式" class="headerlink" title="4.3 Formatters 格式"></a>4.3 Formatters 格式</h3><p>Formatter对象用来最终设置日志信息的顺序、结构和内容。</p><p>其构造方法为</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ft = logging.Formatter.__init__(fmt=<span class="literal">None</span>,datefmt=<span class="literal">None</span>,style=<span class="string">&#x27;%&#x27;</span>)</span><br></pre></td></tr></table></figure><p>datefmt默认是<code>%Y-%m-%d %H:%M:%S</code>样式的</p><p>style参数默认为百分符%,这表示%（<dictionary key>）s格式的字符串</p><div class="table-container"><table><thead><tr><th>属性</th><th>格式</th><th>描述</th><th>属性</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>asctime</td><td>%(asctime)s</td><td>日志产生时间，默认格式为 2021-11-23 10:20:30,123</td><td>msecs</td><td>%(msecs)d</td><td>日志生成时间的毫秒部分</td></tr><tr><td>created</td><td>%(created)f</td><td>time.time()生成的日志创建时间戳</td><td>message</td><td>%(message)s</td><td>具体的日志信息</td></tr><tr><td>filename</td><td>%(filename)s</td><td>生成日志的程序名</td><td>name</td><td>%(name)s</td><td>日志调用者</td></tr><tr><td>funcName</td><td>%(funcName)s</td><td>调用日志的函数名</td><td>pathname</td><td>%(pathname)s</td><td>生成日志的完整路径</td></tr><tr><td>levelname</td><td>%(levelname)s</td><td>日志级别(“DEGBUG”,”INFO”,”WARNING“,”ERROR”,”CRITICAL”)</td><td>processName</td><td>%(processName)s</td><td>进程名称</td></tr><tr><td>levelno</td><td>%(levelno)s</td><td>日志级别对应的数值</td><td>thread</td><td>%(thread)d</td><td>生成日志的线程id</td></tr><tr><td>lineno</td><td>%(lineno)d</td><td>日志所针对的代码行号</td><td>process</td><td>%(process)d</td><td>生成日志的进程id</td></tr><tr><td>module</td><td>%(module)s</td><td>生成日志的模块名</td><td>threadName</td><td>%(threadName)s</td><td>线程名</td></tr></tbody></table></div><h2 id="五、高级用法实战"><a href="#五、高级用法实战" class="headerlink" title="五、高级用法实战"></a>五、高级用法实战</h2><h4 id="5-1-生成器定义"><a href="#5-1-生成器定义" class="headerlink" title="5.1 生成器定义"></a><strong>5.1 生成器定义</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成器</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line"><span class="built_in">print</span>(logger)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(logger))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;RootLogger root (DEBUG)&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;logging.RootLogger&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>我们也可以指定修改的显示名称，默认的话显示的是<code>root</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;log&quot;</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"><span class="built_in">print</span>(logger)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(logger))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;Logger log (DEBUG)&gt;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;logging.Logger&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-处理器定义"><a href="#5-2-处理器定义" class="headerlink" title="5.2 处理器定义"></a>5.2 <strong>处理器定义</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#处理器</span></span><br><span class="line">consoleHandler = logging.StreamHandler()</span><br><span class="line">consoleHandler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件输出的handler</span></span><br><span class="line">fileHandler = logging.FileHandler(filename=<span class="string">&quot;applog.log&quot;</span>)</span><br><span class="line">fileHandler.setLevel(logging.INFO)</span><br></pre></td></tr></table></figure><h4 id="5-3-处理器设置formatter格式"><a href="#5-3-处理器设置formatter格式" class="headerlink" title="5.3 处理器设置formatter格式"></a>5.3 <strong>处理器设置formatter格式</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#给处理器设置formatter 格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&quot;%(asctime)s|%(levelname)s|%(name)s:%(lineno)s|%(message)s|%(processName)s&quot;</span>)</span><br><span class="line"><span class="comment">#设置格式</span></span><br><span class="line">consoleHandler.setFormatter(formatter)</span><br><span class="line">fileHandler.setFormatter(formatter)</span><br></pre></td></tr></table></figure><h4 id="5-4-记录器设置处理"><a href="#5-4-记录器设置处理" class="headerlink" title="5.4 记录器设置处理"></a>5.4 <strong>记录器设置处理</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 记录器要设置处理器</span></span><br><span class="line">logger.addHandler(consoleHandler)</span><br><span class="line">logger.addHandler(fileHandler)</span><br><span class="line">logger.debug(<span class="string">&quot;this is a debug data&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;this is a info data&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;this is a warning data&quot;</span>)</span><br><span class="line">logger.error(<span class="string">&quot;this is a error data&quot;</span>)</span><br><span class="line">logger.critical(<span class="string">&quot;this is a critical data&quot;</span>)</span><br></pre></td></tr></table></figure><p>我们来看下最后的整体效果：</p><p><strong>控制台输出：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123140903040.png" alt="image-20211123140903040"></p><p><strong>文件输入:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123140921221.png" alt="image-20211123140921221"></p><p>我们发现一个问题，我们指定的<code>DEBUG</code>和<code>INFO</code>级别的日志，为啥在我们的控制台和我们的文件的格式不一样呢?</p><p>这是因为在我们定义生成器的时候：</p><p>logger = logging.getLogger()我们没有指定需要输出的日志等级，所以给我们默认输出的就是WARNING级别的日志。以至于我们最后输出结果不一样，那我们此时修改下：</p><p>此时我们想要在文件中输出INFO级别的日志，控制台输出DEBUG级别的日志，我们需要添加如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#生成器</span></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"><span class="built_in">print</span>(logger)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(logger))</span><br></pre></td></tr></table></figure><p>此时我们看下最后的结果：</p><p><strong>控制台输出:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123141514147.png" alt="image-20211123141514147"></p><p><strong>文件输出：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123141535066.png" alt="image-20211123141535066"></p><h4 id="5-5-定义一个过滤器"><a href="#5-5-定义一个过滤器" class="headerlink" title="5.5 定义一个过滤器"></a>5.5 <strong>定义一个过滤器</strong></h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定义过滤器   过滤开头名称为cn.cccb的文件</span></span><br><span class="line">fit = logging.Filter(<span class="string">&quot;cn.cccb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关联过滤器</span></span><br><span class="line">logger.addFilter(fit)</span><br></pre></td></tr></table></figure><p>我们查看下效果：</p><p>此时控制台和文件都输出是空的：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123142125199.png" alt="image-20211123142125199"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123142137607.png" alt="image-20211123142137607"></p><p>那如果我们想要我们的输出结果显示呢，我们如何做呢，我们只需要更改我们的生成的自定义名称：</p><p>修改如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger = logging.getLogger(<span class="string">&quot;cn.cccb.log&quot;</span>)</span><br></pre></td></tr></table></figure><p>此时我们的文件和控制台均可以看到结果输出：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123142258768.png" alt="image-20211123142258768"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123142311154.png" alt="image-20211123142311154"></p><p>当然我们在设置过滤器的时候，我们也可以指定给我们的某个handler处理器指定过滤器来过滤，我们修改代码完整如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成器</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;log&quot;</span>)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理器</span></span><br><span class="line">consoleHandler = logging.StreamHandler()</span><br><span class="line">consoleHandler.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件输出的handler</span></span><br><span class="line">fileHandler = logging.FileHandler(filename=<span class="string">&quot;applog.log&quot;</span>)</span><br><span class="line">fileHandler.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给处理器设置formatter 格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">&quot;%(asctime)s|%(levelname)8s|%(name)s:%(lineno)s|%(message)s|%(processName)s&quot;</span>)</span><br><span class="line"><span class="comment">#设置格式</span></span><br><span class="line">consoleHandler.setFormatter(formatter)</span><br><span class="line">fileHandler.setFormatter(formatter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义过滤器   过滤开头名称为cn.cccb的文件</span></span><br><span class="line">fit = logging.Filter(<span class="string">&quot;cn.cccb&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#关联过滤器</span></span><br><span class="line"><span class="comment"># logger.addFilter(fit)</span></span><br><span class="line">fileHandler.addFilter(fit)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录器要设置处理器</span></span><br><span class="line">logger.addHandler(consoleHandler)</span><br><span class="line">logger.addHandler(fileHandler)</span><br><span class="line">logger.debug(<span class="string">&quot;this is a debug data&quot;</span>)</span><br><span class="line">logger.info(<span class="string">&quot;this is a info data&quot;</span>)</span><br><span class="line">logger.warning(<span class="string">&quot;this is a warning data&quot;</span>)</span><br><span class="line">logger.error(<span class="string">&quot;this is a error data&quot;</span>)</span><br><span class="line">logger.critical(<span class="string">&quot;this is a critical data&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们在运行查看效果：控制台有输出结果，但是在我们的文件中是没有输出结果的</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123142606918.png" alt="image-20211123142606918"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123142630670.png" alt="image-20211123142630670"></p><p>以上的一些方式，在我们日常使用的简单过程中，我们这样定义就可以了，但是如果我们在大型的项目过程中，如果去定义的话，那么我们就不能这样去做，我们总不能修改个日志等级的话，我们都需要去修改下代码吧？</p><p>于是我们采用了和java中日志记录相关的方式，我们将这些配置记录在我们的配置文件中，这样就很方便我们去进行修改了。</p><h4 id="5-6-配置文件方式定义"><a href="#5-6-配置文件方式定义" class="headerlink" title="5.6 配置文件方式定义"></a>5.6 配置文件方式定义</h4><p>我们新建一个logger.conf文件，我们新增如下内容：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[loggers]</span><br><span class="line">keys=root,applog</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line">keys=fileHandler,consoleHandler</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line">keys=simpleFormatter</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line"></span><br><span class="line">[logger_applog]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=fileHandler,consoleHandler</span><br><span class="line">qualname=applog</span><br><span class="line">propagate=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line"><span class="keyword">class</span>=StreamHandler</span><br><span class="line">args=(sys.stdout,)</span><br><span class="line">level=DEBUG</span><br><span class="line"></span><br><span class="line">[handler_fileHandler]</span><br><span class="line"><span class="keyword">class</span>=handlers.TimedRotatingFileHandler</span><br><span class="line">args=(<span class="string">&quot;logger.log&quot;</span>,<span class="string">&quot;midnight&quot;</span>,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">level=DEBUG</span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter]</span><br><span class="line"><span class="built_in">format</span>=%(asctime)s|%(levelname)8s|%(name)s:%(lineno)s|%(message)s|%(processName)s</span><br><span class="line">datafm=%Y-%m-%d %H:%M:%S</span><br></pre></td></tr></table></figure><blockquote><p> <strong>参数解读</strong>：<code>[loggers]</code>、<code>[handlers</code>]、<code>[formatters]</code>和我们写代码定义生成器、格式化和处理器的定义是一样的，这里只是简单定义了下名称，<code>keys</code>代表的就是具体的名称，具体的属性配置在下面进行</p><ul><li><p><code>[logger_root</code>]就是对名为root的日志生成器进行属性设置</p></li><li><p><code>[logger_applog]</code>就是对名称applog的日志生成器进行属性设置</p><p><code>handlers</code>指定了，绑定的几个处理器对象</p></li></ul><p>​        <code>qualname=applog</code> 表示在我们代码读取配置文件的时候，我们必须使用<code>getLogger(”applog“)</code>的方式才能获取到我们的这个对象</p><p>​        <code>propagate=0</code>表示0继承，这个用到 很少，就不多加赘述</p><ul><li><p><code>[handler_consoleHandler]</code></p><p><code>class=StreamHandler</code>表示定义的<code>StreaHandler</code>对象</p><p><code>args=(sys.stdout,)</code> 代表的是标准输出流</p></li><li><p><code>[handler_fileHandler]</code></p><p><code>class=handlers.TimedRotatingFileHandler</code>  （<strong>这里定义的这个对象，是我们在写大工程的时候，我们经常遇到的一个，指定按时间次序生成文件）</strong></p><p><code>args=(&quot;logger.log&quot;,&quot;midnight&quot;,1,0)</code>    规定文件名称，每天<code>凌晨12点</code>后备份一份数据，<code>1</code>代表的是<code>1</code>秒钟之后开始备份  <code>0</code>表示备份几份</p></li></ul></blockquote><h4 id="5-7-代码异常记录日志"><a href="#5-7-代码异常记录日志" class="headerlink" title="5.7  代码异常记录日志"></a>5.7  代码异常记录日志</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#我们将str转换成int</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&quot;lhh&quot;</span></span><br><span class="line"><span class="built_in">int</span>(a)</span><br></pre></td></tr></table></figure><p>此时我们直接转换会出错，但是在我们的日志文件并不打印</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123151010105.png" alt="image-20211123151010105"></p><p>我们需要使用try catch捕捉异常处理：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#我们将str转换成int</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = <span class="string">&quot;lhh&quot;</span></span><br><span class="line">    <span class="built_in">int</span>(a)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    applogger.exception(e)</span><br></pre></td></tr></table></figure><p>我们看下效果:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123151156075.png" alt="image-20211123151156075"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211123151214479.png" alt="image-20211123151214479"></p><p>我们发现不仅是在控制台上，在文件中也进行了具体的输出。此时我们全部讲完了logging标准库。还有一种我们使用dict字典的方式来定义我们的配置文件，但是这种方式我们用的并不是很多，所以我们也就不多加赘述了。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python标准库之json</title>
      <link href="/archives/33923.html"/>
      <url>/archives/33923.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python标准库之json"><a href="#Python标准库之json" class="headerlink" title="Python标准库之json"></a>Python标准库之json</h1><h2 id="一、什么是json"><a href="#一、什么是json" class="headerlink" title="一、什么是json"></a>一、什么是json</h2><ul><li>json是一种轻量级的文本数据交换格式</li><li>json独立于其他语言</li><li>json具有自我描述性，更好理解</li><li>json比xml更小、更快，更容易解析</li></ul><span id="more"></span><h2 id="二、json格式"><a href="#二、json格式" class="headerlink" title="二、json格式"></a>二、json格式</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span>：<span class="string">&quot;lhh&quot;</span><span class="punctuation">,</span></span><br><span class="line">   <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>name = lhh</p><p>age = 20</p></blockquote><h2 id="三、json标准库的作用"><a href="#三、json标准库的作用" class="headerlink" title="三、json标准库的作用"></a>三、json标准库的作用</h2><ul><li><h3 id="使用json字符串生成python对象（load）"><a href="#使用json字符串生成python对象（load）" class="headerlink" title="使用json字符串生成python对象（load）"></a>使用json字符串生成python对象（load）</h3></li><li><h3 id="由python对象格式成为json字符串（dump）"><a href="#由python对象格式成为json字符串（dump）" class="headerlink" title="由python对象格式成为json字符串（dump）"></a>由python对象格式成为json字符串（dump）</h3></li></ul><h2 id="四、数据的类型转换"><a href="#四、数据的类型转换" class="headerlink" title="四、数据的类型转换"></a>四、数据的类型转换</h2><p>将数据从python转换到json格式，在数据类型上会有什么变化呢，如下表所示：</p><div class="table-container"><table><thead><tr><th>Python</th><th>JSON</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list,tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int,float,int-</td><td>number</td></tr><tr><td>True</td><td>true</td></tr><tr><td>False</td><td>false</td></tr><tr><td>None</td><td>null</td></tr></tbody></table></div><h2 id="五、使用方式"><a href="#五、使用方式" class="headerlink" title="五、使用方式"></a>五、使用方式</h2><p>json模块的使用很简单，对于大多数，我们只需要使用以下4中方式：</p><div class="table-container"><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>json.dump(obj，fp)</td><td>将python数据类型转换并保存到json格式的文件内</td></tr><tr><td>json.dumps(obj)</td><td>将python数据类型转换为json格式的字符串</td></tr><tr><td>json.load(obj)</td><td>将json格式的文件中读取数据并转换为python类型</td></tr><tr><td>json.load(s)</td><td>将json格式的字符串转换为python的类型</td></tr></tbody></table></div><h2 id="六、实战操作"><a href="#六、实战操作" class="headerlink" title="六、实战操作"></a>六、实战操作</h2><h3 id="1-python转换为json字符串"><a href="#1-python转换为json字符串" class="headerlink" title="1.python转换为json字符串"></a>1.python转换为json字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从python对象格式化一个json  string</span></span><br><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lhh&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">25</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换为json字符串</span></span><br><span class="line">jsonStr = json.dumps(person)</span><br><span class="line"><span class="built_in">print</span>(jsonStr)</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122220234477.png" alt="image-20211122220234477"></p><blockquote><p><strong>在python中定义json的时候，可以使用单引号，也可以使用双引号。但是最后在输出的时候，输出的是一个单引号，以字典的方式进行输出的。但是在我们进行json格式转换之后，我们就会变成一个标准的json格式的字符串，即双引号修饰的字符串</strong></p></blockquote><h3 id="2-json文件生成"><a href="#2-json文件生成" class="headerlink" title="2.json文件生成"></a>2.json文件生成</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json.dump(person,<span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>,<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><p>文件输出：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122220739657.png" alt="image-20211122220739657"></p><p> 此时输出到文件的时候不是json缩进的格式，此时我们只需要指定参数<code>indent</code>就可以输出执行格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#转换为json字符串</span></span><br><span class="line">jsonStr = json.dumps(person,indent=<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(jsonStr)</span><br><span class="line"></span><br><span class="line">json.dump(person,<span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>,<span class="string">&quot;w&quot;</span>),indent=<span class="number">4</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;lhh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">25</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122220957756.png" alt="image-20211122220957756"></p><p>此时我们输出到文件中也是个格式化后的结果</p><h3 id="3-生成文件的key进行排序"><a href="#3-生成文件的key进行排序" class="headerlink" title="3.生成文件的key进行排序"></a>3.生成文件的key进行排序</h3><p>我们需要对我们的key进行排序，即按照字母的顺序进行排序的话，我们只需要指定参数<code>sort_keys</code>即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#转换为json字符串</span></span><br><span class="line">jsonStr = json.dumps(person,indent=<span class="number">4</span>,sort_keys=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(jsonStr)</span><br><span class="line"></span><br><span class="line">json.dump(person,<span class="built_in">open</span>(<span class="string">&quot;data.json&quot;</span>,<span class="string">&quot;w&quot;</span>),indent=<span class="number">4</span>,sort_keys=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>我们来看下最后的实际效果:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>&#125;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;lhh&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122221313632.png" alt="image-20211122221313632"></p><h3 id="4-json-string-转换成python对象"><a href="#4-json-string-转换成python对象" class="headerlink" title="4.json string 转换成python对象"></a>4.json string 转换成python对象</h3><p>第一种转换格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#json string 转换成python对象</span></span><br><span class="line"><span class="comment"># load loads</span></span><br><span class="line">s = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;lhh&quot;,&quot;age&quot;:25,&quot;home&quot;:[&quot;南京&quot;,&quot;淮安&quot;],&quot;only&quot;:true&#125;&#x27;</span></span><br><span class="line">pythonObj = json.loads(s)</span><br><span class="line"><span class="built_in">print</span>(pythonObj)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(pythonObj))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;home&#x27;</span>: [<span class="string">&#x27;南京&#x27;</span>, <span class="string">&#x27;淮安&#x27;</span>], <span class="string">&#x27;only&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>第二种转换格式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s2 = <span class="string">&#x27;[&quot;name&quot;,&quot;lhh&quot;,&quot;age&quot;,25,&#123;&quot;home&quot;:[&quot;南京&quot;,&quot;淮安&quot;],&quot;only&quot;:true&#125;]&#x27;</span></span><br><span class="line">pythonObj2 = json.loads(s2)</span><br><span class="line"><span class="built_in">print</span>(pythonObj2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(pythonObj2))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;lhh&#x27;</span>, <span class="string">&#x27;age&#x27;</span>, <span class="number">25</span>, &#123;<span class="string">&#x27;home&#x27;</span>: [<span class="string">&#x27;南京&#x27;</span>, <span class="string">&#x27;淮安&#x27;</span>], <span class="string">&#x27;only&#x27;</span>: <span class="literal">True</span>&#125;]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>我们看到两种最后输出的格式是不一样的</p><h3 id="5、从文件读取json并生成python对象"><a href="#5、从文件读取json并生成python对象" class="headerlink" title="5、从文件读取json并生成python对象"></a>5、从文件读取json并生成python对象</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取json文件</span></span><br><span class="line">pythondata = json.load(<span class="built_in">open</span>(<span class="string">&quot;data2.json&quot;</span>,<span class="string">&quot;r&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(pythondata)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(pythondata))</span><br></pre></td></tr></table></figure><p>文件内容:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lhh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;home&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;南京&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;淮安&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>, <span class="string">&#x27;home&#x27;</span>: [<span class="string">&#x27;南京&#x27;</span>, <span class="string">&#x27;淮安&#x27;</span>]&#125;</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10 “你不能访问此共享文件夹，因为你组织的安全策略阻止未经身份验证的来宾访问。解决方案（实测有效）</title>
      <link href="/archives/42907.html"/>
      <url>/archives/42907.html</url>
      
        <content type="html"><![CDATA[<p>当别人建立好了共享文件夹之后，我们想要在我们的局域网内访问相关的文件，此时，我们出现如下提示：</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122160311461.png" alt="image-20211122160311461"></p><p>此时我们需要修改网络配置：</p><p>如下步骤：</p><ul><li>window+ r 输入<code>gpedit.msc</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122160506858.png" alt="image-20211122160506858"></p><ul><li>依次打开<strong>管理模板</strong>-&gt;<strong>网络</strong>-&gt;<strong>Lanman工作站</strong>-&gt;<strong>启动不安全的来宾登录</strong></li></ul><p><img src="C:/Users/lhh/AppData/Roaming/Typora/typora-user-images/image-20211122160731697.png" alt="image-20211122160731697" style="zoom:50%;" /></p><ul><li>此时我们看到状态是未配置，我们双击，然后选择已启用</li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122160835036.png" alt="image-20211122160835036"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122160859975.png" alt="image-20211122160859975"></p><ul><li>我们再重新打开，发现可以成功打开了</li><li><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122160945227.png" alt="image-20211122160945227"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10本地共享文件配置（实测有效）</title>
      <link href="/archives/50561.html"/>
      <url>/archives/50561.html</url>
      
        <content type="html"><![CDATA[<p>1.选择需要共享的文件夹，然后右击查看<code>属性</code>,在属性中找到共享</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image0.png" alt="image-20211121223330990" style="zoom:80%;" /></p><p>2.选择，共享，然后选择对应配置，如下图：</p><p><img src="C:/Users/lhh/AppData/Roaming/Typora/typora-user-images/image-20211121223510938.png" alt="image-20211121223510938" style="zoom: 80%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211121223603320.png" alt="image-20211121223603320"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211121223731082.png" alt="image-20211121223731082"></p><p>出现如下页面即可表示设置成功</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211121223800898.png" alt="image-20211121223800898"></p><p>然后我们按住<code>windows+r</code>  输入<code>cmd</code>，输入<code>ipconfig</code> ，查看本地的ip地址，然后将我们的ip给同在局域网下的用户，用户通过<code>\\</code>   +<code>ip地址即可访问本地共享文件夹</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211121224020159.png" alt="image-20211121224020159"></p><p>最后查看实现效果：我们通过远程一台新的服务器来进行访问</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211122155047868.png" alt="image-20211122155047868"></p>]]></content>
      
      
      <categories>
          
          <category> Windows10 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows10 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql中如何进行模糊搜索的几种方式</title>
      <link href="/archives/27503.html"/>
      <url>/archives/27503.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、使用-代替零个或多个字符"><a href="#一、使用-代替零个或多个字符" class="headerlink" title="一、使用%代替零个或多个字符"></a>一、使用%代替零个或多个字符</h3><p><code>%</code>可匹配任意类型和长度的字符，有些情况下若是中文，可能需要使用两个<code>%%</code>表示</p><span id="more"></span><h4 id="1-1-“-xx-”"><a href="#1-1-“-xx-”" class="headerlink" title="1.1 “%xx%”"></a>1.1 “%xx%”</h4><p><strong>使用方式</strong>： like ‘%XXX%’</p><p><strong>使用案例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">* </span><br><span class="line">FROM</span><br><span class="line">sys_menu </span><br><span class="line">WHERE</span><br><span class="line">menu_name LIKE &quot;%用户%&quot;</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211118195705872.png" alt="image-20211118195705872"></p><h4 id="1-2-“-xx-xx-”"><a href="#1-2-“-xx-xx-”" class="headerlink" title="1.2 “%xx%xx%”"></a>1.2 “%xx%xx%”</h4><p><strong>使用方式：</strong>like “%xxx%”</p><p><strong>使用案例：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">* </span><br><span class="line">FROM</span><br><span class="line">sys_menu </span><br><span class="line">WHERE</span><br><span class="line">menu_name LIKE &quot;%用户%管理&quot;</span><br></pre></td></tr></table></figure><p><strong>结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211118195859800.png" alt="image-20211118195859800"></p><h3 id="二、-表示任意单个字符"><a href="#二、-表示任意单个字符" class="headerlink" title="二、_表示任意单个字符"></a>二、_表示任意单个字符</h3><h4 id="“-管-”"><a href="#“-管-”" class="headerlink" title="“_管%”"></a>“_管%”</h4><p><strong>使用方式：匹配单个任意字符，它常用来限制表达式的字符长度语句</strong></p><p>使用案例:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">* </span><br><span class="line">FROM</span><br><span class="line">sys_menu </span><br><span class="line">WHERE</span><br><span class="line">menu_name LIKE &quot;用户_理&quot;</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211118200449461.png" alt="image-20211118200449461"></p><p>注意：有几个<em>就表示有几个字符，%表示的是多个字符，</em>表示的是单字符</p><p>比如，我们查询一张表中姓刘的名字是3位数，我们可以进行如下查询。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where name like &quot;刘__&quot;</span><br></pre></td></tr></table></figure><p>他的使用方式，与我们的正则使用方式类似。</p><h3 id="三、-表示"><a href="#三、-表示" class="headerlink" title="三、[]表示"></a>三、[]表示</h3><p><strong>使用方式</strong>:表示括号内所列字符中的一个（和正则表达式的使用方式类似），指定一个字符、字符串或范围，要求所匹配对象为它们中的任一个。</p><p><strong>使用案例</strong>：查询名字叫欢欢的所有姓名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where name like &quot;[刘张王]欢欢&quot;</span><br></pre></td></tr></table></figure><p>最后查询结果为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">王欢欢</span><br><span class="line">刘欢欢</span><br></pre></td></tr></table></figure><p><code>注意:我们这里使用的[]代表的是里面中的一个，不是去查询匹配“刘张王欢欢”</code></p><h4 id="四、-表示"><a href="#四、-表示" class="headerlink" title="四、^表示"></a>四、^表示</h4><p>使用方式：表示不在括号所列之内的单个字符，取值和[]相同，但是是一个相反的作用</p><p><strong>使用案例</strong>：查询名字叫欢欢的但是姓不是张王的所有姓名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from user where name like &quot;[^刘张王]欢欢&quot;</span><br></pre></td></tr></table></figure><p>使用注意事项如三使用方式一致。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【设计模式浅谈     二】观察者模式与事件监听器模式</title>
      <link href="/archives/12348.html"/>
      <url>/archives/12348.html</url>
      
        <content type="html"><![CDATA[<p>﻿﻿### 一、观察者模式</p><h4 id="1-1-名词含义"><a href="#1-1-名词含义" class="headerlink" title="1.1 名词含义"></a>1.1 名词含义</h4><p><code>观察者对象</code>：观察者对象是监听被观察者的一个对象，当被观察者状态发生变化的时候，会通知观察者对象，使观察者对象可以自己更新自己，多个观察者对象可以监听同一个被观察者</p><span id="more"></span><p><code>被观察者对象</code>：也叫主题对象，主要是在自身状态发生变化的时候，会通知所有监听它的观察者</p><h4 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h4><p>这种模式通常被<code>用来做事件处理系统</code>。<code>观察者模式</code>又被称为<code>订阅-发布模式</code>，被观察者也就是主题对象管理所有相依于它的观察者对象，并且在它自身状态变化的时候主动发出通知通知观察者，然后观察者会更新自己。一些基于事件驱动机制的技术或者语言，比如java NIO或者node.js，其基础模式都是观察者模式.</p><h4 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h4><p><strong>观察者类：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"><span class="keyword">import</span> java.util.Observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/15 22:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Watcher</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;data calling&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>被观察者类</strong>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/15 22:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeWatcher</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">counter</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (; num &gt;= <span class="number">0</span>; num--) &#123;</span><br><span class="line">            setChanged();</span><br><span class="line">            notifyObservers(<span class="keyword">new</span> <span class="title class_">Integer</span>(num));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">package com.lhh.listener;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author liuhuanhuan</span><br><span class="line"> * @version <span class="number">1.0</span></span><br><span class="line"> * @date <span class="number">2021</span>/<span class="number">11</span>/<span class="number">15</span> <span class="number">22</span>:<span class="number">42</span></span><br><span class="line"> */</span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">WatcherTest</span> &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        BeWatcher beWatcher = new BeWatcher();</span><br><span class="line">        Watcher watcher = new Watcher();</span><br><span class="line">        beWatcher.addObserver(watcher);</span><br><span class="line">        beWatcher.counter(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><p><img src="../../../../csdn博客/设计模式/image-20211115224424140.png" alt="image-20211115224424140" style="zoom:50%;" /></p><h3 id="二-监听器模式"><a href="#二-监听器模式" class="headerlink" title="二.监听器模式"></a>二.监听器模式</h3><h4 id="2-1-名词含义"><a href="#2-1-名词含义" class="headerlink" title="2.1 名词含义"></a>2.1 名词含义</h4><p>所谓监听器模式，指的是事件源经过事件的封装传给监听器，当事件源触发事件之后，监听器收到事件的通知并执行事件回调方法。</p><h4 id="2-3-实现步骤"><a href="#2-3-实现步骤" class="headerlink" title="2.3 实现步骤"></a>2.3 实现步骤</h4><h5 id="2-3-1-定义事件源"><a href="#2-3-1-定义事件源" class="headerlink" title="2.3.1 定义事件源"></a>2.3.1 定义事件源</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/15 22:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Source</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Source</span><span class="params">()</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addListener</span><span class="params">(Listener listener)</span> &#123;</span><br><span class="line">        vector.addElement(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyEvent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Enumeration</span> <span class="variable">enumer</span> <span class="operator">=</span> vector.elements();</span><br><span class="line">        <span class="keyword">while</span> (enumer.hasMoreElements()) &#123;</span><br><span class="line">            Unmarshaller.<span class="type">Listener</span> <span class="variable">listener</span> <span class="operator">=</span> (Unmarshaller.Listener) enumer.nextElement();</span><br><span class="line">            listener.handleEvent(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-定义事件对象"><a href="#2-3-2-定义事件对象" class="headerlink" title="2.3.2 定义事件对象"></a>2.3.2 定义事件对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/16 16:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Event</span> <span class="keyword">extends</span> <span class="title class_">EventObject</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a prototypical Event.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source The object on which the Event initially occurred.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if source is null.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Event</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;execute method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-定义事件监听器接口"><a href="#2-4-定义事件监听器接口" class="headerlink" title="2.4 定义事件监听器接口"></a>2.4 定义事件监听器接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/16 16:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Listener</span> <span class="keyword">extends</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleEvent</span><span class="params">(Event ev)</span>;</span><br><span class="line">&#125;\</span><br></pre></td></tr></table></figure><h4 id="2-5-测试代码"><a href="#2-5-测试代码" class="headerlink" title="2.5 测试代码"></a>2.5 测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/11/16 16:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Source source;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            source = <span class="keyword">new</span> <span class="title class_">Source</span>();</span><br><span class="line">            <span class="type">EventListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EventListener</span>();</span><br><span class="line">            source.addListener(listener);</span><br><span class="line">            source.addListener(<span class="keyword">new</span> <span class="title class_">Listener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleEvent</span><span class="params">(Event ev)</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;匿名类&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            source.notifyEvent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-6-总结"><a href="#2-6-总结" class="headerlink" title="2.6 总结"></a>2.6 总结</h4><p>监听器模式是观察者模式的另一种形态，同样基于事件驱动模型。监听器模式更加灵活，可以对不同事件作出相应。但也是付出了系统的复杂性作为代价的，因为我们要为每一个事件源定制一个监听器以及事件，这会增加系统的负担。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python气象可视化】使用proplot和rasterio可视化tif</title>
      <link href="/archives/6715.html"/>
      <url>/archives/6715.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装gdal库、rasterio库"><a href="#1、安装gdal库、rasterio库" class="headerlink" title="1、安装gdal库、rasterio库"></a>1、安装<strong>gdal库、rasterio库</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge rasterio</span><br><span class="line">或者</span><br><span class="line">pip install rasterio</span><br></pre></td></tr></table></figure><span id="more"></span><p>gdal安装的比较麻烦，不推荐使用pip安装，最好使用conda或者去网站下载好whl文件，然后手动安装。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda install gdal</span><br><span class="line">或者</span><br><span class="line">pip install 路径./GDAL-<span class="number">3.0</span><span class="number">.2</span>-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gwbklvm6gkj31q006ggo7.jpg" alt="image-20211111221727630"></p><h3 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h3><h4 id="2-1-可视化tif文件"><a href="#2-1-可视化tif文件" class="headerlink" title="2.1 可视化tif文件"></a>2.1 可视化tif文件</h4><p>本文所涉及的tif文件为网络公开数据，相关链接在：</p><p>链接: <a href="https://pan.baidu.com/s/1k8laOKEclg2PKLiWXOriTw">https://pan.baidu.com/s/1k8laOKEclg2PKLiWXOriTw</a> 提取码: cemw </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> xarray <span class="keyword">as</span> xr</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line">config = &#123;<span class="string">&quot;font.family&quot;</span>:<span class="string">&#x27;Times New Roman&#x27;</span>,<span class="string">&quot;font.size&quot;</span>:<span class="number">16</span>,<span class="string">&quot;mathtext.fontset&quot;</span>:<span class="string">&#x27;stix&#x27;</span>&#125;</span><br><span class="line">rcParams.update(config)</span><br><span class="line">dem = xr.open_rasterio(<span class="string">&#x27;/Users/liuhuanhuan/Desktop/srtm_55_05/srtm_55_05.tif&#x27;</span>)</span><br><span class="line">dem = dem[<span class="number">0</span>] <span class="comment">#getting the first band</span></span><br><span class="line">dem.plot(cmap=<span class="string">&#x27;terrain&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;1.png&#x27;</span>,dpi=<span class="number">800</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gwbkmyawbhj310m0u0dkg.jpg" alt="1"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> proplot <span class="keyword">as</span> plot</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> xarray <span class="keyword">as</span> xr</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line">config = &#123;<span class="string">&quot;font.family&quot;</span>:<span class="string">&#x27;Times New Roman&#x27;</span>,<span class="string">&quot;font.size&quot;</span>:<span class="number">13</span>,<span class="string">&quot;mathtext.fontset&quot;</span>:<span class="string">&#x27;stix&#x27;</span>&#125;</span><br><span class="line">rcParams.update(config)</span><br><span class="line">dem = xr.open_rasterio(<span class="string">&#x27;/Users/liuhuanhuan/Desktop/srtm_55_05/srtm_55_05.tif&#x27;</span>)</span><br><span class="line">dem = dem[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># Define extents</span></span><br><span class="line">lat_min = dem.y.<span class="built_in">min</span>()</span><br><span class="line">lat_max = dem.y.<span class="built_in">max</span>()</span><br><span class="line">lon_min = dem.x.<span class="built_in">min</span>()</span><br><span class="line">lon_max = dem.x.<span class="built_in">max</span>()</span><br><span class="line"><span class="comment">#Starting the plotting</span></span><br><span class="line">fig, axs = plot.subplots(figsize=(<span class="number">16</span>,<span class="number">10</span>))</span><br><span class="line">axs.<span class="built_in">format</span>(land=<span class="literal">False</span>,labels=<span class="literal">True</span>,innerborders=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#Plot</span></span><br><span class="line">m = axs.pcolorfast(dem, cmap=<span class="string">&#x27;batlow&#x27;</span>)</span><br><span class="line">cbar = fig.colorbar(m, loc=<span class="string">&#x27;b&#x27;</span>, label=<span class="string">&#x27;whatever&#x27;</span>) <span class="comment">#Adding colorbar with label</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;2.png&#x27;</span>,dpi=<span class="number">800</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gwbkr9yge9j31ca0u0n2i.jpg" alt="2"></p><p>地图可视化：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Plot!</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">16</span>,<span class="number">12</span>))</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=crs)</span><br><span class="line">ax.coastlines(resolution=<span class="string">&#x27;10m&#x27;</span>,alpha=<span class="number">0.1</span>)</span><br><span class="line">shp_path = <span class="string">r&#x27;F:/Rpython/lp30/data/&#x27;</span></span><br><span class="line">proj = ccrs.PlateCarree() </span><br><span class="line">reader = Reader(shp_path+<span class="string">&#x27;HeNan1.shp&#x27;</span>)</span><br><span class="line">provinces = cfeature.ShapelyFeature(reader.geometries(),proj,edgecolor=<span class="string">&#x27;k&#x27;</span>,facecolor=<span class="string">&#x27;none&#x27;</span>,alpha=<span class="number">1</span>)</span><br><span class="line">ax.add_feature(provinces, linewidth=<span class="number">0.65</span>)</span><br><span class="line">lev=np.arange(<span class="number">0</span>,<span class="number">2400</span>,<span class="number">200</span>)</span><br><span class="line">cf=ax.contourf(x,y,da.variable.data[<span class="number">0</span>],levels=lev,extend=<span class="string">&#x27;both&#x27;</span>,transform=ccrs.PlateCarree(),cmap=cmaps.MPL_terrain)</span><br><span class="line">b=plt.colorbar(cf,shrink=<span class="number">0.93</span>,orientation=<span class="string">&#x27;vertical&#x27;</span>,extend=<span class="string">&#x27;both&#x27;</span>,pad=<span class="number">0.035</span>,aspect=<span class="number">30</span>)</span><br><span class="line">proj=ccrs.PlateCarree()</span><br><span class="line">extent=[<span class="number">110</span>,<span class="number">117</span>,<span class="number">31</span>,<span class="number">37</span>]</span><br><span class="line">ax.set_extent([lon_min,lon_max,lat_min,lat_max])</span><br><span class="line">ax.set_xticks(np.arange(extent[<span class="number">0</span>], extent[<span class="number">1</span>] + <span class="number">1</span>, <span class="number">1</span>), crs = proj)</span><br><span class="line">ax.set_yticks(np.arange(extent[-<span class="number">2</span>], extent[-<span class="number">1</span>] + <span class="number">1</span>, <span class="number">1</span>), crs = proj)</span><br><span class="line">ax.xaxis.set_major_formatter(LongitudeFormatter(zero_direction_label=<span class="literal">False</span>))</span><br><span class="line">ax.yaxis.set_major_formatter(LatitudeFormatter())</span><br><span class="line">plt.savefig(<span class="string">&#x27;F:/Rpython/lp36/plot111.png&#x27;</span>,dpi=<span class="number">800</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwblducdcyj30u00mq40r.jpg" alt="图片"></p><h3 id="3-proplot库使用"><a href="#3-proplot库使用" class="headerlink" title="3.proplot库使用"></a>3.<strong>proplot</strong>库使用</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> xarray <span class="keyword">as</span> xr</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line">config = &#123;<span class="string">&quot;font.family&quot;</span>:<span class="string">&#x27;Times New Roman&#x27;</span>,<span class="string">&quot;font.size&quot;</span>:<span class="number">16</span>,<span class="string">&quot;mathtext.fontset&quot;</span>:<span class="string">&#x27;stix&#x27;</span>&#125;</span><br><span class="line">rcParams.update(config)</span><br><span class="line"><span class="keyword">import</span> proplot <span class="keyword">as</span> plot</span><br><span class="line">da = xr.tutorial.open_dataset(<span class="string">&#x27;air_temperature&#x27;</span>).air-<span class="number">273.15</span></span><br><span class="line">clim = da.groupby(da[<span class="string">&#x27;time.season&#x27;</span>]).mean(<span class="string">&#x27;time&#x27;</span>)</span><br><span class="line">f, axs = plot.subplots(proj=<span class="string">&#x27;cyl&#x27;</span>, ncols=<span class="number">2</span>, nrows=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i, ax <span class="keyword">in</span> <span class="built_in">enumerate</span>(axs):</span><br><span class="line">    m = ax.contourf(clim.isel(season=i),levels=plot.arange(-<span class="number">30</span>,<span class="number">30</span>,<span class="number">5</span>),extend=<span class="string">&#x27;both&#x27;</span>,cmap=<span class="string">&#x27;CoolWarm&#x27;</span>)</span><br><span class="line">    ax.<span class="built_in">format</span>(labels = <span class="literal">True</span>, coast = <span class="literal">True</span>, borders = <span class="literal">True</span>, lonlines=<span class="number">30</span>, latlines=<span class="number">15</span>,</span><br><span class="line">        latlim=(clim.lat.<span class="built_in">min</span>().values, clim.lat.<span class="built_in">max</span>().values),</span><br><span class="line">        lonlim=(clim.lon.<span class="built_in">min</span>().values, clim.lon.<span class="built_in">max</span>().values),title=clim.isel(season=i).season.values)</span><br><span class="line">f.colorbar(m,label=<span class="string">&#x27;Near-Surface Air Temperature [°C]&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">&#x27;four.png&#x27;</span>,dpi=<span class="number">200</span>,bbox_inches=<span class="string">&#x27;tight&#x27;</span>,pad_inches=<span class="number">0</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gwbl3gb3msj31nw0sa45x.jpg" alt="image-20211111223417853"></p><p>参考文章：<a href="https://mp.weixin.qq.com/s/wxTiX4bOD3Oq-L53-LmcrA">https://mp.weixin.qq.com/s/wxTiX4bOD3Oq-L53-LmcrA</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cartopy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】pandas处理excel数据.md</title>
      <link href="/archives/62546.html"/>
      <url>/archives/62546.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装环境"><a href="#一、安装环境" class="headerlink" title="一、安装环境"></a>一、安装环境</h3><p><a href="https://so.csdn.net/so/search?from=pc_blog_highlight&amp;q=python">python</a>操作excel表格文件的增删读写，一般需要用到的<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&amp;q=第三方库">第三方库</a>有xlwt,xlrd。xlrd负责读取excel,xlwt负责写入excel文件。这种操作方法比较繁琐，效率还不错，通俗易懂。</p><p>Pandas是xlwt,xlrd库的封装库，拥有更全面的操作对象，csv,excel,dataframe等等。在xlwt等读写库的基础上可以实现一个库操作不同格式的文件。</p><p><code>pandas</code>依赖处理Excel的<code>xlrd</code>模块，所以我们需要提前安装这个，安装命令是：</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install xlrd</span><br></pre></td></tr></table></figure><h3 id="二、读写excel"><a href="#二、读写excel" class="headerlink" title="二、读写excel"></a>二、读写excel</h3><p>表格内容：</p><div class="table-container"><table><thead><tr><th>number</th><th>name</th><th>age</th><th>score</th><th>sex</th><th></th></tr></thead><tbody><tr><td>1</td><td>lhh</td><td>24</td><td>100</td><td>男</td><td></td></tr><tr><td>2</td><td>wcy</td><td>28</td><td>99</td><td>女</td><td></td></tr><tr><td>3</td><td>lfg</td><td>56</td><td>98</td><td>男</td><td></td></tr><tr><td>4</td><td>zzy</td><td>52</td><td>97</td><td>女</td></tr></tbody></table></div><h3 id="1-读取文件"><a href="#1-读取文件" class="headerlink" title="1.读取文件"></a>1.读取文件</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文本内容</span></span><br><span class="line">data= pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment">#解决数据显示不完全的问题</span></span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_columns&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.max_rows&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line"><span class="comment">#获取指定单元格的值</span></span><br><span class="line">one = data.iloc[<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">two = data.iloc[<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(one,two)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">   number name  age  score sex</span><br><span class="line">0       1  lhh   24    100   男</span><br><span class="line">1       2  wcy   28     99   女</span><br><span class="line">2       3  lfg   56     98   男</span><br><span class="line">3       4  zzy   52     97   女</span><br><span class="line">97 24</span><br></pre></td></tr></table></figure><ul><li><strong>获取前几条数据</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取数据</span></span><br><span class="line">data = data.head()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sheet_name 代表是第几个工作簿，可以用名称组成列表输入</span></span><br><span class="line">data = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>,sheet_name=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">   number name  age  score sex</span><br><span class="line">0       1  lhh   24    100   男</span><br><span class="line">1       2  wcy   28     99   女</span><br><span class="line">2       3  lfg   56     98   男</span><br><span class="line">3       4  zzy   52     97   女</span><br><span class="line">   number name  age  score sex</span><br><span class="line">0       1  lhh   24    100   男</span><br><span class="line">1       2  wcy   28     99   女</span><br><span class="line">2       3  lfg   56     98   男</span><br><span class="line">3       4  zzy   52     97   女</span><br></pre></td></tr></table></figure><ul><li>获取所有的表中数据，返回一个list</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取所有的数据，返回的是一个list</span></span><br><span class="line">value = data.values</span><br><span class="line"><span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[[1 &#x27;lhh&#x27; 24 100 &#x27;男&#x27;]</span><br><span class="line"> [2 &#x27;wcy&#x27; 28 99 &#x27;女&#x27;]</span><br><span class="line"> [3 &#x27;lfg&#x27; 56 98 &#x27;男&#x27;]</span><br><span class="line"> [4 &#x27;zzy&#x27; 52 97 &#x27;女&#x27;]]</span><br></pre></td></tr></table></figure><ul><li>输出指定行的数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#表示第一行,不包含表头</span></span><br><span class="line">data = df.iloc[<span class="number">0</span>].values</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[1 &#x27;lhh&#x27; 24 100 &#x27;男&#x27;]</span><br></pre></td></tr></table></figure><h3 id="2-loc-和iloc详解"><a href="#2-loc-和iloc详解" class="headerlink" title="2.loc 和iloc详解"></a>2.loc 和iloc详解</h3><ul><li><code>loc[row,cloumn]</code>  先行后列 : 是全部行或列,一般多行可以用中括号,连续的可以用a:c等</li><li><code>iloc[index,columns]</code> 行索引,列索引,索引都是从0开始,用法是一样的</li></ul><h3 id="3-多行多列读取"><a href="#3-多行多列读取" class="headerlink" title="3.多行多列读取"></a>3.多行多列读取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 多行输出</span></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line"><span class="comment">#读取指定多行的话,就要在ix[]里面嵌套列表指定行数</span></span><br><span class="line">data = df.loc[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name  age  score sex</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy   <span class="number">28</span>     <span class="number">99</span>   女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg   <span class="number">56</span>     <span class="number">98</span>   男</span><br></pre></td></tr></table></figure><ul><li>读取第一行第二列的值</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line">data = df.iloc[<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">28</span></span><br></pre></td></tr></table></figure><ul><li>读取第二行第三行和第3列第4列的值</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取第一行第二行的第三列和第四列的数据，这里需要嵌套列表</span></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line">data = df.iloc[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">3</span>]].values</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">28</span> <span class="number">99</span>]</span><br><span class="line"> [<span class="number">56</span> <span class="number">98</span>]]</span><br></pre></td></tr></table></figure><ul><li>读取第二行和第三行指定“score”和“age”列的数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line">data = df.loc[[<span class="number">1</span>,<span class="number">2</span>],[<span class="string">&quot;score&quot;</span>,<span class="string">&quot;age&quot;</span>]].values</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">99</span> <span class="number">28</span>]</span><br><span class="line"> [<span class="number">98</span> <span class="number">56</span>]]</span><br></pre></td></tr></table></figure><ul><li>读取指定列的数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取指定列的数据</span></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line">data = df.loc[:,[<span class="string">&quot;score&quot;</span>,<span class="string">&quot;age&quot;</span>]].values</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">100</span>  <span class="number">24</span>]</span><br><span class="line"> [ <span class="number">99</span>  <span class="number">28</span>]</span><br><span class="line"> [ <span class="number">98</span>  <span class="number">56</span>]</span><br><span class="line"> [ <span class="number">97</span>  <span class="number">52</span>]]</span><br></pre></td></tr></table></figure><h3 id="4-输出行号和列号"><a href="#4-输出行号和列号" class="headerlink" title="4.输出行号和列号"></a>4.输出行号和列号</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#输出行号和列号</span></span><br><span class="line">df=pd.read_excel(<span class="string">&#x27;demo.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出行号列表&quot;</span>,df.index.values)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出列好列表&quot;</span>,df.columns.values)</span><br><span class="line"><span class="comment"># df.sample方法类似于df.head()和df.values方法数据  这个数据选取是随机选取3行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出:&quot;</span>,df.sample(<span class="number">3</span>).values)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输出行号列表 [0 1 2 3]</span><br><span class="line">输出列好列表 [&#x27;number&#x27; &#x27;name&#x27; &#x27;age&#x27; &#x27;score&#x27; &#x27;sex&#x27;]</span><br><span class="line">输出: [[3 &#x27;lfg&#x27; 56 98 &#x27;男&#x27;]</span><br><span class="line"> [4 &#x27;zzy&#x27; 52 97 &#x27;女&#x27;]</span><br><span class="line"> [2 &#x27;wcy&#x27; 28 99 &#x27;女&#x27;]]</span><br></pre></td></tr></table></figure><h3 id="5-获取指定值"><a href="#5-获取指定值" class="headerlink" title="5.获取指定值"></a>5.获取指定值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#获取指定列的指定值</span></span><br><span class="line">df=pd.read_excel(<span class="string">&#x27;demo.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出值&quot;</span>,df[<span class="string">&#x27;score&#x27;</span>].values)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">输出值 [100  99  98  97]</span><br></pre></td></tr></table></figure><ul><li>excel数据转字典</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#excel数据转字典</span></span><br><span class="line">df=pd.read_excel(<span class="string">&#x27;demo.xlsx&#x27;</span>)</span><br><span class="line">test_data=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> df.index.values：</span><br><span class="line">    <span class="comment">#注意loc不要写成iloc</span></span><br><span class="line">    row_data=df.loc[i,[<span class="string">&#x27;number&#x27;</span>,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;score&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]].to_dict()</span><br><span class="line">    test_data.append(row_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;输出&quot;</span>.<span class="built_in">format</span>(test_data))</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">输出: [&#123;<span class="string">&#x27;number&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;, &#123;<span class="string">&#x27;number&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wcy&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">99</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">28</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;女&#x27;</span>&#125;, &#123;<span class="string">&#x27;number&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lfg&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">98</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">56</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;, &#123;<span class="string">&#x27;number&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;zzy&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="number">97</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">52</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;女&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="6-数据清洗操作"><a href="#6-数据清洗操作" class="headerlink" title="6.数据清洗操作"></a>6.数据清洗操作</h3><ul><li>去除全部带空值 的行</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&#x27;demo.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">data = df.dropna()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name   age  score   sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw</span><br><span class="line">   number name   age  score sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>   男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>   女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>   男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>   女</span><br></pre></td></tr></table></figure><ul><li>对空值进行填充</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#对空值进行填充</span></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;demo.xlsx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df[<span class="string">&quot;age&quot;</span>].fillna(<span class="number">0</span>,inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name   age  score   sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw</span><br><span class="line">   number name   age  score   sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   <span class="number">0.0</span>    NaN  dwdw</span><br></pre></td></tr></table></figure><ul><li>去除字符串的空格</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;name&#x27;</span>] = df[<span class="string">&#x27;name&#x27;</span>].<span class="built_in">map</span>(<span class="built_in">str</span>.strip)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><ul><li>字符串大小写转换</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;name&#x27;</span>] = df[<span class="string">&#x27;name&#x27;</span>].<span class="built_in">map</span>(<span class="built_in">str</span>.lower)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><ul><li>更改数据格式</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;name&#x27;</span>].fillna(<span class="number">0</span>).astype(<span class="string">&quot;int&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>更改列的名称</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;username&quot;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><ul><li>删除重复数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;age&#x27;</span>].drop_duplicates(inplace=<span class="literal">True</span>)</span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].drop_duplicates(inplace=<span class="literal">True</span>,kepp=<span class="string">&quot;last&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><ul><li>列举前几条数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改和替换</span></span><br><span class="line">data = df.tail(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ul><li>打印第几行的数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印第几行的数据</span></span><br><span class="line"><span class="built_in">print</span>(data.loc[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><ul><li>打印第几行的数据第几列的数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#打印出第八行[column_1]的列</span></span><br><span class="line"><span class="built_in">print</span>(data.loc[<span class="number">3</span>,column_1])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印第几行的数据名为。。。的数据</span></span><br><span class="line"><span class="built_in">print</span>(data.loc[<span class="number">2</span>:<span class="number">4</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;sex&quot;</span>])</span><br></pre></td></tr></table></figure><ul><li>统计出现的次数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计出现的次数  name是列的名称</span></span><br><span class="line">data = df.name.value_counts()</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ul><li>给每个列应用一个函数 apply()用法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给每个列应用一个函数</span></span><br><span class="line">f = <span class="keyword">lambda</span> x : x-<span class="number">20</span></span><br><span class="line">df[<span class="string">&quot;age&quot;</span>] = df[<span class="string">&quot;age&quot;</span>].apply(f)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><ul><li>给每个元素应用一个函数applymap()函数</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给每个元素应用一个函数</span></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;dw.xlsx&quot;</span>)</span><br><span class="line">f = <span class="keyword">lambda</span> x:x+<span class="number">100</span></span><br><span class="line">df = df.applymap(f)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><ul><li>遍历行和列的数据</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 遍历行和列</span></span><br><span class="line"><span class="keyword">for</span> i,row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    <span class="built_in">print</span>(i,row)</span><br></pre></td></tr></table></figure><ul><li>map函数用法</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&quot;name&quot;</span>] = df[<span class="string">&quot;name&quot;</span>].<span class="built_in">map</span>(<span class="keyword">lambda</span> name:name+<span class="string">&quot;wo&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><ul><li>选择指定的列重新输出</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line">df.loc[:,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;score&quot;</span>].to_excel(<span class="string">&quot;3列输出.xlsx&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>添加行头</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>,header=<span class="literal">None</span>,names=[<span class="string">&quot;序号&quot;</span>,<span class="string">&quot;姓名&quot;</span>,<span class="string">&quot;年龄&quot;</span>,<span class="string">&quot;分数&quot;</span>,<span class="string">&quot;性别&quot;</span>])</span><br><span class="line">df.to_excel(<span class="string">&quot;title.xlsx&quot;</span>,index=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h3 id="7-多表合并"><a href="#7-多表合并" class="headerlink" title="7.多表合并"></a>7.多表合并</h3><h4 id="concat参数详解："><a href="#concat参数详解：" class="headerlink" title="concat参数详解："></a>concat参数详解：</h4><ul><li>objs(必须参数):参与连接的pandas对象的列表或字典</li><li>axis:指明连接的轴向,默认为0</li><li>join:选中inner或outer(默认),其它轴向上索引是按交集(inner)还是并集(outer)进行合并</li><li>join_axes:指明用于其他N-1条轴的索引,不执行并集/交集运算</li><li>keys:与连接对象有关的值,用于形成连接轴向上的层次化索引</li><li>verify_integrity:是否去重</li><li>ignore_index:是否忽略索引</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frames = [df1,df2,df3]</span><br><span class="line">result = pd.concat(frames)</span><br><span class="line">result = pd.concat(frames,keys=[<span class="string">&quot;x&quot;</span>,<span class="string">&quot;y&quot;</span>,<span class="string">&quot;z&quot;</span>])  <span class="comment">#把每张表来个定义</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">&quot;demo.xlsx&quot;</span>)</span><br><span class="line">df.iloc[<span class="number">2</span>:<span class="number">4</span>,:].to_excel(<span class="string">&quot;demo01.xlsx&quot;</span>)</span><br><span class="line">data = pd.read_excel(<span class="string">&quot;demo01.xlsx&quot;</span>)</span><br><span class="line">frames = [df,data]</span><br><span class="line">content = pd.concat(frames,keys=[<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>],ignore_index=<span class="literal">True</span>,verify_integrity=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name   age  score   sex  Unnamed: <span class="number">0</span></span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男         NaN</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女         NaN</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男         NaN</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女         NaN</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw         NaN</span><br><span class="line"><span class="number">5</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男         <span class="number">2.0</span></span><br><span class="line"><span class="number">6</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女         <span class="number">3.0</span></span><br></pre></td></tr></table></figure><p><code>新增一行表进行连接</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个数据按行进行合并</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;number&quot;</span>:<span class="number">10</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;www&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">30</span>,<span class="string">&quot;score&quot;</span>:<span class="number">1000</span>&#125;,index=[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line">result = pd.concat([df,df2],axis=<span class="number">0</span>,ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name   age  score   sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw</span><br><span class="line">   number name  age  score</span><br><span class="line"><span class="number">1</span>      <span class="number">10</span>  www   <span class="number">30</span>   <span class="number">1000</span></span><br><span class="line">   number name   age   score   sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>   <span class="number">100.0</span>     男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>    <span class="number">99.0</span>     女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>    <span class="number">98.0</span>     男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>    <span class="number">97.0</span>     女</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN     NaN  dwdw</span><br><span class="line"><span class="number">5</span>      <span class="number">10</span>  www  <span class="number">30.0</span>  <span class="number">1000.0</span>   NaN</span><br></pre></td></tr></table></figure><p><code>新增一列数据进行连接</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\<span class="comment">#新建一列进行合并</span></span><br><span class="line">df3 = pd.DataFrame(&#123;<span class="string">&quot;index&quot;</span>:[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]&#125;)</span><br><span class="line">result = pd.concat([df,df3],axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name   age  score   sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw</span><br><span class="line">   number name   age  score   sex  index</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男      <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女      <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男      <span class="number">4</span></span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女      <span class="number">5</span></span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw      <span class="number">6</span></span><br></pre></td></tr></table></figure><p>常见的集中用法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#将df1和df4横向进行交集合并</span></span><br><span class="line">result = pd.concat([df1,df4],axis=<span class="number">1</span>,join=<span class="string">&quot;inner&quot;</span>)   列是增加,行是交集`</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#按照df1的索引进行df1表和df4表的横向索引</span></span><br><span class="line">pd.concat([df1,df4],axis=<span class="number">1</span>,join_axes=[df1.index])  列是增加,行以df1为准,空的为NaN</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#通过append()方法连接表格</span></span><br><span class="line">result = df.append(result,ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新增一列s1表,并且跟df进行横向合并</span></span><br><span class="line">s1 = pd.Series([<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>],name=<span class="string">&quot;x&quot;</span>)</span><br><span class="line">result = pd.concat([df,s1],axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name   age  score   sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw</span><br><span class="line">   number name   age  score   sex  x</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>     男  a</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>     女  a</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男  a</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女  a</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw  a</span><br></pre></td></tr></table></figure><h4 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只显示年龄为24和28的数据</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df = df[df[<span class="string">&quot;age&quot;</span>].isin([<span class="number">24</span>,<span class="number">28</span>])]</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name   age  score sex</span><br><span class="line"><span class="number">0</span>       <span class="number">1</span>  lhh  <span class="number">24.0</span>  <span class="number">100.0</span>   男</span><br><span class="line"><span class="number">1</span>       <span class="number">2</span>  wcy  <span class="number">28.0</span>   <span class="number">99.0</span>   女</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只显示年龄除了24和28的数据</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df = df[df[<span class="string">&quot;age&quot;</span>].isin([<span class="number">24</span>,<span class="number">28</span>])]</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   number name   age  score   sex</span><br><span class="line"><span class="number">2</span>       <span class="number">3</span>  lfg  <span class="number">56.0</span>   <span class="number">98.0</span>     男</span><br><span class="line"><span class="number">3</span>       <span class="number">4</span>  zzy  <span class="number">52.0</span>   <span class="number">97.0</span>     女</span><br><span class="line"><span class="number">4</span>       <span class="number">5</span>   dw   NaN    NaN  dwdw</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除不需要的列</span></span><br><span class="line">result = df.iloc[:, :<span class="built_in">len</span>(df.columns) - <span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出包含的数据并保存</span></span><br><span class="line">one = result[result[<span class="string">&quot;age&quot;</span>].isin([<span class="number">24</span>])]</span><br><span class="line">two = result[result[<span class="string">&quot;age&quot;</span>].isin([<span class="number">28</span>])]</span><br><span class="line">three = result[result[<span class="string">&quot;age&quot;</span>].isin([<span class="number">52</span>])]</span><br><span class="line">four = result[result[<span class="string">&quot;age&quot;</span>].isin([<span class="number">50</span>])]</span><br><span class="line">writer = pd.ExcelWriter(<span class="string">&quot;数据筛选.xlsx&quot;</span>)</span><br><span class="line">result.to_excel(writer, sheet_name=<span class="string">&quot;all&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">one.to_excel(writer, sheet_name=<span class="string">&quot;one&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">two.to_excel(writer, sheet_name=<span class="string">&quot;two&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">three.to_excel(writer, sheet_name=<span class="string">&quot;three&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">four.to_excel(writer, sheet_name=<span class="string">&quot;four&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">writer.save()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】使用pandas和csv读取csv文件.md</title>
      <link href="/archives/15248.html"/>
      <url>/archives/15248.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、pandas读取方式"><a href="#一、pandas读取方式" class="headerlink" title="一、pandas读取方式"></a>一、pandas读取方式</h3><h4 id="1、csv介绍"><a href="#1、csv介绍" class="headerlink" title="1、csv介绍"></a>1、csv介绍</h4><p>csv文件是一种以逗号分割字符的文件形式</p><p>我们创建一个简单的文件demo.csv，如下格式的形式进行存储，以，进行分割</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name,score,age,sex</span><br><span class="line">lhh,<span class="number">100</span>,<span class="number">24</span>,男</span><br><span class="line">wcy,<span class="number">99</span>,<span class="number">28</span>,女</span><br></pre></td></tr></table></figure><h4 id="2-读文件"><a href="#2-读文件" class="headerlink" title="2.读文件"></a>2.读文件</h4><ul><li>直接读取</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># 读取csv文件  全文件读取</span></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;demo.csv&#x27;</span>,encoding=<span class="string">&quot;gbk&quot;</span>)  <span class="comment"># 中文显示需要指定编码格式</span></span><br><span class="line">df = pd.DataFrame(data)   <span class="comment"># 当然这一步也可以不要，因为读出来的结果就是这种格式的，但是习惯性的写上这种方式</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  name  score  age sex</span><br><span class="line">0  lhh    100   24   男</span><br><span class="line">1  wcy     99   28   女</span><br></pre></td></tr></table></figure><ul><li>按行读取</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读取csv文件，一行一行的进行读取</span></span><br><span class="line">file = pd.read_csv(<span class="string">&#x27;demo.csv&#x27;</span>,encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">df = pd.DataFrame(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">    row  = df[i:i+<span class="number">1</span>]</span><br><span class="line">    <span class="built_in">print</span>(row ,<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  name  score  age sex</span><br><span class="line">0  lhh    100   24   男 </span><br><span class="line"></span><br><span class="line">  name  score  age sex</span><br><span class="line">1  wcy     99   28   女</span><br></pre></td></tr></table></figure><ul><li>获取文本标题中的每个值</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># row</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取row 中的每个值&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">    row  = df[i:i+<span class="number">1</span>]</span><br><span class="line">    name = row [<span class="string">&#x27;name&#x27;</span>][i]</span><br><span class="line">    score = row [<span class="string">&#x27;score&#x27;</span>][i]</span><br><span class="line">    <span class="built_in">print</span>(name,score,<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="3-写入csv"><a href="#3-写入csv" class="headerlink" title="3.写入csv"></a>3.写入csv</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写  使用pd将数据写入到csv文件当中，按列写入</span></span><br><span class="line">file = pd.read_csv(<span class="string">&#x27;demo.csv&#x27;</span>,encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line">df = pd.DataFrame(file)</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df)):</span><br><span class="line">    row = df[i:i + <span class="number">1</span>]</span><br><span class="line">    name = row[<span class="string">&#x27;name&#x27;</span>][i]</span><br><span class="line">    sex = row[<span class="string">&#x27;sex&#x27;</span>][i]</span><br><span class="line">    <span class="built_in">dict</span>[name] = sex</span><br><span class="line"></span><br><span class="line">new_df = pd.DataFrame.from_dict(<span class="built_in">dict</span>,orient=<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">new_df.to_csv(<span class="string">&#x27;demo_new.csv&#x27;</span>)</span><br></pre></td></tr></table></figure><p>文件内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">,0</span><br><span class="line">lhh,男</span><br><span class="line">wcy,女</span><br></pre></td></tr></table></figure><h3 id="二、csv读取方式"><a href="#二、csv读取方式" class="headerlink" title="二、csv读取方式"></a>二、csv读取方式</h3><h4 id="1-读取操作"><a href="#1-读取操作" class="headerlink" title="1.读取操作"></a>1.读取操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取csv文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo.csv&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;gbk&quot;</span>) <span class="keyword">as</span> csvfile:</span><br><span class="line">    spamreader = csv.reader(csvfile)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> spamreader:</span><br><span class="line">        <span class="built_in">print</span>(row)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[&#x27;name&#x27;, &#x27;score&#x27;, &#x27;age&#x27;, &#x27;sex&#x27;]</span><br><span class="line">[&#x27;lhh&#x27;, &#x27;100&#x27;, &#x27;24&#x27;, &#x27;男&#x27;]</span><br><span class="line">[&#x27;wcy&#x27;, &#x27;99&#x27;, &#x27;28&#x27;, &#x27;女&#x27;]</span><br></pre></td></tr></table></figure><h4 id="2-以字典形式进行读取"><a href="#2-以字典形式进行读取" class="headerlink" title="2.以字典形式进行读取"></a>2.以字典形式进行读取</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以字典的形式读取</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo.csv&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;gbk&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    reader = csv.DictReader(file)</span><br><span class="line">    items = <span class="built_in">list</span>(reader)</span><br><span class="line">    <span class="built_in">print</span>(items)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[&#123;&#x27;name&#x27;: &#x27;lhh&#x27;, &#x27;score&#x27;: &#x27;100&#x27;, &#x27;age&#x27;: &#x27;24&#x27;, &#x27;sex&#x27;: &#x27;男&#x27;&#125;, &#123;&#x27;name&#x27;: &#x27;wcy&#x27;, &#x27;score&#x27;: &#x27;99&#x27;, &#x27;age&#x27;: &#x27;28&#x27;, &#x27;sex&#x27;: &#x27;女&#x27;&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定列读取</span></span><br><span class="line">filename = [<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;sex&#x27;</span>]</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo.csv&quot;</span>,<span class="string">&quot;r&quot;</span>,encoding=<span class="string">&quot;gbk&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    reader = csv.DictReader(file,filename)</span><br><span class="line">    items = <span class="built_in">list</span>(reader)</span><br><span class="line">    <span class="built_in">print</span>(items)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;score&#x27;</span>, <span class="literal">None</span>: [<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>]&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;100&#x27;</span>, <span class="literal">None</span>: [<span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;男&#x27;</span>]&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wcy&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;99&#x27;</span>, <span class="literal">None</span>: [<span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;女&#x27;</span>]&#125;]</span><br></pre></td></tr></table></figure><h4 id="3-写入操作"><a href="#3-写入操作" class="headerlink" title="3.写入操作"></a>3.写入操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写入csv文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;demo_new_csv.csv&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    writer = csv.writer(file)</span><br><span class="line">    writer.writerow([<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;score&#x27;</span>])  <span class="comment"># 此时的标题需要以list形式写入，writer会在新建的csv文件中，一行一行写入</span></span><br></pre></td></tr></table></figure><p>文本内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name,score</span><br></pre></td></tr></table></figure><p>以字典方式写入</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;demo_new_csv.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>,newline=<span class="string">&quot;&quot;</span>,encoding=<span class="string">&quot;gbk&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    writer = csv.DictWriter(f,fieldnames=[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;score&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;sex&quot;</span>])</span><br><span class="line">    writer.writeheader()</span><br><span class="line">    writer.writerows(items)</span><br><span class="line">    writer.writerow(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>, <span class="string">&#x27;score&#x27;</span>: <span class="string">&#x27;100&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;男&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>文本内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name,score,age,sex</span><br><span class="line">lhh,<span class="number">100</span>,<span class="number">24</span>,男</span><br><span class="line">wcy,<span class="number">99</span>,<span class="number">28</span>,女</span><br><span class="line">lhh,<span class="number">100</span>,<span class="number">24</span>,男</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python实战案例】基于tkinter实现简单登录注册</title>
      <link href="/archives/48204.html"/>
      <url>/archives/48204.html</url>
      
        <content type="html"><![CDATA[<p>话不多说，直接上代码</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"><span class="comment"># 初始化对象</span></span><br><span class="line">login = tkinter.Tk()</span><br><span class="line"><span class="comment"># 定义标题名称</span></span><br><span class="line">login.title(<span class="string">&quot;登录&quot;</span>)</span><br><span class="line"><span class="comment"># 定义屏幕尺寸</span></span><br><span class="line">login.geometry(<span class="string">&#x27;200x200&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义label标签文本  grid定义显示位置 布局管理器</span></span><br><span class="line">tkinter.Label(login,text=<span class="string">&#x27;登录&#x27;</span>).grid(row=<span class="number">0</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>)</span><br><span class="line">tkinter.Label(login,text=<span class="string">&#x27;用户名：&#x27;</span>).grid(row=<span class="number">1</span>,column=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 定义输入的文本框，类似于html中的text</span></span><br><span class="line">name = tkinter.Entry(login)</span><br><span class="line">name.grid(row=<span class="number">1</span>,column=<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 定义label标签文本  grid定义显示位置</span></span><br><span class="line">tkinter.Label(login,text=<span class="string">&#x27;密  码：&#x27;</span>).grid(row=<span class="number">2</span>,column=<span class="number">0</span>,sticky=tkinter.E)</span><br><span class="line"><span class="comment"># 此种方式定义是为了避免出现‘NoneType’ object has no attribute ‘get’的错误</span></span><br><span class="line">passwd = tkinter.Entry(login,show=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">passwd.grid(row=<span class="number">2</span>,column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录注册的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success</span>():</span><br><span class="line">    <span class="keyword">if</span> name.get() == <span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> passwd.get() == <span class="string">&#x27;123&#x27;</span>:</span><br><span class="line">        <span class="comment"># 定义消息提示框</span></span><br><span class="line">        messagebox.showinfo(title=<span class="string">&#x27;successful&#x27;</span>,message=<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        messagebox.showerror(title=<span class="string">&#x27;wrong&#x27;</span>,message=<span class="string">&#x27;登录失败，用户名或密码错误&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义登录的按钮，command绑定点击的事件</span></span><br><span class="line">tkinter.Button(login,text=<span class="string">&#x27;登录&#x27;</span>,command=success).grid(row=<span class="number">3</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义注册的方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    register = tkinter.Tk()</span><br><span class="line">    register.title(<span class="string">&#x27;注册&#x27;</span>)</span><br><span class="line">    register.geometry(<span class="string">&#x27;200x200&#x27;</span>)</span><br><span class="line">    tkinter.Label(register,text=<span class="string">&#x27;用户注册&#x27;</span>).grid(row=<span class="number">0</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 用户名输入框</span></span><br><span class="line">    tkinter.Label(register,text=<span class="string">&#x27;用户  名：&#x27;</span>).grid(row=<span class="number">1</span>,column=<span class="number">0</span>,sticky=tkinter.E)</span><br><span class="line">    name = tkinter.Entry(register)</span><br><span class="line">    name.grid(row=<span class="number">1</span>,column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密码输入框</span></span><br><span class="line">    tkinter.Label(register,text=<span class="string">&#x27;密码：&#x27;</span>).grid(row=<span class="number">2</span>,column=<span class="number">0</span>,sticky=tkinter.E)</span><br><span class="line">    password = tkinter.Entry(register,show=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    password.grid(row=<span class="number">2</span>,column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 密码确认</span></span><br><span class="line">    tkinter.Label(register,text=<span class="string">&#x27;确认密码：&#x27;</span>).grid(row=<span class="number">3</span>,column=<span class="number">0</span>)</span><br><span class="line">    repassword = tkinter.Entry(register,show=<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    repassword.grid(row=<span class="number">3</span>,column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 手机号码输入</span></span><br><span class="line">    tkinter.Label(register,text=<span class="string">&#x27;手机号：&#x27;</span>).grid(row=<span class="number">4</span>,column=<span class="number">0</span>,sticky=tkinter.E)</span><br><span class="line">    phone = tkinter.Entry(register)</span><br><span class="line">    phone.grid(row=<span class="number">4</span>,column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 身份证号输入</span></span><br><span class="line">    tkinter.Label(register,text=<span class="string">&#x27;身份证号：&#x27;</span>).grid(row=<span class="number">5</span>,column=<span class="number">0</span>)</span><br><span class="line">    IDCard = tkinter.Entry(register)</span><br><span class="line">    IDCard.grid(row=<span class="number">5</span>,column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 正则匹配</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">card</span>(<span class="params">input_psd</span>):</span><br><span class="line">        string = <span class="string">&quot;~!@#$%^&amp;*()_+-*/&lt;&gt;,.[]\/&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> input_psd:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册的格式判断</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">registered</span>():</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="built_in">any</span>([x.isdigit() <span class="keyword">for</span> x <span class="keyword">in</span> name.get()]) <span class="keyword">and</span> <span class="built_in">any</span>([x.isalpha() <span class="keyword">for</span> x <span class="keyword">in</span> name.get()]) <span class="keyword">and</span> card(name.get())):</span><br><span class="line">            messagebox.showerror(title=<span class="string">&#x27;wrong&#x27;</span>,message=<span class="string">&#x27;注册失败，用户名格式错误，必须包括字母和数字以及特殊符号&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(password.get()) &lt; <span class="number">8</span>:</span><br><span class="line">            messagebox.showerror(title=<span class="string">&#x27;wrong&#x27;</span>,message=<span class="string">&#x27;注册失败，密码不应少于8位&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> password.get() != repassword.get():</span><br><span class="line">            messagebox.showerror(title=<span class="string">&#x27;wrong&#x27;</span>,message=<span class="string">&#x27;注册失败，两次密码不相同&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> (phone.get().isdigit() <span class="keyword">and</span> <span class="built_in">len</span>(phone.get()) == <span class="number">11</span>):</span><br><span class="line">            messagebox.showerror(title=<span class="string">&#x27;wrong&#x27;</span>,message=<span class="string">&#x27;注册失败，请输入正确的11位手机号&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(IDCard.get()) != <span class="number">18</span>:</span><br><span class="line">            messagebox.showerror(title=<span class="string">&#x27;wrong&#x27;</span>,message=<span class="string">&#x27;注册失败，请输入正确的18位身份证号&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            messagebox.showinfo(title=<span class="string">&#x27;successful&#x27;</span>,message=<span class="string">&#x27;注册成功！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    tkinter.Button(register,text=<span class="string">&#x27;注册&#x27;</span>,command=registered).grid(row=<span class="number">6</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义执行按钮</span></span><br><span class="line">tkinter.Button(login,text=<span class="string">&#x27;还没有账号？点我开始注册！&#x27;</span>,command=register).grid(row=<span class="number">4</span>,column=<span class="number">0</span>,columnspan=<span class="number">2</span>)</span><br><span class="line"><span class="comment">#开启窗口的主入口</span></span><br><span class="line">login.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行效果</p><p>登录：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/1.gif" alt="1" style="zoom: 50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】tkinter使用教程</title>
      <link href="/archives/37133.html"/>
      <url>/archives/37133.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、Tkinter介绍"><a href="#一、Tkinter介绍" class="headerlink" title="一、Tkinter介绍"></a>一、Tkinter介绍</h2><p>Tkinter 是 <code>Python</code>标准 GUI 库。Python 使用 Tkinter 可以快速的创建 GUI 应用程序。由于 Tkinter 是内置到 python 的安装包中、只要安装好 Python 之后就能 import Tkinter 库、而且 IDLE 也是用 Tkinter 编写而成。</p><span id="more"></span><p>相关的还有Pyqt5</p><h2 id="二、使用方式"><a href="#二、使用方式" class="headerlink" title="二、使用方式"></a>二、使用方式</h2><ul><li>导入tkinter模块</li><li>创建相关控件</li><li>指定控件所属对象</li><li>告诉GM产生相关对象</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">top = tkinter.Tk()</span><br><span class="line">top.mainloop()</span><br></pre></td></tr></table></figure><p><code>效果图</code>：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTc4MzAzMC8yMDIwMDUvMTc4MzAzMC0yMDIwMDUyMDE5MjM1NTkwMy0xNTY5ODUzMDkucG5n" alt="img"></p><h2 id="三、窗口主体设置"><a href="#三、窗口主体设置" class="headerlink" title="三、窗口主体设置"></a>三、窗口主体设置</h2><p>每一个 tkinter 应用的主体框架都可以包含下面这部分. 定义 <code>window</code> 窗口 和 <code>window</code>的一些属性, 然后书写窗口内容, 最后执行<code>window.mainloop</code>启动应用程序。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">top = tkinter.Tk()</span><br><span class="line">top.title(<span class="string">&quot;my first window&quot;</span>)</span><br><span class="line">top.geometry(<span class="string">&quot;500x500&quot;</span>)</span><br><span class="line">top.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211031174524624.png" alt="image-20211031174524624"></p><h2 id="四、窗口内容"><a href="#四、窗口内容" class="headerlink" title="四、窗口内容"></a>四、窗口内容</h2><h3 id="标签设置"><a href="#标签设置" class="headerlink" title="标签设置"></a>标签设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">window = tkinter.Tk()</span><br><span class="line">window.title(<span class="string">&quot;my first window&quot;</span>)</span><br><span class="line">window.geometry(<span class="string">&quot;500x500&quot;</span>)</span><br><span class="line"><span class="comment">#定义一个标签</span></span><br><span class="line">label = tkinter.Label(window,</span><br><span class="line">                      text=<span class="string">&quot;hello world!!!&quot;</span>, <span class="comment">#文本内容</span></span><br><span class="line">                      bg=<span class="string">&quot;red&quot;</span>, <span class="comment">#背景颜色</span></span><br><span class="line">                      font=(<span class="string">&#x27;Arial&#x27;</span>,<span class="number">12</span>),<span class="comment"># 字体设置</span></span><br><span class="line">                      width=<span class="number">15</span>,height=<span class="number">2</span> <span class="comment"># 标签的长宽</span></span><br><span class="line">                      )</span><br><span class="line">label.pack()   <span class="comment">#固定窗口位置</span></span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211031175116582.png" alt="image-20211031175116582"></p><p>我们也可以通过变量的形式控制标签的显示, 这时我们引入按钮 <code>tk.Button</code> 的概念, 没点一次按钮, 标签变化一次. 用一下内容替换上面的标签. 并把需要变化的文字存成变量 <code>var</code>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">window = tkinter.Tk()</span><br><span class="line">window.title(<span class="string">&quot;my first window&quot;</span>)</span><br><span class="line">window.geometry(<span class="string">&quot;500x500&quot;</span>)</span><br><span class="line"><span class="comment"># 定义文字变量存储器</span></span><br><span class="line">var = tkinter.StringVar()</span><br><span class="line">lable = tkinter.Label(window,</span><br><span class="line">                      textvariable=var, <span class="comment">#textvariable替代text，因为这个可以进行随机改变</span></span><br><span class="line">                      bg=<span class="string">&#x27;green&#x27;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>), width=<span class="number">15</span>, height=<span class="number">2</span>)</span><br><span class="line">lable.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><h3 id="按钮设置："><a href="#按钮设置：" class="headerlink" title="按钮设置："></a>按钮设置：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">button = tkinter.Button(window, </span><br><span class="line">    text=<span class="string">&#x27;hit me&#x27;</span>,      <span class="comment"># 显示在按钮上的文字</span></span><br><span class="line">    width=<span class="number">15</span>, height=<span class="number">2</span>, </span><br><span class="line">    command=hit_me)     <span class="comment"># 点击按钮式执行的命令</span></span><br><span class="line">button.pack()    <span class="comment"># 按钮位置</span></span><br></pre></td></tr></table></figure><p>我们进行点击判断：    </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">on = <span class="literal">False</span>  <span class="comment"># 默认初始状态为 False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hit_me</span>():</span><br><span class="line">    <span class="keyword">global</span> on</span><br><span class="line">    <span class="keyword">if</span> on == <span class="literal">False</span>:     <span class="comment"># 从 False 状态变成 True 状态</span></span><br><span class="line">        on = <span class="literal">True</span></span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&#x27;you click me&#x27;</span>)   <span class="comment"># 设置标签的文字为 &#x27;you hit me&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:       <span class="comment"># 从 True 状态变成 False 状态</span></span><br><span class="line">        on = <span class="literal">False</span></span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment"># 设置 文字为空</span></span><br></pre></td></tr></table></figure><p>新增一个按钮，按钮实战，绑定点击事件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="comment">#创建窗口</span></span><br><span class="line">window=tk.Tk()</span><br><span class="line">window.title(<span class="string">&#x27;Mywindow&#x27;</span>)<span class="comment">#窗口的标题</span></span><br><span class="line">window.geometry(<span class="string">&#x27;200x100&#x27;</span>)<span class="comment">#窗口的大小</span></span><br><span class="line"><span class="comment">#定义一个lable</span></span><br><span class="line">var=tk.StringVar()<span class="comment">#定义一个字符串变量</span></span><br><span class="line">label = tk.Label(window,</span><br><span class="line">    textvariable=var,    <span class="comment"># 标签的文字</span></span><br><span class="line">    bg=<span class="string">&#x27;green&#x27;</span>,     <span class="comment"># 标签背景颜色</span></span><br><span class="line">    font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>),     <span class="comment"># 字体和字体大小</span></span><br><span class="line">    width=<span class="number">15</span>, height=<span class="number">2</span>  <span class="comment"># 标签长宽</span></span><br><span class="line">    )</span><br><span class="line">label.pack()    <span class="comment"># 固定窗口位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个全局变量，</span></span><br><span class="line">flag=<span class="literal">False</span></span><br><span class="line"><span class="comment">#按钮的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">click_me</span>():</span><br><span class="line">    <span class="keyword">global</span> flag<span class="comment">#声明全局变量</span></span><br><span class="line">    <span class="keyword">if</span> flag==<span class="literal">False</span>:</span><br><span class="line">        flag=<span class="literal">True</span></span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&#x27;click me!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag=<span class="literal">False</span></span><br><span class="line">        var.<span class="built_in">set</span>(<span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">button = tkinter.Button(window,text=<span class="string">&quot;点我&quot;</span>,</span><br><span class="line">                        width=<span class="number">15</span>,</span><br><span class="line">                        height=<span class="number">2</span>,</span><br><span class="line">                        command=click_me)<span class="comment"># 绑定执行方法</span></span><br><span class="line">button.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211101160629239.png" alt="image-20211101160629239"></p><h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><p>窗口内容</p><p>创建按钮分别触发两种情况</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b1 = tk.Button(window,text=<span class="string">&quot;one&quot;</span>,width=<span class="number">15</span>,height=<span class="number">2</span>,command=one)</span><br><span class="line">b1.pack()</span><br><span class="line"></span><br><span class="line">b2 = tk.Button(window,text=<span class="string">&quot;two&quot;</span>,command=two)</span><br><span class="line">b2.pack()</span><br></pre></td></tr></table></figure><p>创建输入框entry，用户输入任何内容都显示为* 类似于html中的password</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&quot;我的第一个&quot;</span>)</span><br><span class="line">window.geometry(<span class="string">&quot;500x500&quot;</span>)</span><br><span class="line">en = tk.Entry(window,show=<span class="string">&quot;*&quot;</span>)</span><br><span class="line">en.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211101161125008.png" alt="image-20211101161125008"></p><p>创建一个显示的文本框</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&quot;我的第一个&quot;</span>)</span><br><span class="line">window.geometry(<span class="string">&quot;500x500&quot;</span>)</span><br><span class="line">en = tk.Text(window,height=<span class="number">5</span>)</span><br><span class="line">en.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211101161245624.png" alt="image-20211101161245624"></p><p>定义触发事件时的函数</p><p><code>注意：因为Python的执行顺序是从上往下，所以函数一定要放在按钮的上面</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">one</span>():</span><br><span class="line">    var = en.get()</span><br><span class="line">    t.insert(<span class="string">&#x27;one&#x27;</span>,var)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>():</span><br><span class="line">    var = en.get()</span><br><span class="line">    t.insert(<span class="string">&#x27;two&#x27;</span>,var)</span><br></pre></td></tr></table></figure><p>实战代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&quot;我的第一个&quot;</span>)</span><br><span class="line"><span class="comment">#定义窗口尺寸大小</span></span><br><span class="line">window.geometry(<span class="string">&quot;500x500&quot;</span>)</span><br><span class="line"><span class="comment"># 定义一个输入框  如果我们需要定义的是输入的密码，我们此时可以定义为show=&quot;*&quot;</span></span><br><span class="line">en = tk.Entry(window,show=<span class="literal">None</span>)</span><br><span class="line">en.pack()</span><br><span class="line"><span class="comment">#这里还可以定义字符串插入的具体位置，比如tk.insert(&#x27;2.2&#x27;,var)，表示插入到第2行第2列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">one</span>():</span><br><span class="line">    var = en.get()</span><br><span class="line">    text.insert(<span class="string">&#x27;insert&#x27;</span>,<span class="built_in">str</span>(var))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>():</span><br><span class="line">    var = en.get()</span><br><span class="line">    text.insert(<span class="string">&#x27;end&#x27;</span>,<span class="built_in">str</span>(var))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义两个执行函数的按钮</span></span><br><span class="line">one_bt = tk.Button(window,text=<span class="string">&quot;one&quot;</span>,width = <span class="number">15</span>,height =<span class="number">2</span>,command=one)</span><br><span class="line">one_bt.pack()</span><br><span class="line">two_bt = tk.Button(window,text=<span class="string">&quot;two&quot;</span>,width = <span class="number">15</span>,height =<span class="number">2</span>,command=two)</span><br><span class="line">two_bt.pack()</span><br><span class="line">text = tk.Text(window,height=<span class="number">2</span>)</span><br><span class="line">text.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211101162659306.png" alt="image-20211101162659306"></p><h3 id="listbox-列表部件"><a href="#listbox-列表部件" class="headerlink" title="listbox 列表部件"></a>listbox 列表部件</h3><p>创建一个label用于显示</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = tk.StringVar()   </span><br><span class="line">label =tk.Label(window,bg=<span class="string">&#x27;yellow&#x27;</span>,width=<span class="number">4</span>,textvariable=var1)</span><br><span class="line">label.pack()</span><br></pre></td></tr></table></figure><p>创建一个用于点击的事件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():</span><br><span class="line">   value = lb.get(lb.curselection())   <span class="comment">#获取当前选中的文本</span></span><br><span class="line">   var1.<span class="built_in">set</span>(value)     <span class="comment">#为label设置值 </span></span><br></pre></td></tr></table></figure><p>创建一个Listbox和变量var2，并将var2的值赋给Listbox</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var2 = tk.StringVar()</span><br><span class="line">var2.<span class="built_in">set</span>((<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>)) <span class="comment">#为变量设置值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Listbox</span></span><br><span class="line"></span><br><span class="line">lb = tk.Listbox(window, listvariable=var2)  <span class="comment">#将var2的值赋给Listbox</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个list并将值循环添加到Listbox控件中</span></span><br><span class="line">list_items = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_items:</span><br><span class="line">    lb.insert(<span class="string">&#x27;end&#x27;</span>, item)  <span class="comment">#从最后一个位置开始加入值</span></span><br><span class="line">lb.insert(<span class="number">1</span>, <span class="string">&#x27;first&#x27;</span>)       <span class="comment">#在第一个位置加入&#x27;first&#x27;字符</span></span><br><span class="line">lb.insert(<span class="number">2</span>, <span class="string">&#x27;second&#x27;</span>)      <span class="comment">#在第二个位置加入&#x27;second&#x27;字符</span></span><br><span class="line">lb.delete(<span class="number">2</span>)                <span class="comment">#删除第二个位置的字符</span></span><br><span class="line">lb.pack()</span><br></pre></td></tr></table></figure><p>实战代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&quot;listbox&quot;</span>)</span><br><span class="line">window.geometry(<span class="string">&quot;500x500&quot;</span>)</span><br><span class="line"><span class="comment">#创建一个label</span></span><br><span class="line">var1 = tk.StringVar()</span><br><span class="line">label = tk.Label(window,bg=<span class="string">&quot;red&quot;</span>,width=<span class="number">4</span>,textvariable=var1)</span><br><span class="line">label.pack()</span><br><span class="line"><span class="comment">#按钮事件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():</span><br><span class="line">    value = lb.get(lb.curselection()) <span class="comment"># 获取当前选中的文本</span></span><br><span class="line">    var1.<span class="built_in">set</span>(value)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个按钮</span></span><br><span class="line">b1 = tk.Button(window,text=<span class="string">&quot;print selection&quot;</span>,width=<span class="number">15</span>,height=<span class="number">2</span>,command=print_selection)</span><br><span class="line">b1.pack()</span><br><span class="line"><span class="comment">#创建一个listBox和变量var2,并将var2的值赋给listbox</span></span><br><span class="line">var2 = tk.StringVar()</span><br><span class="line">var2 = tk.StringVar()</span><br><span class="line">var2.<span class="built_in">set</span>((<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>)) <span class="comment">#为变量设置值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Listbox</span></span><br><span class="line"></span><br><span class="line">lb = tk.Listbox(window, listvariable=var2)  <span class="comment">#将var2的值赋给Listbox</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个list并将值循环添加到Listbox控件中</span></span><br><span class="line">list_items = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_items:</span><br><span class="line">    lb.insert(<span class="string">&#x27;end&#x27;</span>, item)  <span class="comment">#从最后一个位置开始加入值</span></span><br><span class="line">lb.insert(<span class="number">1</span>, <span class="string">&#x27;first&#x27;</span>)       <span class="comment">#在第一个位置加入&#x27;first&#x27;字符</span></span><br><span class="line">lb.insert(<span class="number">2</span>, <span class="string">&#x27;second&#x27;</span>)      <span class="comment">#在第二个位置加入&#x27;second&#x27;字符</span></span><br><span class="line">lb.delete(<span class="number">2</span>)                <span class="comment">#删除第二个位置的字符</span></span><br><span class="line">lb.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211101164022779.png" alt="image-20211101164022779"></p><h4 id="radiobutton选择按钮"><a href="#radiobutton选择按钮" class="headerlink" title="radiobutton选择按钮"></a>radiobutton选择按钮</h4><p>首先我们需要定义一个 <code>var</code> 用来将 radiobutton 的值和 Label 的值联系在一起. 然后创建一个radiobutton部分:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var = tk.StringVar()</span><br><span class="line">l = tk.Label(window, bg=<span class="string">&#x27;yellow&#x27;</span>, width=<span class="number">20</span>, text=<span class="string">&#x27;empty&#x27;</span>)</span><br><span class="line">l.pack()</span><br><span class="line"></span><br><span class="line">r1 = tk.Radiobutton(window, text=<span class="string">&#x27;Option A&#x27;</span>,</span><br><span class="line">                    variable=var, value=<span class="string">&#x27;A&#x27;</span>,</span><br><span class="line">                    command=print_selection)</span><br><span class="line">r1.pack()</span><br></pre></td></tr></table></figure><p>其中<code>variable=var</code>, <code>value=&#39;A&#39;</code>的意思就是，当我们鼠标选中了其中一个选项，把value的值<code>A</code>放到变量var中，然后赋值给<code>variable</code></p><p>触发事件：</p><p>我们将定义一个功能, 用来对选择的 radiobutton 进行操作. <code>print_selection</code> 功能就是选择了某个 radiobutton 后我们会在屏幕上打印的选项.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():</span><br><span class="line">    l.config(text=<span class="string">&#x27;you have selected &#x27;</span> + var.get())</span><br></pre></td></tr></table></figure><p>当触发这个函数功能时，我们的 label 中就会显示 text 所赋值的字符串即 ‘you have selected’, 后面则是我们所选中的选项 var.get()就是获取到变量 var 的值， 举个例子就是我们一开始所做的将选项 “option A” 选中时的值以 “A” 放入 var 中， 所以获取的也就是A 即如果我们这时候选中 “option A” 选项，label显示的值则是 “you have selected A”.</p><p>代码实战：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">window = tk.Tk()</span><br><span class="line">window.title(<span class="string">&quot;我的第一个&quot;</span>)</span><br><span class="line"><span class="comment">#定义窗口尺寸大小 必须是X 而不是*</span></span><br><span class="line">window.geometry(<span class="string">&quot;500x500&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个label</span></span><br><span class="line">var = tk.StringVar()</span><br><span class="line">label = tk.Label(window,bg=<span class="string">&quot;red&quot;</span>,width=<span class="number">20</span>,height=<span class="number">2</span>,text=<span class="string">&quot;empty&quot;</span>)</span><br><span class="line">label.pack()</span><br><span class="line"><span class="comment">#实现将选择的选项显示label</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_selection</span>():</span><br><span class="line">    label.config(text=<span class="string">&quot;you have selected&quot;</span>+var.get())</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建几个Radiobutton</span></span><br><span class="line">r1 = tk.Radiobutton(window,text=<span class="string">&quot;Option A&quot;</span>,variable=var,value=<span class="string">&quot;A&quot;</span>,command=print_selection)</span><br><span class="line">r1.pack()</span><br><span class="line">r2 = tk.Radiobutton(window,text=<span class="string">&quot;Option B&quot;</span>,variable=var,value=<span class="string">&quot;B&quot;</span>,command=print_selection)</span><br><span class="line">r2.pack()</span><br><span class="line">r3 = tk.Radiobutton(window,text=<span class="string">&quot;Option C&quot;</span>,variable=var,value=<span class="string">&quot;C&quot;</span>,command=print_selection)</span><br><span class="line">r3.pack()</span><br><span class="line">r4 = tk.Radiobutton(window,text=<span class="string">&quot;Option D&quot;</span>,variable=var,value=<span class="string">&quot;D&quot;</span>,command=print_selection)</span><br><span class="line">r4.pack()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20211101164814878.png" alt="image-20211101164814878"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python实战案例】读取雷达基数据</title>
      <link href="/archives/42156.html"/>
      <url>/archives/42156.html</url>
      
        <content type="html"><![CDATA[<h4 id="方式1：读出最原始的图"><a href="#方式1：读出最原始的图" class="headerlink" title="方式1：读出最原始的图"></a>方式1：读出最原始的图</h4><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> cinrad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 雷达数据路径地址</span></span><br><span class="line">path=<span class="string">r&quot;xxxxxx&quot;</span></span><br><span class="line">f = cinrad.io.CinradReader(path)</span><br><span class="line">rl = <span class="built_in">list</span>(f.iter_tilt(<span class="number">230</span>, <span class="string">&#x27;REF&#x27;</span>))</span><br><span class="line"><span class="comment">#组合反射率</span></span><br><span class="line">cr = cinrad.easycalc.quick_cr(rl)</span><br><span class="line"><span class="comment">#ppi画图</span></span><br><span class="line">fig = cinrad.visualize.PPI(cr, dpi=<span class="number">999</span>, add_city_names=<span class="literal">True</span>)</span><br><span class="line">fig(<span class="string">&quot;1.png&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方式2：设置仰角"><a href="#方式2：设置仰角" class="headerlink" title="方式2：设置仰角"></a>方式2：设置仰角</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> array <span class="keyword">import</span> array</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> colors</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> filedialog</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    file= openFile()</span><br><span class="line">    k = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请选择仰角 1 3 5 6 7 8 9 10 11：&#x27;</span>))</span><br><span class="line">    el, az, rl, dbz = saDecoder(file,k)</span><br><span class="line">    el, az, rl, dbz = dataLink(el, az, rl, dbz) </span><br><span class="line">    x, y, h = sph2cord(el, az, rl)</span><br><span class="line">    plotFunction(x, y, dbz, k)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openFile</span>():</span><br><span class="line"></span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    root.withdraw()</span><br><span class="line">    <span class="keyword">return</span> filedialog.askopenfilename()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">saDecoder</span>(<span class="params">file, k</span>):</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    data = np.asarray(array(<span class="string">&#x27;B&#x27;</span>, f.read()))</span><br><span class="line">    data = data.reshape(<span class="built_in">len</span>(data)//<span class="number">2432</span>, <span class="number">2432</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> data[<span class="number">0</span>,<span class="number">72</span>] == <span class="number">11</span>:</span><br><span class="line">        phi = [<span class="number">0.50</span>, <span class="number">0.50</span>, <span class="number">1.45</span>, <span class="number">1.45</span>, <span class="number">2.40</span>, <span class="number">3.35</span>, <span class="number">4.30</span>, <span class="number">5.25</span>, <span class="number">6.2</span>, <span class="number">7.5</span>, <span class="number">8.7</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16.7</span>, <span class="number">19.5</span>]</span><br><span class="line">    <span class="keyword">if</span> data[<span class="number">0</span>, <span class="number">72</span>] == <span class="number">21</span>:</span><br><span class="line">        phi = [<span class="number">0.50</span>, <span class="number">0.50</span>, <span class="number">1.45</span>, <span class="number">1.45</span>, <span class="number">2.40</span>, <span class="number">3.35</span>, <span class="number">4.30</span>, <span class="number">6.00</span>, <span class="number">9.00</span>, <span class="number">14.6</span>, <span class="number">19.5</span>]</span><br><span class="line">    <span class="keyword">if</span> data[<span class="number">0</span>, <span class="number">72</span>] == <span class="number">31</span>:</span><br><span class="line">        phi = [<span class="number">0.50</span>, <span class="number">0.50</span>, <span class="number">1.50</span>, <span class="number">1.50</span>, <span class="number">2.50</span>, <span class="number">2.50</span>, <span class="number">3.50</span>, <span class="number">4.50</span>]</span><br><span class="line">    <span class="keyword">if</span> data[<span class="number">0</span>, <span class="number">72</span>] == <span class="number">32</span>:</span><br><span class="line">        phi = [<span class="number">0.50</span>, <span class="number">0.50</span>, <span class="number">2.50</span>, <span class="number">3.50</span>, <span class="number">4.50</span>]</span><br><span class="line"></span><br><span class="line">    el = np.zeros((<span class="built_in">len</span>(data), <span class="number">460</span>))  <span class="comment">#仰角</span></span><br><span class="line">    az = np.zeros((<span class="built_in">len</span>(data), <span class="number">460</span>))  <span class="comment">#方位角</span></span><br><span class="line">    rl = np.zeros((<span class="built_in">len</span>(data), <span class="number">460</span>))  <span class="comment">#径向长度</span></span><br><span class="line">    dbz = np.zeros((<span class="built_in">len</span>(data), <span class="number">460</span>))  <span class="comment">#反射率</span></span><br><span class="line"></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> count &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        el_number = data[count,<span class="number">44</span>] + <span class="number">256</span> * data[count,<span class="number">45</span>] <span class="comment">#仰角序数</span></span><br><span class="line">        az_value = (data[count,<span class="number">36</span>] + <span class="number">256</span> * data[count,<span class="number">37</span>]) / <span class="number">8</span> * <span class="number">180</span> / <span class="number">4096</span>  <span class="comment">#方位角</span></span><br><span class="line">        d_value = data[count,<span class="number">54</span>] + <span class="number">256</span> * data[count,<span class="number">55</span>] <span class="comment">#库长</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> d_value == <span class="number">0</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="number">460</span>:</span><br><span class="line">            el[count-<span class="number">1</span>, i] = phi[el_number-<span class="number">1</span>]</span><br><span class="line">            az[count-<span class="number">1</span>, i] = az_value</span><br><span class="line">            rl[count-<span class="number">1</span>, i] = i + <span class="number">1</span></span><br><span class="line">            <span class="comment">#计算反射率</span></span><br><span class="line">            <span class="keyword">if</span> i &gt; d_value:</span><br><span class="line">                dbz[count-<span class="number">1</span>, i] = -<span class="number">9900</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> data[count-<span class="number">1</span>, <span class="number">128</span>+i] == <span class="number">0</span>:  <span class="comment">#无回波数据</span></span><br><span class="line">                    dbz[count-<span class="number">1</span>, i] = -<span class="number">9900</span></span><br><span class="line">                <span class="keyword">elif</span> data[count-<span class="number">1</span>, <span class="number">128</span>+i] == <span class="number">1</span>:  <span class="comment">#距离模糊</span></span><br><span class="line">                    dbz[count-<span class="number">1</span>, i] = -<span class="number">9901</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dbz[count-<span class="number">1</span>, i] = (data[count-<span class="number">1</span>, <span class="number">128</span>+i] - <span class="number">2</span>) / <span class="number">2</span> - <span class="number">32</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    m = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> m &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        <span class="keyword">if</span> data[m,<span class="number">44</span>] &gt; (k-<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        m += <span class="number">1</span></span><br><span class="line">    n = m</span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">len</span>(data):</span><br><span class="line">        <span class="keyword">if</span> data[n,<span class="number">44</span>] &gt; k:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    elVlues = el[m:n,<span class="number">0</span>:<span class="number">230</span>]  <span class="comment">#对应第k个仰角的仰角值</span></span><br><span class="line">    azValues = az[m:n,<span class="number">0</span>:<span class="number">230</span>] <span class="comment">#对应的方位角</span></span><br><span class="line">    rlValues = rl[m:n,<span class="number">0</span>:<span class="number">230</span>] <span class="comment">#对应的径向长度</span></span><br><span class="line">    dbzValues = dbz[m:n,<span class="number">0</span>:<span class="number">230</span>] <span class="comment">#对应的回波强度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elVlues, azValues, rlValues, dbzValues</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sph2cord</span>(<span class="params">el, az, r</span>):</span><br><span class="line"></span><br><span class="line">    e, a = np.deg2rad([el, az])</span><br><span class="line">    x = r * np.cos(e) * np.sin(a)</span><br><span class="line">    y = r * np.cos(e) * np.cos(a)</span><br><span class="line">    h = r * np.sin(e)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x, y, h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plotFunction</span>(<span class="params">x, y, dbz, k</span>):</span><br><span class="line"></span><br><span class="line">    phi = [<span class="number">0.50</span>, <span class="number">0.50</span>, <span class="number">1.45</span>, <span class="number">1.45</span>, <span class="number">2.40</span>, <span class="number">3.35</span>, <span class="number">4.30</span>, <span class="number">6.00</span>, <span class="number">9.00</span>, <span class="number">14.6</span>, <span class="number">19.5</span>]</span><br><span class="line">    cdict = [<span class="string">&#x27;#606060&#x27;</span>, <span class="string">&#x27;#01ADA5&#x27;</span>, <span class="string">&#x27;#C0C0FE&#x27;</span>, <span class="string">&#x27;#7B72EF&#x27;</span>, <span class="string">&#x27;#1F27D1&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;#A6FDA8&#x27;</span>, <span class="string">&#x27;#00EA00&#x27;</span>, <span class="string">&#x27;#10921A&#x27;</span>, <span class="string">&#x27;#FCF465&#x27;</span>, <span class="string">&#x27;#C9C903&#x27;</span>, <span class="string">&#x27;#8C8C00&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;#FFACAC&#x27;</span>, <span class="string">&#x27;#FE655C&#x27;</span>, <span class="string">&#x27;#EE0231&#x27;</span>, <span class="string">&#x27;#D58FFE&#x27;</span>, <span class="string">&#x27;#AA25FA&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line">    cmap = colors.ListedColormap(cdict)</span><br><span class="line">    norm = colors.Normalize(vmin=-<span class="number">15</span>,vmax=<span class="number">70</span>)</span><br><span class="line">    x = np.concatenate((x, [x[<span class="number">0</span>]]))  <span class="comment"># 闭合</span></span><br><span class="line">    y = np.concatenate((y, [y[<span class="number">0</span>]]))  <span class="comment"># 闭合</span></span><br><span class="line">    plt.pcolor(x,y,dbz,norm=norm,cmap=cmap)</span><br><span class="line">    plt.title(<span class="string">&#x27;Reflectivity&#x27;</span>+<span class="string">&#x27;(&#x27;</span>+<span class="built_in">str</span>(phi[k-<span class="number">1</span>])+<span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">    plt.axis(<span class="string">&#x27;square&#x27;</span>)</span><br><span class="line">    plt.colorbar()</span><br><span class="line">    plt.savefig(<span class="built_in">str</span>(phi[k-<span class="number">1</span>])+<span class="string">&#x27;.png&#x27;</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dataLink</span>(<span class="params">el,az,rl,dbz</span>):</span><br><span class="line"></span><br><span class="line">    El = np.zeros((<span class="number">360</span>, <span class="number">230</span>))</span><br><span class="line">    Az = np.zeros((<span class="number">360</span>, <span class="number">230</span>))</span><br><span class="line">    Rl = np.zeros((<span class="number">360</span>, <span class="number">230</span>))</span><br><span class="line">    DBZ = np.zeros((<span class="number">360</span>, <span class="number">230</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">361</span>):</span><br><span class="line">        err = np.<span class="built_in">abs</span>(az[:, <span class="number">0</span>] - i)</span><br><span class="line">        <span class="built_in">id</span> = np.argmin(err)</span><br><span class="line">        El[i-<span class="number">1</span>,:] = el[<span class="built_in">id</span>,:]</span><br><span class="line">        Az[i-<span class="number">1</span>,:] = az[<span class="built_in">id</span>,:]</span><br><span class="line">        Rl[i-<span class="number">1</span>,:] = rl[<span class="built_in">id</span>,:]</span><br><span class="line">        DBZ[i-<span class="number">1</span>,:] = dbz[<span class="built_in">id</span>,:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> El, Az, Rl, DBZ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Cinrad </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Cinrad </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python实战案例】基于WebSocket的简易聊天室</title>
      <link href="/archives/55562.html"/>
      <url>/archives/55562.html</url>
      
        <content type="html"><![CDATA[<p>话不多说直接上代码：</p><span id="more"></span><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>聊天室<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;contents&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:500px;overflow:auto;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;sendMsg()&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://127.0.0.1:2222/chat&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#contents&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;p&gt;&quot;</span> + e.<span class="property">data</span> + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendMsg</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> msg = $(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        ws.<span class="title function_">send</span>(msg);</span></span><br><span class="line"><span class="language-javascript">        $(<span class="string">&quot;#msg&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals, print_function</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tornado</span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line"><span class="keyword">from</span> tornado.web <span class="keyword">import</span> RequestHandler</span><br><span class="line"><span class="keyword">from</span> tornado.websocket <span class="keyword">import</span> WebSocketHandler</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置服务器端口</span></span><br><span class="line">define(<span class="string">&quot;port&quot;</span>, default=<span class="number">2222</span>, <span class="built_in">type</span>=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexHandler</span>(<span class="title class_ inherited__">RequestHandler</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        self.render(<span class="string">&quot;chat-client.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatHandler</span>(<span class="title class_ inherited__">WebSocketHandler</span>):</span><br><span class="line">    users = <span class="built_in">set</span>()  <span class="comment"># 用来存放在线用户的容器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 建立连接后添加用户到容器中</span></span><br><span class="line">        self.users.add(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 向已在线用户发送消息??</span></span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> self.users:</span><br><span class="line">            remote_ip, port = self.request.connection.context.address</span><br><span class="line">            now = datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>)</span><br><span class="line">            user.write_message(<span class="string">&quot;[&#123;&#125;][&#123;&#125;:&#123;&#125;]-进入聊天室&quot;</span>.<span class="built_in">format</span>(now, remote_ip, port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">self, message</span>):</span><br><span class="line">        <span class="comment"># 向在线用户广播消息</span></span><br><span class="line">        now = datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>)</span><br><span class="line">        remote_ip, port = self.request.connection.context.address</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> self.users:</span><br><span class="line">            user.write_message(<span class="string">&quot;[&#123;&#125;][&#123;&#125;:&#123;&#125;] &#123;&#125;&quot;</span>.<span class="built_in">format</span>(now, remote_ip, port, message))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 用户关闭连接后从容器中移除用户</span></span><br><span class="line">        now = datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>)</span><br><span class="line">        remote_ip, port = self.request.connection.context.address</span><br><span class="line">        self.users.remove(self)</span><br><span class="line">        <span class="keyword">for</span> user <span class="keyword">in</span> self.users:</span><br><span class="line">            user.write_message(<span class="string">&quot;[&#123;&#125;][&#123;&#125;:&#123;&#125;]-离开聊天室&quot;</span>.<span class="built_in">format</span>(now, remote_ip, port))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_origin</span>(<span class="params">self, origin</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>  <span class="comment"># 允许WebSocket的跨域请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line"></span><br><span class="line">    app = tornado.web.Application([</span><br><span class="line">        (<span class="string">r&quot;/&quot;</span>, IndexHandler),</span><br><span class="line">        (<span class="string">r&quot;/chat&quot;</span>, ChatHandler),</span><br><span class="line">    ],</span><br><span class="line">        static_path=os.path.join(os.path.dirname(__file__), <span class="string">&quot;static&quot;</span>),</span><br><span class="line">        template_path=os.path.join(os.path.dirname(__file__), <span class="string">&quot;template&quot;</span>),</span><br><span class="line">        debug=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码地址：<a href="https://gitee.com/liuhuanhuan963019/WebSocket_Chat_Python.git">https://gitee.com/liuhuanhuan963019/WebSocket_Chat_Python.git</a></p><p>欢迎关注！！！</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java简单实现雪花算法</title>
      <link href="/archives/37664.html"/>
      <url>/archives/37664.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><code>SnowFlake</code>算法，是 Twitter 开源的分布式 id 生成算法.其核心思想就是：使用一个 64 bit 的 long 型的数字作为全局唯一 id。在分布式系统中的应用十分广泛，且 ID 引入了时间戳，基本上保持自增。</p><span id="more"></span><p>这 64 个 bit 中，其中 第一个表示符位号，然后用其中的 41 bit 作为毫秒数，用 10 bit 作为工作机器 id，12 bit 作为序列号。</p><p>例如：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9e68b8126240ed4baf241de66346f3e0.png" alt="image-20211024232225798"></p><ul><li><p>第一个部分，是 1 个 bit：0，这个是符号位。<br>因为二进制里第一个 bit 如果是 1，那么都是负数，但是我们生成的 id 都是正数，所以第一个 bit 统一都是 0</p></li><li><p>第二个部分是 41 个 bit：表示的是时间戳</p><p>41 bit 可以表示的数字多达 2 41 − 1 2^{41} - 12  41−1，也就是可以标识 2 41 − 1 2^{41}-12 41<br> −1 个毫秒值，换算成年就是表示 69 年的时间</p></li><li><p>第三个部分是 5 个 bit：表示的是机房 id，10001代表的是这个服务最多可以部署在 2 5 2^{5}2 5个机房（32个机房）</p></li><li><p>第四个部分是 5 个 bit：表示的是机器 id，11001代表的是这个每个机房最多可以部署 2 5 2^{5}2 5个机器（32个机器）</p></li><li><p>第五个部分是 12 个 bit：表示的序号，就是某个机房某台机器上这一毫秒内同时生成的 id 的序号，0000 00000000 12 bit 可以代表的最大正整数是 2 12 − 1 = 4096 2 ^ {12} - 1 = 40962 12 −1=4096，也就是说可以用这个 12 bit 代表的数字来区分同一个毫秒内的 4096 个不同的 id</p></li></ul><p>简单来说，你的某个服务假设要生成一个全局唯一 id，那么就可以发送一个请求给部署了 SnowFlake 算法的系统，由这个 SnowFlake 算法系统来生成唯一 id。</p><p>这个 SnowFlake 算法系统首先肯定是知道自己所在的机房和机器的，比如机房 id = 17，机器 id = 12。</p><p>接着 SnowFlake 算法系统接收到这个请求之后，首先就会用二进制位运算的方式生成一个 64 bit 的 long 型 id，64 个 bit 中的第一个 bit 是无意义的。</p><p>接着 41 个 bit，就可以用当前时间戳（单位到毫秒），然后接着 5 个 bit 设置上这个机房 id，还有 5 个 bit 设置上机器 id。</p><p>最后再判断一下，当前这台机房的这台机器上这一毫秒内，这是第几个请求，给这次生成 id 的请求累加一个序号，作为最后的 12 个 bit。</p><p>最终一个 64 个 bit 的 id 就出来了</p><p>这个算法可以保证说，一个机房的一台机器上，在同一毫秒内，生成了一个唯一的 id。可能一个毫秒内会生成多个 id，但是有最后 12 个 bit 的序号来区分开来。</p><h2 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h2><p>SnowFlake算法的优点：</p><ul><li>高性能高可用：生成时不依赖于数据库，完全在内存中生成</li><li>容量大：每秒中能生成数百万的自增 ID</li><li>ID自增：存入数据库中，索引效率高</li></ul><p>SnowFlake算法的缺点：</p><ul><li>依赖与系统时间的一致性，如果系统时间被回调，或者改变，可能会造成id冲突或者重复</li></ul><h2 id="三、算法实现"><a href="#三、算法实现" class="headerlink" title="三、算法实现"></a>三、算法实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnowFlake</span> &#123;</span><br><span class="line">    <span class="comment">// 起始的时间戳</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">START_STMP</span> <span class="operator">=</span> <span class="number">1577808000000L</span>; <span class="comment">//2020-01-01</span></span><br><span class="line">    <span class="comment">// 每一部分占用的位数，就三个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">SEQUENCE_BIT</span> <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//序列号占用的位数private final static long MACHINE_BIT = 5; //机器标识占用的位数private final static long DATACENTER_BIT = 5; //数据中心占用的位数</span></span><br><span class="line">    <span class="comment">// 每一部分最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">MAX_DATACENTER_NUM</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; DATACENTER_BIT);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">MAX_MACHINE_NUM</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; MACHINE_BIT); <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">MAX_SEQUENCE</span> <span class="operator">=</span> -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; SEQUENCE_BIT);</span><br><span class="line">    <span class="comment">// 每一部分向左的位移</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">MACHINE_LEFT</span> <span class="operator">=</span> SEQUENCE_BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">DATACENTER_LEFT</span> <span class="operator">=</span> SEQUENCE_BIT + MACHINE_BIT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">TIMESTMP_LEFT</span> <span class="operator">=</span> DATACENTER_LEFT + DATACENTER_BIT; <span class="keyword">private</span> <span class="type">long</span> datacenterId; <span class="comment">//数据中心</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> machineId; <span class="comment">//机器标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">sequence</span> <span class="operator">=</span> <span class="number">0L</span>; <span class="comment">//序列号private long lastStmp = -1L; //上一次时间戳</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SnowFlake</span><span class="params">(<span class="type">long</span> datacenterId, <span class="type">long</span> machineId)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;datacenterId can&#x27;t be greater than MAX_DATACENTER_NUM or less than 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (machineId &gt; MAX_MACHINE_NUM || machineId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;machineId can&#x27;t be greater than MAX_MACHINE_NUM or less than 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.datacenterId = datacenterId; <span class="built_in">this</span>.machineId = machineId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//产生下一个ID</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">currStmp</span> <span class="operator">=</span> timeGen(); <span class="keyword">if</span> (currStmp &lt; lastStmp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Clock moved backwards. Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currStmp == lastStmp) &#123;</span><br><span class="line"><span class="comment">//if条件里表示当前调用和上一次调用落在了相同毫秒内，只能通过第三部分，序列号自增来判断为唯一，所以+1. sequence = (sequence + 1) &amp; MAX_SEQUENCE;</span></span><br><span class="line"><span class="comment">//同一毫秒的序列数已经达到最大，只能等待下一个毫秒     if (sequence == 0L) &#123;</span></span><br><span class="line">            currStmp = getNextMill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//不同毫秒内，序列号置为0</span></span><br><span class="line"><span class="comment">//执行到这个分支的前提是currTimestamp &gt; lastTimestamp，说明本次调用跟上次调用对比，已经不再同一个毫秒内了，这个时候序号可以重新回置0了。</span></span><br><span class="line">        sequence = <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastStmp = currStmp;</span><br><span class="line"><span class="comment">//就是用相对毫秒数、机器ID和自增序号拼接</span></span><br><span class="line"><span class="keyword">return</span> (currStmp - START_STMP) &lt;&lt; TIMESTMP_LEFT <span class="comment">//时间戳部分</span></span><br><span class="line">| datacenterId &lt;&lt; DATACENTER_LEFT <span class="comment">//数据中心部分</span></span><br><span class="line">| machineId &lt;&lt; MACHINE_LEFT <span class="comment">//机器标识部分</span></span><br><span class="line">| sequence;<span class="comment">//序列号部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">getNextMill</span><span class="params">()</span> &#123; <span class="type">long</span> <span class="variable">mill</span> <span class="operator">=</span> timeGen(); <span class="keyword">while</span> (mill &lt;= lastStmp) &#123; mill = timeGen();</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> mill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">timeGen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123; converters.add(toStringConverter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*BigDecimal Long 转化为String</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*<span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span> <span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MappingJackson2HttpMessageConverter <span class="title function_">toStringConverter</span><span class="params">()</span> &#123; <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>(); <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"><span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>(); simpleModule.addSerializer(BigDecimal.class, BigDecimalToStringSerializer.instance); simpleModule.addSerializer(Long.class, ToStringSerializer.instance); simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance); simpleModule.addSerializer(<span class="type">long</span>.class, ToStringSerializer.instance); mapper.registerModule(simpleModule);</span><br><span class="line"><span class="comment">// Include.Include.ALWAYS 默认</span></span><br><span class="line"><span class="comment">// Include.NON_DEFAULT 属性为默认值不序列化</span></span><br><span class="line"><span class="comment">// Include.NON_EMPTY 属性为 空（&quot;&quot;） 或者为 NULL 都不序列化，则返回的json是没有这个字段的。这样对移动端会更省流量</span></span><br><span class="line"><span class="comment">// Include.NON_NULL 属性为NULL 不序列化</span></span><br><span class="line">mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</span><br><span class="line">mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>); mapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS, <span class="literal">true</span>);<span class="comment">// 允许出现特殊字符和转义符mapper.configure(JsonParser.Feature.ALLOW_SINGLE_QUOTES, true); // 允许出现单引号</span></span><br><span class="line"></span><br><span class="line">converter.setObjectMapper(mapper);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> converter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JacksonStdImpl</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">BigDecimalToStringSerializer</span> <span class="keyword">extends</span> <span class="title class_">ToStringSerializer</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">BigDecimalToStringSerializer</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimalToStringSerializer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigDecimalToStringSerializer</span><span class="params">()</span> &#123; <span class="built_in">super</span>(Object.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigDecimalToStringSerializer</span><span class="params">(Class&lt;?&gt; handledType)</span> &#123; <span class="built_in">super</span>(handledType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">(SerializerProvider prov, Object value)</span> &#123; <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> ((BigDecimal) value).stripTrailingZeros().toPlainString(); <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider provider)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">gen.writeString(((BigDecimal) value).stripTrailingZeros().toPlainString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> JsonNode <span class="title function_">getSchema</span><span class="params">(SerializerProvider provider, Type typeHint)</span> <span class="keyword">throws</span> JsonMappingException &#123; <span class="keyword">return</span> createSchemaNode(<span class="string">&quot;string&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">serializeWithType</span><span class="params">(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// no type info, just regular serialization serialize(value, gen, provider);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考文章：<a href="https://blog.csdn.net/dreaming_coder/article/details/116542633?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163508968716780366545515%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=163508968716780366545515&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-116542633.pc_v2_rank_blog_default&amp;utm_term=%E9%9B%AA%E8%8A%B1&amp;spm=1018.2226.3001.4450">https://blog.csdn.net/dreaming_coder/article/details/116542633?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163508968716780366545515%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;request_id=163508968716780366545515&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-116542633.pc_v2_rank_blog_default&amp;utm_term=%E9%9B%AA%E8%8A%B1&amp;spm=1018.2226.3001.4450</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot+Mybatis反向生成数据库表</title>
      <link href="/archives/45750.html"/>
      <url>/archives/45750.html</url>
      
        <content type="html"><![CDATA[<p>废话不多说，直接上源码</p><p>config目录下新增</p><span id="more"></span><p><code>MyBatisMapperScannerConfig</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.mapper.MapperScannerConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.AutoConfigureAfter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘欢欢</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/10/17 4:44 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(MybatisTableConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisMapperScannerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">mapperScannerConfigurer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">      <span class="comment">// com.lhh.mapper改成自己本地的地址，com.gitee.....不要动</span></span><br><span class="line">        mapperScannerConfigurer.setBasePackage(<span class="string">&quot;com.lhh.mapper.*;com.gitee.sunchenbin.mybatis.actable.dao.*&quot;</span>);  </span><br><span class="line">        mapperScannerConfigurer.setSqlSessionFactoryBeanName(<span class="string">&quot;sqlSessionFactory&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> mapperScannerConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MybatisTableConfig</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.PathMatchingResourcePatternResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.gitee.sunchenbin.mybatis.actable.manager.*&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisTableConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.mysql1.driver-class-name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.mysql1.jdbc-url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.mysql1.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.datasource.druid.mysql1.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DruidDataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setMaxActive(<span class="number">30</span>);</span><br><span class="line">        dataSource.setInitialSize(<span class="number">10</span>);</span><br><span class="line">        dataSource.setValidationQuery(<span class="string">&quot;SELECT 1&quot;</span>);</span><br><span class="line">        dataSource.setTestOnBorrow(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">dataSourceTransactionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource());</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource());</span><br><span class="line">        <span class="type">PathMatchingResourcePatternResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathMatchingResourcePatternResolver</span>();</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(resolver.getResources(<span class="string">&quot;classpath*:com/gitee/sunchenbin/mybatis/actable/mapping/*/*.xml&quot;</span>));</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(<span class="string">&quot;com.lhh.bean.*&quot;</span>);  <span class="comment">//修改成本地地址</span></span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bean下新增</p><p>Test.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.command.BaseModel;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一种定义方式，使用<span class="doctag">@Table</span>和<span class="doctag">@Column</span>方式定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table(name = &quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> <span class="keyword">extends</span> <span class="title class_">BaseModel</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;id&quot;,type = MySqlTypeConstant.INT,length = 11,isKey = true,isAutoIncrement = true)</span></span><br><span class="line"><span class="keyword">private</span> Integerid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;name&quot;,type = MySqlTypeConstant.VARCHAR, length = 45, defaultValue = &quot;hello&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Stringname;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;type&quot;,type = MySqlTypeConstant.VARCHAR,length = 45)</span></span><br><span class="line"><span class="keyword">private</span> Stringtype;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;description&quot;,type = MySqlTypeConstant.TEXT)</span></span><br><span class="line"><span class="keyword">private</span> Stringdescription;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;create_time&quot;,type = MySqlTypeConstant.DATETIME)</span></span><br><span class="line"><span class="keyword">private</span> Datecreate_time;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;update_time&quot;,type = MySqlTypeConstant.DATETIME)</span></span><br><span class="line"><span class="keyword">private</span> Dateupdate_time;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;number&quot;,type = MySqlTypeConstant.BIGINT,length = 5)</span></span><br><span class="line"><span class="keyword">private</span> Longnumber;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;lifecycle&quot;,type = MySqlTypeConstant.CHAR,length = 1)</span></span><br><span class="line"><span class="keyword">private</span> Stringlifecycle;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;dekes&quot;,type = MySqlTypeConstant.DOUBLE,length = 5,decimalLength = 2)</span></span><br><span class="line"><span class="keyword">private</span> Doubledekes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getCreate_time</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> create_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreate_time</span><span class="params">(Date create_time)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.create_time = create_time;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Date <span class="title function_">getUpdate_time</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> update_time;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdate_time</span><span class="params">(Date update_time)</span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.update_time = update_time;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getDescription</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDescription</span><span class="params">(String description)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.description = description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">getNumber</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumber</span><span class="params">(Long number)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.number = number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getLifecycle</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> lifecycle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLifecycle</span><span class="params">(String lifecycle)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.lifecycle = lifecycle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">getDekes</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> dekes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDekes</span><span class="params">(Double dekes)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.dekes = dekes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者Test1.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Column;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.ColumnType;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.IsAutoIncrement;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.annotation.Table;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.command.BaseModel;</span><br><span class="line"><span class="keyword">import</span> com.gitee.sunchenbin.mybatis.actable.constants.MySqlTypeConstant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.Id;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二种定义方式，使用<span class="doctag">@Table</span>和<span class="doctag">@Column</span>定义字段，具体内容用具体注解定义</span></span><br><span class="line"><span class="comment"> * 例如<span class="doctag">@Id</span>，<span class="doctag">@IsNotNull</span>，<span class="doctag">@isAutoIncrement</span>等等</span></span><br><span class="line"><span class="comment"> * 如果没有设置name，会直接把变量名按照驼峰规则转换，如果没有设置类型也会自动转换Java的类型到SQL类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Table(name = &quot;test1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> <span class="keyword">extends</span> <span class="title class_">BaseModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@IsAutoIncrement</span></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Integerid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="meta">@ColumnType(value = MySqlTypeConstant.VARCHAR, length = 455)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> Date time;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTime</span><span class="params">(Date time)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.time = time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时基本都已经配置好了，然后配置对应的application.yml即可</p><p><a href="https://gitee.com/liuhuanhuan963019/springboot_mybatis_auto_create_table.git">参考源码地址</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进度条实现</title>
      <link href="/archives/13121.html"/>
      <url>/archives/13121.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h3><p>在Python项目中，有时需要输出程序的运行进度，会print出【1/100】【50/100】等简单的字符串，殊不知Python有一些超级好用的第三方库，几行代码就可以实现进度条显示，本文介绍两个常用的进度条库：<strong>tqdm</strong>和<strong>progressbar</strong>。</p><span id="more"></span><h3 id="2-tqdm"><a href="#2-tqdm" class="headerlink" title="2.tqdm"></a>2.tqdm</h3><p>安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install tqdm</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">from tqdm import tqdm</span><br><span class="line"></span><br><span class="line">for i in tqdm(range(100)):</span><br><span class="line">    time.sleep(0.1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvhhixyx4ng60oh016t9m02.gif" alt="img"></p><p>tqdm参数设置</p><ul><li>desc：进度条标题</li><li>total：迭代总次数</li><li>ncols：进度条总长度</li><li>ascii：使用ASCII字符串作为进度条主体</li><li>bar_format：自定义字符串格式化输出</li><li>mininterval：最小更新间隔，单位：秒</li><li>maxinterval：最大更新间隔，单位：秒</li><li>postfix：以字典形式传入</li></ul><p>tqdm自定义参数的代码实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">100</span>), desc=<span class="string">&#x27;Progress&#x27;</span>, ncols=<span class="number">100</span>, <span class="built_in">ascii</span>=<span class="string">&#x27; =&#x27;</span>, bar_format=<span class="string">&#x27;&#123;l_bar&#125;&#123;bar&#125;|&#x27;</span>):</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvhhk1x7l7g60vm016jru02.gif" alt="tqdm2"></p><h3 id="3-progressbar"><a href="#3-progressbar" class="headerlink" title="3.progressbar"></a>3.progressbar</h3><p>安装</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install progressbar</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> progressbar <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">progress = ProgressBar()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> progress(<span class="built_in">range</span>(<span class="number">100</span>)):</span><br><span class="line">    time.sleep(<span class="number">0.05</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvhhkzolzfg60vq05gjxj02.gif" alt="progressbar1"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac查看进程命令</title>
      <link href="/archives/20294.html"/>
      <url>/archives/20294.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-查看进程号"><a href="#1-查看进程号" class="headerlink" title="1.查看进程号"></a>1.查看进程号</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep 进程名</span><br></pre></td></tr></table></figure><span id="more"></span><p>demo：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">liuhuanhuan@bogon ~ % ps -ef | grep 3306</span><br><span class="line">  501 99050 57804   0  9:14下午 ttys000    0:00.00 grep 3306</span><br></pre></td></tr></table></figure><h4 id="2、查看端口被哪个进程监听"><a href="#2、查看端口被哪个进程监听" class="headerlink" title="2、查看端口被哪个进程监听"></a>2、查看端口被哪个进程监听</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo lsof -i:8080</span><br></pre></td></tr></table></figure><p>此时必须要输入<code>sudo</code>，不然无法正常显示</p><h4 id="3-查看进程监听的端口"><a href="#3-查看进程监听的端口" class="headerlink" title="3.查看进程监听的端口"></a>3.查看进程监听的端口</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo lsof -nP | grep LISTEN | grep 3306</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqld      129                 _mysql   29u     IPv6 0x7262f1f44e03ce3d        0t0                 TCP *:33060 (LISTEN)</span><br><span class="line">mysqld      129                 _mysql   31u     IPv6 0x7262f1f44e03dafd        0t0                 TCP *:3306 (LISTEN)</span><br></pre></td></tr></table></figure><h4 id="4-查看进程"><a href="#4-查看进程" class="headerlink" title="4.查看进程"></a>4.查看进程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo lsof -i tcp:port</span><br><span class="line">如：sudo lsof -i tcp:8080</span><br></pre></td></tr></table></figure><p>显示结果</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">liuhuanhuan@liuhuanhuandeMacBook-Pro bin % sudo lsof -i tcp:8080</span><br><span class="line">COMMAND  PID        USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    3085 liuhuanhuan   54u  IPv6 0x7262f1f46d2a67dd      0t0  TCP *:http-alt (LISTEN)</span><br></pre></td></tr></table></figure><h4 id="5-杀死进程的方式"><a href="#5-杀死进程的方式" class="headerlink" title="5.杀死进程的方式"></a>5.杀死进程的方式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo kill -9 PID</span><br><span class="line">如：sudo kill -9 750</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【java强化】java对list进行指定排序</title>
      <link href="/archives/31020.html"/>
      <url>/archives/31020.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-java传统表示方式"><a href="#1-java传统表示方式" class="headerlink" title="1.java传统表示方式"></a>1.java传统表示方式</h3><h4 id="1-1-对List进行排序"><a href="#1-1-对List进行排序" class="headerlink" title="1.1 对List进行排序"></a>1.1 对List<Integer>进行排序</h4><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">Test1</span><span class="params">()</span> &#123;</span><br><span class="line">      List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">      list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">5</span>));</span><br><span class="line">      list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">13</span>));</span><br><span class="line">      list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>));</span><br><span class="line">      list.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">9</span>));</span><br><span class="line">      Collections.sort(list);</span><br><span class="line">      System.out.println(list.toString());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">13</span>]</span><br></pre></td></tr></table></figure><h4 id="1-2-对对象中指定元素进行排序"><a href="#1-2-对对象中指定元素进行排序" class="headerlink" title="1.2 对对象中指定元素进行排序"></a>1.2 对对象中指定元素进行排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test2</span><span class="params">()</span> &#123;</span><br><span class="line">       List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">       list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lhh&quot;</span>,<span class="number">13</span>));</span><br><span class="line">       list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wcy&quot;</span>,<span class="number">10</span>));</span><br><span class="line">       list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tw&quot;</span>,<span class="number">25</span>));</span><br><span class="line">       Collections.sort(list);</span><br><span class="line">       System.out.println(list.toString());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> String name; <span class="comment">//姓名</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> age; <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.name = name;</span><br><span class="line">           <span class="built_in">this</span>.age = age;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> name;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.name = name;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> age;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.age = age;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                   <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                   <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                   <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//重写Comparable接口的compareTo方法，</span></span><br><span class="line">       <span class="comment">// 根据年龄升序排列，降序修改相减顺序即可</span></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">this</span>.age-o.getAge();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Student&#123;name=<span class="string">&#x27;wcy&#x27;</span>, age=<span class="number">10</span>&#125;, Student&#123;name=<span class="string">&#x27;lhh&#x27;</span>, age=<span class="number">13</span>&#125;, Student&#123;name=<span class="string">&#x27;tw&#x27;</span>, age=<span class="number">25</span>&#125;]</span><br></pre></td></tr></table></figure><h4 id="1-3-通过匿名内部类的方式进行实现"><a href="#1-3-通过匿名内部类的方式进行实现" class="headerlink" title="1.3 通过匿名内部类的方式进行实现"></a>1.3 通过匿名内部类的方式进行实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Test3</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lhh&quot;</span>,<span class="number">13</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wcy&quot;</span>,<span class="number">10</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;tw&quot;</span>,<span class="number">25</span>));</span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> o1.getAge() - o2.getAge();</span><br><span class="line">                <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (diff &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//相等为0</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[Student&#123;name=<span class="string">&#x27;wcy&#x27;</span>, age=<span class="number">10</span>&#125;, Student&#123;name=<span class="string">&#x27;lhh&#x27;</span>, age=<span class="number">13</span>&#125;, Student&#123;name=<span class="string">&#x27;tw&#x27;</span>, age=<span class="number">25</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="2-使用java8新特性"><a href="#2-使用java8新特性" class="headerlink" title="2.使用java8新特性"></a>2.使用java8新特性</h3><p><code>demo1</code>:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambdaTest1</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4</span>,<span class="string">&quot;赵六&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//条件删除</span></span><br><span class="line">        list.removeIf(user -&gt; user.getUserId() == <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------排序前&quot;</span>);</span><br><span class="line">        list.forEach(user -&gt; &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;);</span><br><span class="line">        list.sort((user1,user2)-&gt;user1.getUserId() - user2.getUserId());</span><br><span class="line">        System.out.println(<span class="string">&quot;_-------------------正序排序后&quot;</span>);</span><br><span class="line">        list.forEach(user -&gt; &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------倒序排序后：&quot;</span>);</span><br><span class="line">        list.sort((((o1, o2) -&gt; o2.getUserId() - o1.getUserId())));</span><br><span class="line">        list.forEach(user -&gt; &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer userId;</span><br><span class="line">        <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getUserId</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(Integer userId)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.userId = userId;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(Integer userId, String userName)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.userId = userId;</span><br><span class="line">            <span class="built_in">this</span>.userName = userName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;userId=&quot;</span> + userId +</span><br><span class="line">                    <span class="string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>demo2</code></p><p>对获取到站点的降雨值进行排序. 这个是重要的排序思想，可以参考下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;RadarPre&gt; collect = allStationData.stream().map(stationInfo -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">param1</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">rain</span> <span class="operator">=</span> HttpUtils.sendGet(<span class="string">&quot;x x x x&quot;</span>, param1);</span><br><span class="line">            <span class="type">RadarPre</span> <span class="variable">radarPre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RadarPre</span>();</span><br><span class="line">            radarPre.setRain(Double.valueOf(rain));</span><br><span class="line">            radarPre.setStationId(stationInfo.getStationCode());</span><br><span class="line">            radarPre.setStationName(stationInfo.getStationName());</span><br><span class="line">            radarPre.setLatitude(stationInfo.getLatitude());</span><br><span class="line">            radarPre.setLongitude(stationInfo.getLongitude());</span><br><span class="line">            <span class="keyword">return</span> radarPre;</span><br><span class="line">        &#125;).sorted(Comparator.comparing(RadarPre::getRain).reversed()).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】对字典分别按照key值、value值进行排序</title>
      <link href="/archives/19241.html"/>
      <url>/archives/19241.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-sorted介绍"><a href="#1-sorted介绍" class="headerlink" title="1.sorted介绍"></a>1.sorted介绍</h3><p>sorted(iterable,key,reverse)，sorted一共有iterable，key，reverse这三个参数。</p><p>其中iterable表示可以迭代的对象，例如可以是dict.items()、dict.keys()等，key是一个函数，用来选取参与比较的元素，reverse则是用来指定排序是倒序还是顺序，reverse=true则是倒序（从大到小），reverse=false则是顺序（从小到大），默认是reverse=false。</p><span id="more"></span><h3 id="2-按照ke-y进行排序"><a href="#2-按照ke-y进行排序" class="headerlink" title="2.按照ke y进行排序"></a>2.按照ke y进行排序</h3><p>直接使用sorted函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_dict = &#123;<span class="string">&#x27;money&#x27;</span>: <span class="number">250</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;number&#x27;</span>: <span class="number">12</span>&#125;</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">sorted</span>(my_dict.keys()))  </span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;money&#x27;</span>, <span class="string">&#x27;number&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如果想要反向排序的话，那我们只需要加上一个参数<code>reverse=True</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> my_dict = &#123;<span class="string">&#x27;money&#x27;</span>: <span class="number">250</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">24</span>, <span class="string">&#x27;number&#x27;</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(my_dict.keys(),reverse=<span class="literal">True</span>))  </span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;money&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="3-按照value-进行排序"><a href="#3-按照value-进行排序" class="headerlink" title="3.按照value 进行排序"></a>3.按照value 进行排序</h3><h4 id="3-1-key使用lambda匿名函数取value进行排序"><a href="#3-1-key使用lambda匿名函数取value进行排序" class="headerlink" title="3.1     key使用lambda匿名函数取value进行排序"></a>3.1     key使用lambda匿名函数取value进行排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;lhh&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;yl&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;wcy&#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;yq&#x27;</span>: <span class="number">19</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;yq&#x27;</span>, <span class="number">19</span>), (<span class="string">&#x27;yl&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;lhh&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;wcy&#x27;</span>, <span class="number">32</span>)]</span><br></pre></td></tr></table></figure><p>如果我们需要倒序进行排序的话，我们只需要加上一个参数<code>reverse=True</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;lhh&#x27;</span>: <span class="number">25</span>, <span class="string">&#x27;yl&#x27;</span>: <span class="number">21</span>, <span class="string">&#x27;wcy&#x27;</span>: <span class="number">32</span>, <span class="string">&#x27;yq&#x27;</span>: <span class="number">19</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>]),reverse=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;wcy&#x27;</span>, <span class="number">32</span>), (<span class="string">&#x27;lhh&#x27;</span>, <span class="number">25</span>), (<span class="string">&#x27;yl&#x27;</span>, <span class="number">21</span>), (<span class="string">&#x27;yq&#x27;</span>, <span class="number">19</span>)]</span><br></pre></td></tr></table></figure><h4 id="3-2-使用operator的itemgetter进行排序"><a href="#3-2-使用operator的itemgetter进行排序" class="headerlink" title="3.2 使用operator的itemgetter进行排序"></a>3.2 使用operator的itemgetter进行排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">sorted</span>(d.items(), key=operator.itemgetter(<span class="number">1</span>)))   </span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#[(&#x27;yq&#x27;, 19), (&#x27;yl&#x27;, 21), (&#x27;lhh&#x27;, 25), (&#x27;wcy&#x27;, 32)]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-使用zip函数将map分成2个元祖再进行排序"><a href="#3-3-使用zip函数将map分成2个元祖再进行排序" class="headerlink" title="3.3 使用zip函数将map分成2个元祖再进行排序"></a>3.3 使用zip函数将map分成2个元祖再进行排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">zip</span>(my_dict.keys(),my_dict.values())</span><br><span class="line">    c = <span class="built_in">sorted</span>(f)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;number&#x27;</span>, <span class="number">12</span>), (<span class="string">&#x27;money&#x27;</span>, <span class="number">250</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="number">24</span>)]</span><br></pre></td></tr></table></figure><h3 id="4-取出排序的前n个value值和key值"><a href="#4-取出排序的前n个value值和key值" class="headerlink" title="4.取出排序的前n个value值和key值"></a>4.取出排序的前n个value值和key值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 排序</span></span><br><span class="line">    test_sort = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(test.items(), key=<span class="keyword">lambda</span> e: e[<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(test_sort)</span><br><span class="line">    <span class="comment"># 取出前几个， 也可以在sorted返回的list中取前几个</span></span><br><span class="line">    required_cnt = <span class="number">3</span></span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> test_sort.items():</span><br><span class="line">        cnt += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> cnt &gt; required_cnt:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(key, value))</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;key2&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;key3&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;key1&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;key4&#x27;</span>: <span class="number">21</span>&#125;</span><br><span class="line">key2:<span class="number">10</span></span><br><span class="line">key3:<span class="number">15</span></span><br><span class="line">key1:<span class="number">20</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【java8】java新特性Map按照指定进行排序</title>
      <link href="/archives/53030.html"/>
      <url>/archives/53030.html</url>
      
        <content type="html"><![CDATA[<p>直接上代码</p><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.apply;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.ImmutableMap;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SortByValue</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String, Integer&gt; map = ImmutableMap.of(<span class="string">&quot;0&quot;</span>, <span class="number">3</span>, <span class="string">&quot;1&quot;</span>, <span class="number">8</span>, <span class="string">&quot;0.29&quot;</span>, <span class="number">7</span>, <span class="string">&quot;1.67&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;原始的map：&quot;</span> + map);</span><br><span class="line">        System.out.println(<span class="string">&quot;根据map的key降序：&quot;</span> + sortByKey(map, <span class="literal">true</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;根据map的key升序：&quot;</span> + sortByKey(map, <span class="literal">false</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;根据map的value降序：&quot;</span> + sortByValue(map, <span class="literal">true</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;根据map的value升序：&quot;</span> + sortByValue(map, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据map的key排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 待排序的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isDesc 是否降序，true：降序，false：升序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序好的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> K&gt;, V&gt; Map&lt;K, V&gt; <span class="title function_">sortByKey</span><span class="params">(Map&lt;K, V&gt; map, <span class="type">boolean</span> isDesc)</span> &#123;</span><br><span class="line">        Map&lt;K, V&gt; result = Maps.newLinkedHashMap();</span><br><span class="line">        <span class="keyword">if</span> (isDesc) &#123;</span><br><span class="line">            map.entrySet().stream().sorted(Map.Entry.&lt;K, V&gt;comparingByKey().reversed())</span><br><span class="line">                    .forEachOrdered(e -&gt; result.put(e.getKey(), e.getValue()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.entrySet().stream().sorted(Map.Entry.&lt;K, V&gt;comparingByKey())</span><br><span class="line">                    .forEachOrdered(e -&gt; result.put(e.getKey(), e.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据map的value排序</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 待排序的map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isDesc 是否降序，true：降序，false：升序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序好的map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> V&gt;&gt; Map&lt;K, V&gt; <span class="title function_">sortByValue</span><span class="params">(Map&lt;K, V&gt; map, <span class="type">boolean</span> isDesc)</span> &#123;</span><br><span class="line">        Map&lt;K, V&gt; result = Maps.newLinkedHashMap();</span><br><span class="line">        <span class="keyword">if</span> (isDesc) &#123;</span><br><span class="line">            map.entrySet().stream().sorted(Map.Entry.&lt;K, V&gt;comparingByValue().reversed())</span><br><span class="line">                    .forEach(e -&gt; result.put(e.getKey(), e.getValue()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.entrySet().stream().sorted(Map.Entry.&lt;K, V&gt;comparingByValue())</span><br><span class="line">                    .forEachOrdered(e -&gt; result.put(e.getKey(), e.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">21.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java字符串与list相互转换</title>
      <link href="/archives/59388.html"/>
      <url>/archives/59388.html</url>
      
        <content type="html"><![CDATA[<p>直接上代码</p><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrToList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        String str= <span class="string">&quot;1,2,3,4,56&quot;</span>;</span><br><span class="line">        <span class="comment">// string 转list</span></span><br><span class="line">        List&lt;String&gt; list  = Arrays.asList(str.split(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">        <span class="comment">//print:[1, 2, 3, 4, 56]</span></span><br><span class="line">        list.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list转为string</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">collect</span> <span class="operator">=</span> list.stream().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">        <span class="comment">// print:1,2,3,4,56</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理【Windows版】</title>
      <link href="/archives/35769.html"/>
      <url>/archives/35769.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。</p><span id="more"></span><h3 id="2-下载"><a href="#2-下载" class="headerlink" title="2.下载"></a>2.下载</h3><p>下载地址：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvcluiw814j61dl0kon2002.jpg" alt="image-20211012162538669"></p><p>这个版本可以自己任意选择</p><h3 id="3-解压安装"><a href="#3-解压安装" class="headerlink" title="3.解压安装"></a>3.解压安装</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvclyyikilj60q50a63z402.jpg" alt="image-20211012162954350"></p><h3 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4.启动服务"></a>4.启动服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx-1.20.1</span><br><span class="line">start nginx</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvcm4yhm6qj61qs0dw40t02.jpg" alt="image-20211012163540303"></p><p>出现如上命令表示安装成功。。。。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvcm5zbys6j60o8082aau02.jpg" alt="image-20211012163639283"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tasklist /fi &quot;imagename eq nginx.exe&quot;</span><br></pre></td></tr></table></figure><p>如上命令查看所占进程</p><h3 id="5-修改端口号"><a href="#5-修改端口号" class="headerlink" title="5.修改端口号"></a>5.修改端口号</h3><p>如果端口被占用了，我们可以选择我们未被占用的端口</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvcm82hcahj60ry0l7wgy02.jpg" alt="image-20211012163839735"></p><h3 id="6-常见的nginx使用命令"><a href="#6-常见的nginx使用命令" class="headerlink" title="6.常见的nginx使用命令"></a>6.常见的nginx使用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s stop  终止进程</span><br><span class="line">nginx -s quit 推出</span><br><span class="line">nginx -s reload重新加载</span><br><span class="line">nginx -s reopen重现打开</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理【Max版】</title>
      <link href="/archives/12862.html"/>
      <url>/archives/12862.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装（Macos可以使用brew来安装）"><a href="#1-安装（Macos可以使用brew来安装）" class="headerlink" title="1.安装（Macos可以使用brew来安装）"></a>1.安装（Macos可以使用brew来安装）</h3><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><p>安装时间可能较长，稍微等待片刻。。。</p><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvck1xc414j61pe0su7ca02.jpg" alt="image-20211012152330364"></p><p>出现如上即表示安装成功</p><h3 id="2-查看版本"><a href="#2-查看版本" class="headerlink" title="2.查看版本"></a>2.查看版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvckeu763hj60gv01jmx302.jpg" alt="image-20211012153557982"></p><p>出现如上提示表示安装成功了。。。</p><h3 id="3-启动ngin-x"><a href="#3-启动ngin-x" class="headerlink" title="3.启动ngin x"></a>3.启动ngin x</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>也可以使用下面的命令启动，但是配置文件nginx.conf修改后用这个命令执行可能并不生效，所以不建议使用：</p><h3 id="4-查看nginx是否启动成功"><a href="#4-查看nginx是否启动成功" class="headerlink" title="4.查看nginx是否启动成功"></a>4.查看nginx是否启动成功</h3><p>在浏览器中访问<a href="http://localhost:8080/,出现如下页面表示启动成功">http://localhost:8080/,出现如下页面表示启动成功</a>:</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvckt3s1cjj61l60aa0u102.jpg" alt="image-20211012154940986"></p><p><code>注意</code>：端口号是在配置文件nginx.conf里面配置的，默认端口是8080,配置文件的位置是在<code>/usr/local/etc/nginx</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gvckx376x7j60sy04p3z902.jpg" alt="image-20211012155330882"></p><h3 id="5-关闭ngin-x"><a href="#5-关闭ngin-x" class="headerlink" title="5.关闭ngin x"></a>5.关闭ngin x</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><h3 id="6-重新加载nginx"><a href="#6-重新加载nginx" class="headerlink" title="6.重新加载nginx"></a>6.重新加载nginx</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="7-可能遇到的问题"><a href="#7-可能遇到的问题" class="headerlink" title="7.可能遇到的问题"></a>7.可能遇到的问题</h3><h4 id="a-端口占用"><a href="#a-端口占用" class="headerlink" title="a.端口占用"></a>a.端口占用</h4><blockquote><p>nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)</p></blockquote><p>修改nginx.conf文件里的端口号即可</p><h3 id="8-brew命令安装"><a href="#8-brew命令安装" class="headerlink" title="8.brew命令安装"></a>8.brew命令安装</h3><p>安装 homebrew ，将以上命令粘贴至terminal，然后回车即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h3 id="9-常用的nginx命令"><a href="#9-常用的nginx命令" class="headerlink" title="9.常用的nginx命令"></a>9.常用的nginx命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -s reload 重新加载配置</span><br><span class="line">nginx -s reopen 重启</span><br><span class="line">nginx -s stop 停止</span><br><span class="line">nginx -s quit 退出</span><br><span class="line">nginx -V 查看版本，以及配置文件地址</span><br><span class="line">nginx -v 查看版本</span><br><span class="line">nginx -c filename 指定配置文件</span><br><span class="line">nginx -h 帮助</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot多模块打包常见问题</title>
      <link href="/archives/32735.html"/>
      <url>/archives/32735.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-The-project-com-nuist-x-x-x-xxx-has-1-error-‘dependencies-dependency-version’-for-com-nuist-xxx-jar-is-missing-line-31-column-21"><a href="#1-The-project-com-nuist-x-x-x-xxx-has-1-error-‘dependencies-dependency-version’-for-com-nuist-xxx-jar-is-missing-line-31-column-21" class="headerlink" title="1.The project com.nuist:x x x:xxx has 1 error  ‘dependencies.dependency.version’ for com.nuist:xxx:jar is missing. @ line 31, column 21"></a>1.The project com.nuist:x x x:xxx has 1 error  ‘dependencies.dependency.version’ for com.nuist:xxx:jar is missing. @ line 31, column 21</h3><p>因为在多模块项目，我们打包需要子模块依赖于父模块，所以我们需要在我们的父模块中导入相应的子模块</p><span id="more"></span><p>在<code>modules</code>中加入我们提示的模块，然后在我们的<code>dependencies.dependency</code>标签中引入我们对应的模块,重新加载即可。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gv9hw0he47j60lo03gjrk02.jpg" alt="image-20211009234850147" style="zoom:50%;" /></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gv9hw4n105j60wk08gjsd02.jpg" alt="image-20211009235022617"></p><h3 id="2-No-compiler-is-provided-in-this-environment-Perhaps-you-are-running-on-a-JRE-rather-than-a-JDK"><a href="#2-No-compiler-is-provided-in-this-environment-Perhaps-you-are-running-on-a-JRE-rather-than-a-JDK" class="headerlink" title="2.No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?"></a>2.No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?</h3><p>这个错误的话比较好解决，是由于你项目所需jdk版本和你当前使用的jdk版本不一致导致的，因为我项目的pom.xml中定义了java版本为1.8，但是我实际idea中run这个项目却是1.7</p><p>更换当前jdk版本为项目所需jdk版本即可</p><p>操作步骤：<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gv9i0ffbjlj61j00tktee02.jpg" alt="image-20211009235603878"></p><p>选中项目右击 -&gt;F4键设置项目属性进入</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gv9i18f1qkj61b20emdiq02.jpg" alt="image-20211009235659674"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gv9i1eeaowj61920ekad702.jpg" alt="image-20211009235709950"></p><p>版本均需要一致。此时我们确认之后，还是会出现这个样的问题，我们检查发现，父pom中没有问题，子pom也没有问题，此时我们会看到第三个错误</p><h3 id="3-After-correcting-the-problems-you-can-resume-the-build-with-the-command"><a href="#3-After-correcting-the-problems-you-can-resume-the-build-with-the-command" class="headerlink" title="3. After correcting the problems, you can resume the build with the command"></a>3. After correcting the problems, you can resume the build with the command</h3><p>  mvn <args> -rf :framework</p><p>遇到这个错误，代表我们的版本定义重复啦，我们父pom中已经定义了j d k 版本，但是在我们子模块中又重新定义，所以提示我们mvn -rf：framework.我们只需要删除对应子模块中的指定的java版本即可，删除之后，打包成功。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gv9i65ffflj61ba0a476d02.jpg" alt="image-20211010000143777"></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Mac 拯救你未正确插拔的机械硬盘</title>
      <link href="/archives/62670.html"/>
      <url>/archives/62670.html</url>
      
        <content type="html"><![CDATA[<h2 id="移动硬盘由于错误插拔而导致Mac无法识别的简单急救，修复"><a href="#移动硬盘由于错误插拔而导致Mac无法识别的简单急救，修复" class="headerlink" title="移动硬盘由于错误插拔而导致Mac无法识别的简单急救，修复"></a>移动硬盘由于错误插拔而导致Mac无法识别的简单急救，修复</h2><p>我们在使用移动硬盘的时候由于疏忽或不良习惯习惯，没有正确的推出硬盘,而<strong>导致「磁盘没有正确推出」</strong>。</p><span id="more"></span><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gukohahvhuj6126072wf202.jpg" alt="image-20210918124051868"></p><p>我在使用过程中，发现u盘，SSD（移动固态硬盘）均不会由于「未正常推出」而再次插拔后无法识别。如果你由于「未正常推出」，导致插拔后<strong>Mac系统无法识别，且Windows下识别正常</strong>    </p><p>我们可以通过下面几步，来恢复查看。</p><ol><li><p>有条件在Windows下将数据导出，格式化修复磁盘。由于移动硬盘数据量较大，有时候难以导出，这个方式只适用于一些比较简单的。</p></li><li><p>首先插入自己的硬盘，然后找到mac的磁盘工具<img src="https://tva1.sinaimg.cn/large/008i3skNgy1gukojnvmzjj61g20u07av02.jpg" alt="image-20210918124310735"></p></li><li><p>打开磁盘工具，发现自己的磁盘分区在卸载状态；点击无法成功装载。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gukokmwdtuj621c0jwabp02.jpg" alt="image-20210918124407240"></p></li><li><p>打开<code>终端</code>，输入<code>diskutil list</code>查看自己宗卷名字 </p><p>p.s.这一步不起作用，就是确认一下磁盘是不是能被识别到。</p></li><li><p>输入：<code>ps aux | grep fsck</code>回车</p></li><li><p>输入：<code>sudo pkill -f fsck</code>回车 </p></li><li><p>输入密码（密码输入时不可见，输完按回车）</p></li><li><p>这时候你会欣喜的发现硬盘读出来了，但不要开心的太早，这时候你的硬盘是「只读」的。（如果你第一步没有Windows的电脑，在这一步将重要数据导出来也是OK的）</p></li><li><p>再次打开磁盘工具，发现分区是可被选择的状态了，点击上方的急救，开始运行（桌面上的图标会消失）。</p></li><li><p>等急救运行成功（如果未成功就再运行一次试试，或者拔掉从步骤3再开始，但我没有遇到过失败），图标则会重新出现在桌面上，且「写入正常」了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains 学生免费认证和到期续费</title>
      <link href="/archives/55708.html"/>
      <url>/archives/55708.html</url>
      
        <content type="html"><![CDATA[<h1 id="JetBrains学生认证和续费"><a href="#JetBrains学生认证和续费" class="headerlink" title="JetBrains学生认证和续费"></a>JetBrains学生认证和续费</h1><h2 id="一、学生认证"><a href="#一、学生认证" class="headerlink" title="一、学生认证"></a>一、学生认证</h2><p>1.认证地址：<a href="https://www.jetbrains.com/zh-cn/community/education/#students">https://www.jetbrains.com/zh-cn/community/education/#students</a></p><p>2.首先我们是作为高校的老师或者学生可以免费申请，其次我们需要需要学校提供的<code>教育邮箱</code>，一般都是<code>edu.cn</code>结尾的邮箱,如果没有的话，可以向学校申请，一般都是给予通过，这个邮箱也可以用过<code>office365</code>验证</p><p>3.在认证地址申请完之后，回发送一个验证到自己的注册的教育邮箱当中，然后去教育邮箱中点击对应链接，即可成功使用</p><span id="more"></span><h2 id="二、认证续费"><a href="#二、认证续费" class="headerlink" title="二、认证续费"></a>二、认证续费</h2><p>一般情况下在我们在校期内，我们都可以免费使用，每次我们可以申请一年，当我们到期后，我们回看到提示</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gud60btwcuj60fa03wwel02.jpg" alt="img"></p><p>此时我们点击<code>Renew License</code>,然后登陆官方账号，出现如下页面，</p><p>页面中会有如下提示<code>Renew my Education Pack</code>,点击之后回发送验证消息到指定教育邮箱，进入邮箱点击认证即可</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gud62urruvj617a0fcdgo02.jpg" alt="image-20210912004518002"></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gud61z2fcjj61lq0ootcl02.jpg" alt="image-20210912004426812"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python快速入门flask</title>
      <link href="/archives/54258.html"/>
      <url>/archives/54258.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Flask 是一个使用 Python 编写的轻量级 Web 应用程序框架。Armin Ronacher带领一个名为Pocco的国际Python爱好者团队开发了Flask。</p><span id="more"></span><h2 id="二、简单使用"><a href="#二、简单使用" class="headerlink" title="二、简单使用"></a>二、简单使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install flask</span><br></pre></td></tr></table></figure><p>先安装对应的包</p><p>我们先写个简单的demo，然后来测试下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>然后我们右击运行，出现如下即表示运行成功</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">* Serving Flask app <span class="string">&#x27;test&#x27;</span> (lazy loading)</span><br><span class="line">* Environment: production</span><br><span class="line">  WARNING: This <span class="keyword">is</span> a development server. Do <span class="keyword">not</span> use it <span class="keyword">in</span> a production deployment.</span><br><span class="line">  Use a production WSGI server instead.</span><br><span class="line">* Debug mode: off</span><br><span class="line">* Running on http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>然后我们在浏览器中输入地址，可以看到</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/flask01.png" alt="image-20210804010736863"></p><h2 id="三、无参传入"><a href="#三、无参传入" class="headerlink" title="三、无参传入"></a>三、无参传入</h2><p>此时我们是传入的无参方式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)   <span class="comment">#创建一个服务，赋值给APP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index&quot;</span></span>)   </span><span class="comment"># api接口 #指定接口访问的路径，支持什么请求方式get，post</span></span><br><span class="line"><span class="comment">#讲的是封装成一种静态的接口，无任何参数传入</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():  <span class="comment">#-----这里的函数名称可以任意取</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>   <span class="comment"># 返回数据</span></span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p>我们可以指定固定的<code>host</code>和<code>port</code>,如下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"> </span><br><span class="line">app = Flask(__name__)   <span class="comment">#创建一个服务，赋值给APP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index&quot;</span></span>)   </span><span class="comment"># api接口 #指定接口访问的路径，支持什么请求方式get，post</span></span><br><span class="line"><span class="comment">#讲的是封装成一种静态的接口，无任何参数传入</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():  <span class="comment">#-----这里的函数名称可以任意取</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>   <span class="comment"># 返回数据</span></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="四、有参传入"><a href="#四、有参传入" class="headerlink" title="四、有参传入"></a>四、有参传入</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)   <span class="comment">#创建一个服务，赋值给APP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index&quot;</span>,methods=[<span class="string">&#x27;post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():  <span class="comment">#-----这里的函数名称可以任意取</span></span><br><span class="line">    name = request.form.get(<span class="string">&#x27;name&#x27;</span>)  <span class="comment">#获取接口请求中form-data的username参数传入的值</span></span><br><span class="line">    <span class="keyword">return</span> name   <span class="comment"># 返回数据</span></span><br><span class="line"></span><br><span class="line">app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>,port=<span class="number">8000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>获取传递参数的几种方式：</p><blockquote><p>request请求总体分为两类：</p><p>1.get请求 </p><p>访问时会在地址栏直接显示参数不安全，且参数大小比较小。</p><p>2.post请求 </p><p>参数不显示在地址栏，一般用户注册、登录都通过post请求完成。</p></blockquote><p>request.form.get(“key”, type=str, default=None) 获取表单数据，</p><p>request.args.get(“key”)    获取get请求参数，</p><p>request.values.get(“key”) 获取所有参数。</p><p><strong>推荐使用request.values.get().</strong></p><p>地址栏中传递参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/index/&lt;name&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line">app.run()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/flask02.png" alt="image-20210804012303699"></p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-七-yilia添加字数统计和阅读时长</title>
      <link href="/archives/18156.html"/>
      <url>/archives/18156.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装插件"><a href="#一、安装插件" class="headerlink" title="一、安装插件"></a>一、安装插件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i –save hexo-wordcount</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="二、文件配置"><a href="#二、文件配置" class="headerlink" title="二、文件配置"></a>二、文件配置</h2><p>在<code>theme\yilia\layout\_partial\post</code>下创建<code>word.ejs</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div style=&quot;margin-top:10px;&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;post-time&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class=&quot;post-meta-item-text&quot;&gt;  字数统计: &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;post-count&quot;&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;span class=&quot;post-time&quot;&gt;</span><br><span class="line">      &amp;nbsp; | &amp;nbsp;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;fa fa-hourglass-half&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;span class=&quot;post-meta-item-text&quot;&gt;  阅读时长: &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;post-count&quot;&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后在 <code>themes/yilia/layout/_partial/article.ejs</code>中添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;article-inner&quot;&gt;</span><br><span class="line">    &lt;% if (post.link || post.title)&#123; %&gt;</span><br><span class="line">      &lt;header class=&quot;article-header&quot;&gt;</span><br><span class="line">        &lt;%- partial(&#x27;post/title&#x27;, &#123;class_name: &#x27;article-title&#x27;&#125;) %&gt;</span><br><span class="line">        &lt;% if (!post.noDate)&#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#x27;post/date&#x27;, &#123;class_name: &#x27;archive-article-date&#x27;, date_format: null&#125;) %&gt;</span><br><span class="line">        &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)&#123;%&gt;</span><br><span class="line">          &lt;%- partial(&#x27;post/word&#x27;) %&gt;</span><br><span class="line">          &lt;% &#125; %&gt;</span><br><span class="line">        &lt;!-- 添加完成 --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line">      &lt;/header&gt;</span><br></pre></td></tr></table></figure><h2 id="三、权限开启"><a href="#三、权限开启" class="headerlink" title="三、权限开启"></a>三、权限开启</h2><p>在主题文件下的<code>_config.yml</code>中修改如下代码：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">word_count:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  # </span><span class="language-bash">只在文章详情显示(不在首页显示)</span></span><br><span class="line">  only_article_visit: true</span><br></pre></td></tr></table></figure><p>最后即可看到字数啦。</p><p>实际效果：<a href="https://liuhuanhuan963019.github.io">liuhuanhuan963019.github.io</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【小白】 常用Linux命令汇总</title>
      <link href="/archives/17450.html"/>
      <url>/archives/17450.html</url>
      
        <content type="html"><![CDATA[<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--help    命令说明`</span><br><span class="line">pwd       查看当前所在位置`</span><br><span class="line">tab       补全代码（特殊情况按两次）`</span><br><span class="line">曾经使用的命令可以上下按键来切换`</span><br><span class="line">`输入来不像执行的命令可以使用ctrl+c取消或者ctrl+u将输入的内容删除</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="l-s查看目录文件"><a href="#l-s查看目录文件" class="headerlink" title="l s查看目录文件"></a>l s查看目录文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a 显示隐藏文件。</span><br><span class="line"></span><br><span class="line">-l 以列表的形式显示</span><br><span class="line"></span><br><span class="line">-h 以人性化的方式显示文件的大小</span><br><span class="line"></span><br><span class="line">-R  递归显示子目录</span><br><span class="line"></span><br><span class="line">ls -lR | grep bcd</span><br></pre></td></tr></table></figure><h5 id="cd-切换工作目录"><a href="#cd-切换工作目录" class="headerlink" title="cd 切换工作目录"></a>cd 切换工作目录</h5><p>​    绝对路径和相对路径：</p><p>​        绝对路径：指的是在输入路径的时候，最前面是/或者～表示从根目录/home目录开始的具体的目录位置</p><p>​        相对路径：指的是以当前目录开始，不以/或者～开头，表示不是以根目录或者home目录开始的目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd  切换到指定路径</span><br><span class="line"></span><br><span class="line">cd .  切换到当前目录</span><br><span class="line"></span><br><span class="line">Cd ..切换到上级目录</span><br><span class="line"></span><br><span class="line">Cd ~切换到home目录</span><br><span class="line"></span><br><span class="line">cd -  与上一次工作目录相互换</span><br></pre></td></tr></table></figure><h5 id="touch新建文件命令："><a href="#touch新建文件命令：" class="headerlink" title="touch新建文件命令："></a>touch新建文件命令：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`touch 文件名称`</span><br></pre></td></tr></table></figure><p>​    <img src="https://img-blog.csdnimg.cn/img_convert/0155a70da6bacff5b1bfb8a2a35739d2.png" alt="image-20201006023517134"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`touch  文件名称 文件名</span><br></pre></td></tr></table></figure><p>`</p><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjf36xnubfj31uw07eacj.jpg" alt="image-20201006023905517" style="zoom:50%;" /></p><h5 id="mkdir新建目录："><a href="#mkdir新建目录：" class="headerlink" title="mkdir新建目录："></a>mkdir新建目录：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`-p 递归调用`</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">`mkdir 文件名`</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p a/b/c</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmdir只能删除空目录，不能删除非空目录</span><br></pre></td></tr></table></figure><h5 id="rm-删除文件或目录"><a href="#rm-删除文件或目录" class="headerlink" title="rm. 删除文件或目录"></a>rm. 删除文件或目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-r   递归地删除目录下的文件，删除文件夹时必须加此参数</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-f. 强制删除，忽略不存在的文件，无需提示</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf filename.  删除文件名称</span><br></pre></td></tr></table></figure><h5 id="mv移动和重命名"><a href="#mv移动和重命名" class="headerlink" title="mv移动和重命名"></a>mv移动和重命名</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-f. 覆盖前不询问</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-i 覆盖前询问</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-n.不覆盖已经存在的文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv 命令在同一个文件夹下移动文件，即重命名功能</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjf36ny028j310k0dqdlx.jpg" alt="image-20201006025729725" style="zoom:50%;" /></p><h5 id="Cp复制"><a href="#Cp复制" class="headerlink" title="Cp复制"></a>Cp复制</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-i  覆盖前提示</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-r 若给出的源文件是目录文件，则cp将递归复制该目录下的所有子目录和文件，目标文件必须为以一个目录名</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/d79db3a493a7704bbc2519a29f9097e3.png" alt="image-20201006025650259"></p><h5 id="cat查看文件内容、合并文件"><a href="#cat查看文件内容、合并文件" class="headerlink" title="cat查看文件内容、合并文件"></a>cat查看文件内容、合并文件</h5><p>​    </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-n  输出行编号</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-s  不输出多行空行</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-b. 对非空行进行编号</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat filename.   查看文件的内容</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat. File1  file2. &gt; file1.    将file1 和file2的文件合并写入到file1中</span><br></pre></td></tr></table></figure><h5 id="more-查看文件内容（分页查看）"><a href="#more-查看文件内容（分页查看）" class="headerlink" title="more  查看文件内容（分页查看）"></a>more  查看文件内容（分页查看）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">more filename   查看filename文件到内容快捷键。                   功能说明空格键   显示下一屏Enter键一次滚动一行b回滚一屏f前滚一屏q退出</span><br></pre></td></tr></table></figure><h5 id="history查看历史命令"><a href="#history查看历史命令" class="headerlink" title="history查看历史命令"></a>history查看历史命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history      查看历史命令</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history -c   删除历史命令记录</span><br></pre></td></tr></table></figure><h5 id="sudo获得root权限"><a href="#sudo获得root权限" class="headerlink" title="sudo获得root权限"></a>sudo获得root权限</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Linux 默认不能以root账号登陆，可以用sudo 获得权限</span><br></pre></td></tr></table></figure><h5 id="linux三种权限"><a href="#linux三种权限" class="headerlink" title="linux三种权限"></a>linux三种权限</h5><p>​    <img src="https://img-blog.csdnimg.cn/img_convert/ffcd7d0a115605885ea3707da0ae9fc6.png" alt="image-20201006031247263"></p><p>​    </p><h5 id="创建用户："><a href="#创建用户：" class="headerlink" title="创建用户："></a>创建用户：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd.   【用户名】</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-d   指定新账户的主目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-g   指定用户的所属组</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-G  指定用户附加组</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-s. 指定用户登陆</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-m. 自动创建home目录</span><br></pre></td></tr></table></figure><h5 id="删除用户："><a href="#删除用户：" class="headerlink" title="删除用户："></a>删除用户：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel. [用户组]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-r 删除用户的同时删除home目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root  切换到root账号下whoami  查看当前登陆的账号</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/3ee7abb54bd11c404569589b582f3b94.png" alt="image-20201006032300031"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd test1   创建用户cat  /etc/passwd    /etc/passwd存放了用户的信息</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/11a2993706f63e8d030a57b4838f73e1.png" alt="image-20201006032525488"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/84deb341acc433bbc187a8e41a1893f9.png" alt="image-20201006032633108"></p><p>此时未成功的创建好test用户</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -m test1   即可成功的创建用户  在/home目录下可看到该文件夹</span><br></pre></td></tr></table></figure><p>修改用户的密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd test1    新的下面输出新密码即可创建成功</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjf35snff3j31ws0cqdik.jpg" alt="image-20201006033226666" style="zoom:50%;" /></p><p>切换用户切换到对应的home目录下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3c0595ecde5bf960bba6b9956cc25dab.png" alt="image-20201006033443851"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel test2   只会去删除用户。不会删除用户对应的home目录userdel -r test2  不仅去删除用户。也会删除用户对应的home目录</span><br></pre></td></tr></table></figure><h5 id="修改用户账号属性："><a href="#修改用户账号属性：" class="headerlink" title="修改用户账号属性："></a>修改用户账号属性：</h5><p>​    usermod:    </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-u 用户id-g 所属家属组-a -G GID  不实用-a会覆盖之前的附加组-d -m 将home目录位置移动到新位置-s 该用户账号的新登陆-l 新的登陆名称</span><br></pre></td></tr></table></figure><h5 id="用户组管理："><a href="#用户组管理：" class="headerlink" title="用户组管理："></a>用户组管理：</h5><h6 id="创建用户组："><a href="#创建用户组：" class="headerlink" title="创建用户组："></a>创建用户组：</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupadd</span><br></pre></td></tr></table></figure><h6 id="删除用户组"><a href="#删除用户组" class="headerlink" title="删除用户组"></a>删除用户组</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupdel</span><br></pre></td></tr></table></figure><h6 id="修改组属性"><a href="#修改组属性" class="headerlink" title="修改组属性"></a>修改组属性</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">groupmod-g Gid</span><br></pre></td></tr></table></figure><p>提示：</p><p>​    创建用户时，会默认创建一个与用户名同民的组名</p><p>​    创建成功后可在/e t c/passwd文件下查看</p><p>​    新创建的用户没有sudo权限，需要将用户加到a d m，su do这两个组中才拥有su do权限</p><h5 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h5><p>​    </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod + /-rwx 文件名｜目录名+增加权限,-取消权限</span><br></pre></td></tr></table></figure><p>每个文件都有三组不同的权限，第一组文件所有者，第二组时文件所有组，第三组时其他用户</p><p>第一组：u文件所有者 修改所有者权限 chmod u+/-/ = rwx filename</p><p>第二组：g文件所有组 修改所有组权限 chmod g+/-/ = rwx filename</p><p>第三组：o其他用户 修改所有组权限 chmod o+/-/ = rwx filename</p><p><img src="https://img-blog.csdnimg.cn/img_convert/550c24c6e9bde244b4aeafd58a2dcf27.png" alt="image-20201006152841615"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/54de8b3b52565338c849c254c42d6dc2.png" alt="image-20201006153342388"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/6c837860023f30c92e83dfa3514d72b9.png" alt="image-20201006153447514"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 文件名｜目录名 指定权限修改chmod中第一个数字代表所有者权限，第二个数字代表所属组的权限，第三个数字代表其他人权限r   4w   2x   1</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">4 2 1    7     r w x4 2 0    6     r w -4 0 1    5     r - x4 0 0    4     r - -0 2 1    3     - w x0 2 0    2     - w -0 0 1    1     - - x0 0 0    0     - - -</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/807962e7aacedb1c61f6aaa637290888.png" alt="image-20201006154821717"></p><h5 id="远程管理"><a href="#远程管理" class="headerlink" title="远程管理"></a>远程管理</h5><h6 id="Ifconfig"><a href="#Ifconfig" class="headerlink" title="Ifconfig"></a>Ifconfig</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig     查看系统ip地址</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/746f9acd475839015e8d252cc352d96f.png" alt="image-20201006155229054"></p><h6 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping   检查网络是否正常通信，linux下默认ping不会结束，使用c t r l+C强制结束例如:ping www.baidu.com</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping -c 指定几个数据包结束</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping -i 指定发送数据包的间隔，单位时秒</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping -s 指定发送数据的大小 单位时字节</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping -t 设置TTL的大小  TTL网络调数大小</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/fc9673c68ece8028e75f52dcc1e50520.png" alt="image-20201006155736975"></p><h6 id="ssh远程连接"><a href="#ssh远程连接" class="headerlink" title="ssh远程连接"></a>ssh远程连接</h6><p>Ssh是一种网络协议，用于计算机之间的加密登陆，Linux下默认开启sshd服务，只有开启sshd服务才能进行连接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd status  查看是否开启服务 active表示已开启</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/558c20a43a7e27877b75a903c812bfc8.png" alt="image-20201006160039844"></p><h6 id="ssh远程连接-1"><a href="#ssh远程连接-1" class="headerlink" title="ssh远程连接"></a>ssh远程连接</h6><p>Window：xshell 和putty</p><p>Mac. finallshell</p><p>Linux  </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -p 端口 主机  -p可以指定端口ssh 一般默认使用22  看到welcome表示连接成功</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/img_convert/20641d3cfdcf0133083b1864e84e2d46.png" alt="image-20201006160425256"></p><h6 id="scp文件复制："><a href="#scp文件复制：" class="headerlink" title="scp文件复制："></a>scp文件复制：</h6><p>scp就是se cure copy 是一个在linux下用来进行远程拷贝文件的命令</p><p>使用范例1:吧远程的e.txt文件拷贝到本地/home/python/Desktop下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp python@192.168.254.131:/home/python/a/e.txt /home/python/Desktop</span><br></pre></td></tr></table></figure><p>使用范例2:把本地的Desktop/requirements.txt 文件拷贝到远程主机的home目录下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp Desktop/requirements.txt python@192.168.254.131:/home/python</span><br></pre></td></tr></table></figure><p>使用范例3:scp -r可以复制文件夹，把当前目录下的demo文件夹复制到远程目录下的Desktop</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r demo user@remote:Desktop</span><br></pre></td></tr></table></figure><p>使用范例4:将远程主机的a文件夹包括子文件，复制到本机的桌面</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r python@192.168.254.131:/home/python/a Desktop</span><br></pre></td></tr></table></figure><p>scp只能在linux中使用，window中我们一般使用winscp</p><p>winscp下载地址：<a href="https://winscp.net/eng/download.php">https://winscp.net/eng/download.php</a></p><h5 id="系统信息管理"><a href="#系统信息管理" class="headerlink" title="系统信息管理"></a>系统信息管理</h5><h6 id="Date-查看系统当前时间"><a href="#Date-查看系统当前时间" class="headerlink" title="Date 查看系统当前时间"></a>Date 查看系统当前时间</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z ~]# date2020年 10月 06日 星期二 16:17:12 CST[root@izuf6essqiicvb19gkmlb9z ~]# </span><br></pre></td></tr></table></figure><h6 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h6><p> d f -Th查看磁盘分区，以及挂载情况</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z ~]# df -Th文件系统       类型      容量  已用  可用 已用% 挂载点/dev/vda1      ext4       40G  4.3G   34G   12% /devtmpfs       devtmpfs  911M     0  911M    0% /devtmpfs          tmpfs     920M     0  920M    0% /dev/shmtmpfs          tmpfs     920M  392K  920M    1% /runtmpfs          tmpfs     920M     0  920M    0% /sys/fs/cgrouptmpfs          tmpfs     184M     0  184M    0% /run/user/0[root@izuf6essqiicvb19gkmlb9z ~]# </span><br></pre></td></tr></table></figure><p>du -sh 【filename】 查看目录大小</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z /]# du -sh liuhuanhuan0       liuhuanhuan[root@izuf6essqiicvb19gkmlb9z /]# </span><br></pre></td></tr></table></figure><p>du -h [filename] 查看文件大小</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z tmp]# du -h hsperfdata_root/36K     hsperfdata_root/[root@izuf6essqiicvb19gkmlb9z tmp]# </span><br></pre></td></tr></table></figure><h6 id="查看内核-操作系统-c-pu信息"><a href="#查看内核-操作系统-c-pu信息" class="headerlink" title="查看内核/操作系统/c pu信息"></a>查看内核/操作系统/c pu信息</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a 查看内核/操作系统/c pu信息</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z tmp]# uname -aLinux izuf6essqiicvb19gkmlb9z 3.10.0-514.26.2.el7.x86_64 #1 SMP Tue Jul 4 15:04:05 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -i 查看硬件平台</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -m 查看cpu</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -n 查看节点名称</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -o 查看操作系统</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -v 查看内核版本</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -r 查看发行版本号</span><br></pre></td></tr></table></figure><h6 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h6><p>to p查看进程实时运行情况，即系统资源实时使用情况，退出to p界面输入q</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">top - 16:27:44 up 26 days,  3:32,  3 users,  load average: 0.00, 0.06, 0.06Tasks:  79 total,   1 running,  78 sleeping,   0 stopped,   0 zombie%Cpu(s):  0.3 us,  0.2 sy,  0.0 ni, 99.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem :  1883652 total,   104420 free,   832708 used,   946524 buff/cacheKiB Swap:        0 total,        0 free,        0 used.   847524 avail Mem   PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                              1 root      20   0   43180   3304   2100 S  0.0  0.2   0:15.42 systemd                                                                                                              2 root      20   0       0      0      0 S  0.0  0.0   0:00.02 kthreadd                                                                                                             3 root      20   0       0      0      0 S  0.0  0.0   0:08.82 ksoftirqd/0                                                                                                          5 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kworker/0:0H                                                                                                         6 root      20   0       0      0      0 S  0.0  0.0   0:10.68 kworker/u2:0                                                                                                         7 root      rt   0       0      0      0 S  0.0  0.0   0:00.00 migration/0                                                                                                          8 root      20   0       0      0      0 S  0.0  0.0   0:00.00 rcu_bh                                                                                                               9 root      20   0       0      0      0 S  0.0  0.0   1:13.69 rcu_sched                                                                                                           10 root      rt   0       0      0      0 S  0.0  0.0   0:06.55 watchdog/0                                                                                                          12 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kdevtmpfs                                                                                                           13 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 netns                                                                                                               14 root      20   0       0      0      0 S  0.0  0.0   0:00.51 khungtaskd                                                                                                          15 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 writeback                                                                                                           16 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kintegrityd                                                                                                         17 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 bioset                                                                                                              18 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kblockd                                                                                                             19 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 md                                                                                                                  25 root      20   0       0      0      0 S  0.0  0.0   0:00.91 kswapd0                                                                                                             26 root      25   5       0      0      0 S  0.0  0.0   0:00.00 ksmd                                                                                                                27 root      39  19       0      0      0 S  0.0  0.0   0:03.26 khugepaged                                                                                                          28 root      20   0       0      0      0 S  0.0  0.0   0:00.00 fsnotify_mark                                                                                                       29 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 crypto                                                                                                              37 root       0 -20       0      0      0 S  0.0  0.0   0:00.00 kthrotld </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PID  进程idUSER  进程所有者PR  进程优先级NI   nice值，负值表示高优先级，正值表示低优先级VIRT   进程使用的虚拟机内存总量RES    进程使用的，未被换出的物理内存大小SHR    共享内存大小S      进程状态 D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程%CPU   上次更新到现在CPU时间占用百分比%MEM进程使用的物理内存百分比TIME+ 进程使用的cpu时间统计COMMAND 进程名称</span><br></pre></td></tr></table></figure><h6 id="Ps-查看系用所有进程的状态"><a href="#Ps-查看系用所有进程的状态" class="headerlink" title="Ps 查看系用所有进程的状态"></a>Ps 查看系用所有进程的状态</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ajx   一般使用ps 和-ajx一起使用D不可中断系统进程R  运行中的进程S中断sleep状态T停止Z僵死-僵尸进程</span><br></pre></td></tr></table></figure><h6 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a>结束进程</h6><p>kill [参数][进程号]</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill 9[进程号]   强制结束进程kill 15[进程号]   结束进程，等级没有-9高</span><br></pre></td></tr></table></figure><p>提示：在linux中1号进程是不能被终止的</p><h6 id="练习测试"><a href="#练习测试" class="headerlink" title="练习测试"></a>练习测试</h6><p>1.创建一个用户li lei,其id号未2002，基本组为s tu（id为3000）,附加组为linux</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo groupadd -g 3000 stusudo groupadd linuxsudo useradd -u 2002 -g stu -G linux lilei</span><br></pre></td></tr></table></figure><p>2.创建一个用户hanmeimei需要默认创建home目录，并指定shell为/bin/bash</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo useradd -m -s /bin/bash hanmeimei</span><br></pre></td></tr></table></figure><p>3.修改lilei 的id号为4004,所属组为linux</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">usermod -u 4004 -g linux lilei</span><br></pre></td></tr></table></figure><p>4.添加系统用户zhao yu,其不允许其登陆系统</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -r -s &#x27;/bin/nologin&#x27; zhaoyu</span><br></pre></td></tr></table></figure><p>5.在桌面创建一个文件a.txt，并查看其文件的权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch a.txtls -l</span><br></pre></td></tr></table></figure><p>6.修改a,txt所在组的权限为只读</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod g=r a.text</span><br></pre></td></tr></table></figure><p>7.将a .txt的权限修改为其他人无任何权限，所有者可读可写，所属组</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u=rw,g=r,o=--- a.text</span><br></pre></td></tr></table></figure><h5 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h5><h6 id="which命令："><a href="#which命令：" class="headerlink" title="which命令："></a>which命令：</h6><p>查看给定命令的绝对位置，whi ch会在环境变量和$path设置的目录里查找合适的文件，也就是说which 可以查看系统某个命令是否存在，以及执行哪个位置的命令，此命令去搜索$path环境变量的目录中去，可以使用e cho $PATH查看，如：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z /]# echo $PATH/usr/local/maven/apache-maven-3.6.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/java/jdk1.8.0_261/bin:/usr/local/java/jdk1.8.0_261/jre/bin:/usr/local/node/node-v12.18.4-linux-x64/bin:/root/bin</span><br></pre></td></tr></table></figure><p>路径使用”:”去分割，Which命令会在这些路径下去搜索</p><p>Which   [系统命令]</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z /]# which java/usr/local/java/jdk1.8.0_261/bin/java[root@izuf6essqiicvb19gkmlb9z /]# which mvn/usr/local/maven/apache-maven-3.6.3/bin/mvn</span><br></pre></td></tr></table></figure><p>which是根据使用者所配置的环境变量去查看，不同的环境变量所找到的内容自然也是不同的</p><h6 id="whereis命令："><a href="#whereis命令：" class="headerlink" title="whereis命令："></a>whereis命令：</h6><p>whereis可以查看命令的绝对位置</p><p>whic h会列出这个命令的别名的记录，而whereis只会查看该命令所在的位置</p><p>whereis</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-b 只查找二进制文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-B&lt;目录&gt; 只在设置的目录下查找二进制文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-f 不显示文件民前的路径名称</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-m 只查找说明文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-M&lt;目录&gt;   只在设置的目录下查看说明文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-s   只查找原始代码文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-S&lt;目录&gt; 只在设置的目录下面去查看原始代码文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-u 查找不包含指定类型的文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z /]# whereis javajava: /usr/local/java /usr/local/java/jdk1.8.0_261/bin/java /usr/local/java/jdk1.8.0_261/jre/bin/java[root@izuf6essqiicvb19gkmlb9z /]# whereis mvnmvn: /usr/local/maven/apache-maven-3.6.3/bin/mvn /usr/local/maven/apache-maven-3.6.3/bin/mvn.cmd[root@izuf6essqiicvb19gkmlb9z /]# whereis pwdpwd: /usr/bin/pwd /usr/include/pwd.h /usr/share/man/man1/pwd.1.gz</span><br></pre></td></tr></table></figure><h6 id="Locate命令"><a href="#Locate命令" class="headerlink" title="Locate命令"></a>Locate命令</h6><p>Locate [关键字]</p><p>1.linux特有的寻找文件和目录的命令，用于快速定位系统命令，配置文件等</p><p>2.速度虽然快，但是有时候会找不到</p><p>3.locate是在文件数据库中查找，所以是很快的</p><p>4.文件数据库没有该文件，则无法查找到</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">updatedb 建立整个文件系统数据库    注意，执行权限为root</span><br></pre></td></tr></table></figure><p>注：</p><p>​    当在某些目录下创建文件时，然后更新数据库之后，并不能用locate命令立马查找到，原因是系统在更新数据库到配置文件中，设置了一些搜索限制，所以搜不到，输入如下命令即可看到：</p><p>locate命令安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yun install mlocateupdatedb</span><br></pre></td></tr></table></figure><h6 id="find命令："><a href="#find命令：" class="headerlink" title="find命令："></a>find命令：</h6><p>会在一个目录中去搜索文件，可以指定一些匹配条件，如文件名，文件类型和用户名等</p><p>Find [搜索路径][搜索选项] filename</p><p>path路径，表示从这个路径下开始找</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-name filename  查找名为filename的文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-size +/-大小 按照文件的大小来查找 +大于 -小于</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-user username 按文件所属查找</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">通过时间查找-ctime -atime -mtime （以天为单位）-cmin -amin -mmin(以分为单位)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-type 按文件类型</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-inum 根据i结点来查找</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-group 组名 按所属组来查找</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-a and 逻辑与 -O or </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-exec 或 -ok command &#123;&#125; \:将查到的文件command操作，</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">按照名称去查找[root@izuf6essqiicvb19gkmlb9z /]# find ./ -name java./usr/local/java./usr/local/java/jdk1.8.0_261/bin/java./usr/local/java/jdk1.8.0_261/jre/bin/java./usr/local/ShiJiaZhuRainAi/ShiJiaZhuangRain/src/test/java./usr/local/ShiJiaZhuRainAi/ShiJiaZhuangRain/src/main/java./etc/pki/java./etc/pki/ca-trust/extracted/java</span><br></pre></td></tr></table></figure><p>发现并删除8天以前创建的文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find ./ -mtime +8 -print|xargs rm -rf</span><br></pre></td></tr></table></figure><p>Where locate whereis find的区别：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.which用于查找直接的命令 只能查找可执行的文件，该命令只在$PATh中去查找，查重范围小，速度快 -a返回所有结果2.whereis 不只可以查看命令 棋类类型文件也可以查找。在$PATH基础上增加一些系统目录的查找，查找范围比which稍微大点，速度快，3.locat 快速查找指定的文件 他会从linux内置的文件数据库中去查找 可以使用updatedb 来更新一次索引，确保不会遗漏文件，可以通过-r正则匹配查找文件4.直接搜索整个文件目录，默认从根目录开始查找，最强大但是速度慢</span><br></pre></td></tr></table></figure><h6 id="Grep："><a href="#Grep：" class="headerlink" title="Grep："></a>Grep：</h6><p>grep是强大的文本搜索工具，他能使用正则表达式搜索文本，并把匹配的行打印出来</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &quot;python&quot; filename    #在filename文件中查找python,并将结果打印出来grep &quot;python&quot; filename filename2 filename3   #在多个文件中查找python,并将结果打印出来</span><br></pre></td></tr></table></figure><p>-E选项使用正则表达式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -E “[a-c]+” filename </span><br></pre></td></tr></table></figure><p>在多个文件中查找</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep  &quot;match_patter&quot; file_1,file_2,file_3</span><br></pre></td></tr></table></figure><p>输出包含匹配字符串的行数-n选项</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &quot;this&quot; index -n textindex</span><br></pre></td></tr></table></figure><h6 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h6><p>将左边的输出当作右边的输入</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ajx | grep ssh   将ps输出的结果当作grep的输入过滤</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z /]# ps -ajx | grep ssh    1  2005  2005  2005 ?           -1 Ss       0   0:00 /usr/sbin/sshd -D32741  8561  8561 32741 pts/0     8561 S+       0   0:00 ssh localhost -p 22 2005  8562  8562  8562 ?           -1 Ss       0   0:00 sshd: root@pts/2 8698 14678 14677  8698 pts/2    14677 R+       0   0:00 grep --color=auto ssh 2005 27153 27153 27153 ?           -1 Ss       0   0:00 sshd: root@notty27153 27155 27155 27155 ?           -1 Ss       0   0:00 /usr/libexec/openssh/sftp-server27153 27174 27174 27174 ?           -1 Ss       0   0:00 /usr/libexec/openssh/sftp-server27153 27181 27181 27181 ?           -1 Ss       0   0:00 /usr/libexec/openssh/sftp-server27153 27188 27188 27188 ?           -1 Ss       0   0:00 /usr/libexec/openssh/sftp-server27153 27195 27195 27195 ?           -1 Ss       0   0:00 /usr/libexec/openssh/sftp-server27153 27202 27202 27202 ?           -1 Ss       0   0:00 /usr/libexec/openssh/sftp-server 2005 32739 32739 32739 ?           -1 Ss       0   0:21 sshd: root@pts/0,pts/1</span><br></pre></td></tr></table></figure><p>显示/e t c目录下的文件或目录的总数量</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@izuf6essqiicvb19gkmlb9z /]# ll /etc | grep -E &quot;.*&quot; -c196</span><br></pre></td></tr></table></figure><h6 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls &gt; test.txt   #将ls命令的输出重定向到test.txt文件[root@izuf6essqiicvb19gkmlb9z /]# ll &gt; /home/TestCDX.txt[root@izuf6essqiicvb19gkmlb9z /]# lsbin  boot  dev  etc  home  lib  lib64  liuhuanhuan  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var[root@izuf6essqiicvb19gkmlb9z /]# cd /home[root@izuf6essqiicvb19gkmlb9z home]# lstemp  test  test2  TestCDX.txt  testfile[root@izuf6essqiicvb19gkmlb9z home]# cat TestCDX.txt 总用量 60lrwxrwxrwx.  1 root root     7 8月  18 2017 bin -&gt; usr/bindr-xr-xr-x.  4 root root  4096 9月   9 21:19 bootdrwxr-xr-x  19 root root  2980 9月  11 14:00 devdrwxr-xr-x. 81 root root  4096 10月  6 17:48 etcdrwxr-xr-x.  5 root root  4096 10月  6 18:25 homelrwxrwxrwx.  1 root root     7 8月  18 2017 lib -&gt; usr/liblrwxrwxrwx.  1 root root     9 8月  18 2017 lib64 -&gt; usr/lib64-rw-r--r--   1 root root     0 10月  6 02:34 liuhuanhuandrwx------.  2 root root 16384 8月  18 2017 lost+founddrwxr-xr-x.  2 root root  4096 11月  5 2016 mediadrwxr-xr-x.  2 root root  4096 11月  5 2016 mntdrwxr-xr-x.  2 root root  4096 9月  27 17:35 optdr-xr-xr-x  90 root root     0 9月  10 12:55 procdr-xr-x---. 11 root root  4096 10月  6 15:25 rootdrwxr-xr-x  23 root root   660 10月  6 17:48 runlrwxrwxrwx.  1 root root     8 8月  18 2017 sbin -&gt; usr/sbindrwxr-xr-x.  2 root root  4096 11月  5 2016 srvdr-xr-xr-x  13 root root     0 9月  10 20:55 sysdrwxrwxrwt. 13 root root  4096 10月  6 17:48 tmpdrwxr-xr-x. 13 root root  4096 8月  18 2017 usrdrwxr-xr-x. 19 root root  4096 9月  10 20:55 var</span><br></pre></td></tr></table></figure><p>输出重定向：追加&gt;&gt;</p><p>将输出重定向追加到文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="language-bash">&gt;```&gt;&gt;<span class="built_in">ls</span> &gt;&gt; text.txt   将<span class="built_in">ls</span>命令的输出追加到test.txt&gt;&gt;[root@izuf6essqiicvb19gkmlb9z /]<span class="comment"># ll &gt; /home/TestCDX.txt&gt;&gt;[root@izuf6essqiicvb19gkmlb9z /]# ls&gt;&gt;bin  boot  dev  etc  home  lib  lib64  liuhuanhuan  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var&gt;&gt;[root@izuf6essqiicvb19gkmlb9z /]# cd /home&gt;&gt;[root@izuf6essqiicvb19gkmlb9z home]# ls&gt;&gt;temp  test  test2  TestCDX.txt  testfile&gt;&gt;[root@izuf6essqiicvb19gkmlb9z home]# cat TestCDX.txt &gt;&gt;总用量 60&gt;&gt;lrwxrwxrwx.  1 root root     7 8月  18 2017 bin -&gt; usr/bin&gt;&gt;dr-xr-xr-x.  4 root root  4096 9月   9 21:19 boot&gt;&gt;drwxr-xr-x  19 root root  2980 9月  11 14:00 dev&gt;&gt;drwxr-xr-x. 81 root root  4096 10月  6 17:48 etc&gt;&gt;drwxr-xr-x.  5 root root  4096 10月  6 18:25 home&gt;&gt;lrwxrwxrwx.  1 root root     7 8月  18 2017 lib -&gt; usr/lib&gt;&gt;lrwxrwxrwx.  1 root root     9 8月  18 2017 lib64 -&gt; usr/lib64&gt;&gt;-rw-r--r--   1 root root     0 10月  6 02:34 liuhuanhuan&gt;&gt;drwx------.  2 root root 16384 8月  18 2017 lost+found&gt;&gt;drwxr-xr-x.  2 root root  4096 11月  5 2016 media&gt;&gt;drwxr-xr-x.  2 root root  4096 11月  5 2016 mnt&gt;&gt;drwxr-xr-x.  2 root root  4096 9月  27 17:35 opt&gt;&gt;dr-xr-xr-x  90 root root     0 9月  10 12:55 proc&gt;&gt;dr-xr-x---. 11 root root  4096 10月  6 15:25 root&gt;&gt;drwxr-xr-x  23 root root   660 10月  6 17:48 run&gt;&gt;lrwxrwxrwx.  1 root root     8 8月  18 2017 sbin -&gt; usr/sbin&gt;&gt;drwxr-xr-x.  2 root root  4096 11月  5 2016 srv&gt;&gt;dr-xr-xr-x  13 root root     0 9月  10 20:55 sys&gt;&gt;drwxrwxrwt. 13 root root  4096 10月  6 17:48 tmp&gt;&gt;drwxr-xr-x. 13 root root  4096 8月  18 2017 usr&gt;&gt;drwxr-xr-x. 19 root root  4096 9月  10 20:55 var&gt;&gt;[root@izuf6essqiicvb19gkmlb9z home]# ls &gt;&gt; TestCDX.txt&gt;&gt;[root@izuf6essqiicvb19gkmlb9z home]# ls&gt;&gt;temp  test  test2  TestCDX.txt  testfile&gt;&gt;[root@izuf6essqiicvb19gkmlb9z home]# cat TestCDX.txt &gt;&gt;总用量 60&gt;&gt;lrwxrwxrwx.  1 root root     7 8月  18 2017 bin -&gt; usr/bin&gt;&gt;dr-xr-xr-x.  4 root root  4096 9月   9 21:19 boot&gt;&gt;drwxr-xr-x  19 root root  2980 9月  11 14:00 dev&gt;&gt;drwxr-xr-x. 81 root root  4096 10月  6 17:48 etc&gt;&gt;drwxr-xr-x.  5 root root  4096 10月  6 18:25 home&gt;&gt;lrwxrwxrwx.  1 root root     7 8月  18 2017 lib -&gt; usr/lib&gt;&gt;lrwxrwxrwx.  1 root root     9 8月  18 2017 lib64 -&gt; usr/lib64&gt;&gt;-rw-r--r--   1 root root     0 10月  6 02:34 liuhuanhuan&gt;&gt;drwx------.  2 root root 16384 8月  18 2017 lost+found&gt;&gt;drwxr-xr-x.  2 root root  4096 11月  5 2016 media&gt;&gt;drwxr-xr-x.  2 root root  4096 11月  5 2016 mnt&gt;&gt;drwxr-xr-x.  2 root root  4096 9月  27 17:35 opt&gt;&gt;dr-xr-xr-x  90 root root     0 9月  10 12:55 proc&gt;&gt;dr-xr-x---. 11 root root  4096 10月  6 15:25 root&gt;&gt;drwxr-xr-x  23 root root   660 10月  6 17:48 run&gt;&gt;lrwxrwxrwx.  1 root root     8 8月  18 2017 sbin -&gt; usr/sbin&gt;&gt;drwxr-xr-x.  2 root root  4096 11月  5 2016 srv&gt;&gt;dr-xr-xr-x  13 root root     0 9月  10 20:55 sys&gt;&gt;drwxrwxrwt. 13 root root  4096 10月  6 17:48 tmp&gt;&gt;drwxr-xr-x. 13 root root  4096 8月  18 2017 usr&gt;&gt;drwxr-xr-x. 19 root root  4096 9月  10 20:55 var&gt;&gt;temp&gt;&gt;test&gt;&gt;test2&gt;&gt;TestCDX.txt&gt;&gt;testfile&gt;&gt;&gt;&gt;```&gt;&gt;&gt;&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="文件打包解压命令"><a href="#文件打包解压命令" class="headerlink" title="文件打包解压命令"></a>文件打包解压命令</h5><h6 id="文件打包"><a href="#文件打包" class="headerlink" title="文件打包"></a>文件打包</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf 生成打包的文件名.tar 需要被打包的文件-c  创建一个新的归档-v详细的列出处理的文件-f    使用归档文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">将指定文件目录下的文件打包[root@izuf6essqiicvb19gkmlb9z home]# tar -cvf 打包测试.tar TestCDX.txt tempTestCDX.txttemp/[root@izuf6essqiicvb19gkmlb9z home]# lstemp  test  test2  TestCDX.txt  testfile  打包测试.tar</span><br></pre></td></tr></table></figure><h6 id="文件解包"><a href="#文件解包" class="headerlink" title="文件解包"></a>文件解包</h6><p>ta r -xvf 打包过的文件</p><p>-x 将打包过的文件解压</p><p>-f 选项必须放到最后面</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">解压到指定文件目录下  tar -xvf 需要解压的文件 -C 指定的文件路径[root@izuf6essqiicvb19gkmlb9z home]# tar -xvf 打包测试.tar -C /home/aTestCDX.txttemp/[root@izuf6essqiicvb19gkmlb9z home]# lsa  temp  test  test2  TestCDX.txt  testfile  打包测试.tar[root@izuf6essqiicvb19gkmlb9z home]# cd a[root@izuf6essqiicvb19gkmlb9z a]# lstemp  TestCDX.txt</span><br></pre></td></tr></table></figure><h5 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h5><h6 id="gzip命令"><a href="#gzip命令" class="headerlink" title="gzip命令"></a>gzip命令</h6><p>gzip一般和tar一起使用，完成打包压缩</p><p>ta r只负责打包并为做压缩，使用-z选项可以调用gzip完成压缩，完成打包压缩</p><p>使用ta r打包压缩的文件名，一般命名成x x x x x.tar.gz区别于其他文件</p><p>压缩文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zcvf py.tar.gz a.txt b.txt c.txt</span><br></pre></td></tr></table></figure><p>解压缩文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf py.tar.gz</span><br></pre></td></tr></table></figure><p>解压缩到指定目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf 打包文件.tar.gz -C 目标路径-C是指定哪里，目标文件必须存在</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">压缩指定的testfile和test2 [root@izuf6essqiicvb19gkmlb9z home]# tar -zcvf 打包测试压缩.tar.gz testfile test2testfiletest2/test2/.bash_logouttest2/.bashrctest2/.bash_profiletest2/.bash_history[root@izuf6essqiicvb19gkmlb9z home]# lsa  temp  test  test2  TestCDX.txt  testfile  打包测试.tar  打包测试压缩.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">解压缩压缩包到指定的文件tar -zxvf 需要解压的文件 -C 指定文件目录[root@izuf6essqiicvb19gkmlb9z home]# tar -zxvf 打包测试压缩.tar.gz -C /home/testtestfiletest2/test2/.bash_logouttest2/.bashrctest2/.bash_profiletest2/.bash_history</span><br></pre></td></tr></table></figure><h6 id="bzip命令"><a href="#bzip命令" class="headerlink" title="bzip命令"></a>bzip命令</h6><p>bzip和gzip的方式差不多，也是由tar去调用，使用-j选项</p><p>b zi p压缩的文件是x x x.tar.bz2</p><p>压缩文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -jcvf py.tar.bz2 a.txt b.txt</span><br></pre></td></tr></table></figure><p>解压缩文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -jxvf py.tar.bz2</span><br></pre></td></tr></table></figure><h5 id="ubunt软件管理"><a href="#ubunt软件管理" class="headerlink" title="ubunt软件管理"></a>ubunt软件管理</h5><p>软件安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install 软件包</span><br></pre></td></tr></table></figure><p>如:安装s sh服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ssh</span><br></pre></td></tr></table></figure><p>软件更新</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update 软件包</span><br></pre></td></tr></table></figure><p>如:更新s sh服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update ssh</span><br></pre></td></tr></table></figure><p>软件卸载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove 软件包</span><br></pre></td></tr></table></figure><p>如:卸载s sh服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt remove ssh</span><br></pre></td></tr></table></figure><h5 id="vi-m编辑器"><a href="#vi-m编辑器" class="headerlink" title="vi m编辑器"></a>vi m编辑器</h5><h6 id="1-命令模式"><a href="#1-命令模式" class="headerlink" title="1.命令模式"></a>1.命令模式</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim filename    打开或新建文件。 vim+n filename.  打开或新建文件。光标移至n行vim + filename.   打开文件，光标移至最后一行vim +/pattern filename   打开文件，并将光标置于第一个与pattern匹配的位置vim -r filename.  在上次使用vim编辑器崩溃时，恢复filenamevim filename---filename.  依次打开文件</span><br></pre></td></tr></table></figure><p>​    移动光标命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">h光标左移一个字符l光标右移一个字符k或ctrl_p光标上移一行j光标下移一行w光标右移一个字到字首b光标左移一个字到字首o光标移到当前行首$光标移至当前行尾部ctrl+f文件尾翻以屏ctrl+b文件首翻以屏home移动至行首end移动至行末G跳转至文档最末尾gg跳转至文档首行nG    n是个数字，表示跳转至第几行</span><br></pre></td></tr></table></figure><p>删除文档命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dd删除光标所在行d0删除光标所在行光标前面的内容d$删除光标所在行光标末尾的内容 3 dd删除光标所在行包含当前行后面3行内容 yy复制 2 yy复制光标所在行开始2行内容 p粘贴 删除的内容也可以粘贴 u   撤销 ctrl r.  反撤销</span><br></pre></td></tr></table></figure><p>​    </p><h6 id="2-插入-编辑-模式"><a href="#2-插入-编辑-模式" class="headerlink" title="2.插入(编辑)模式"></a>2.插入(编辑)模式</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">i    在光标前I.   在当前行首a. 光标后A    在当前行尾o在当前行之下新开一行0   在当前行之上新开一行</span><br></pre></td></tr></table></figure><p>退出编辑:wq 推出并保存    </p><h6 id="3-末行模式"><a href="#3-末行模式" class="headerlink" title="3.末行模式"></a>3.末行模式</h6><p>保存退出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:q退出:q!退出并不保存:w保存:Wq退出并保存:x  退出并保存</span><br></pre></td></tr></table></figure><p>查找替换</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/string  在文本中查找stringn 下一个N 上一个:n1,n2s /word1/word2/g   将n1行到n2行中word1替换成word2,g表示全部替换:1,$s /word1/word2/g  从第一行到最后一行寻找word1字符串，并将该字符串取代为word2:1,$s /word1/word2/gc 从第一行到最后一行寻找word1字符串，并将该字符串取代为word2!</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">v按字符移动选择文本V按行移动选择文本</span><br></pre></td></tr></table></figure><p>​    </p><h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install lrzsz    rz/sz命令安装</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf + 文件名称删除某个文件</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv apache-tomcat-8.5.20 tomcat8.5   更改名称</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsb_release -a  查看系统版本</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看端口占用情况</title>
      <link href="/archives/236.html"/>
      <url>/archives/236.html</url>
      
        <content type="html"><![CDATA[<p>Linux 查看端口占用情况一般可以使用 <strong>lsof</strong> 和 <strong>netstat</strong> 命令。</p><span id="more"></span><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>lsof(list open files)是一个列出当前系统打开文件的工具。</p><p>lsof 查看端口占用方式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:端口号</span><br></pre></td></tr></table></figure><p><code>案例</code>：</p><p>查看服务器 8080 端口的占用情况：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B501.png" alt="image-20210719232602938"></p><p>lsof -i 需要 root 用户的权限来执行，如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B502.png" alt="image-20210719232654644"></p><p>具体参数信息如下：</p><ul><li><p>COMMAND:进程的名称   PID:进程标识符</p></li><li><p>USER:进程所有者</p></li><li><p>FD:文件描述符，应用程序通过文件描述符识别该文件。如cwd等</p></li><li><p>TYPE:文件类型</p></li><li><p>DEVICE:指定磁盘的名称</p></li><li><p>SIZE:文件的大小</p></li><li><p>NODE:索引节点（文件在磁盘上的标识）</p></li><li><p>NAME:打开文件的确切名称</p><p>更多 lsof 的命令如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:8080：查看8080端口占用</span><br><span class="line">lsof abc.txt：显示开启文件abc.txt的进程</span><br><span class="line">lsof -c abc：显示abc进程现在打开的文件</span><br><span class="line">lsof -c -p 1234：列出进程号为1234的进程所打开的文件</span><br><span class="line">lsof -g gid：显示归属gid的进程情况</span><br><span class="line">lsof +d /usr/local/：显示目录下被进程开启的文件</span><br><span class="line">lsof +D /usr/local/：同上，但是会搜索目录下的目录，时间较长</span><br><span class="line">lsof -d 4：显示使用fd为4的进程</span><br><span class="line">lsof -i -U：显示所有打开的端口和UNIX domain文件</span><br></pre></td></tr></table></figure></li></ul><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p><strong>netstat -tunlp</strong> 用于显示 tcp，udp 的端口和进程等相关情况。</p><p>netstat查看端口号占用方式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | gerp 8080</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B503.png" alt="image-20210719233320065"></p><ul><li>-t （tcp）仅显示tcp相关选项</li><li>-u  (udp) 仅显示udp相关选项</li><li>-n  拒绝显示别名，能显示数字的全部转化为数字</li><li>-l   仅列出在Listen的服务状态</li><li>-p  显示建立相关链接的程序名</li></ul><p><code>案例</code>:</p><p>查看 8000 端口的情况，使用以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -tunlp | gerp 8080</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/Linux%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%8D%A0%E7%94%A8%E6%83%85%E5%86%B503.png" alt="image-20210719233320065"></p><p>更多命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ntlp   //查看当前所有tcp端口</span><br><span class="line">netstat -ntulp | grep 80   //查看所有80端口使用情况</span><br><span class="line">netstat -ntulp | grep 3306   //查看所有3306端口使用情况</span><br></pre></td></tr></table></figure><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p>在查到端口占用的进程后，如果你要杀掉对应的进程可以使用 kill 命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 PID</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9 31194</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS服务器安装nginx</title>
      <link href="/archives/47617.html"/>
      <url>/archives/47617.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>阿里云Ecs服务器部署项目，尤其是对于前后端分离的项目，之前在博客中提到相关SpringBoot部署到服务器：</p><p><a href="https://blog.csdn.net/qq_38140292/article/details/117190594?spm=1001.2014.3001.5501">(35条消息) SpringBoot部署到阿里云服务器_最爱吃大米的博客-CSDN博客</a></p><p>此时对于前后端分离的项目，我们需要将我们对应的前端也部署到服务器，此时我们正对基于vue的框架，我们需要安装相关环境node vue，请自行安装。</p><span id="more"></span><h3 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a><strong>1.安装依赖包</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="2-下载并解压安装包"><a href="#2-下载并解压安装包" class="headerlink" title="2.下载并解压安装包"></a><strong>2.下载并解压安装包</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">创建用于存在地址的文件夹</span></span><br><span class="line">cd /usr/local</span><br><span class="line">mkdir nginx</span><br><span class="line">cd nginx</span><br><span class="line"><span class="meta">#</span><span class="language-bash">从服务器下载相关nginx文件</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="language-bash">解压文件</span></span><br><span class="line">tar -xvf nginx-1.13.7.tar.gz</span><br></pre></td></tr></table></figure><h3 id="3-安装nginx"><a href="#3-安装nginx" class="headerlink" title="3.安装nginx"></a><strong>3.安装nginx</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">进入nginx目录</span></span><br><span class="line">cd /usr/local/nginx</span><br><span class="line"><span class="meta">#</span><span class="language-bash">进入目录</span></span><br><span class="line">cd nginx-1.13.7</span><br><span class="line"><span class="meta">#</span><span class="language-bash">执行命令</span></span><br><span class="line">./configure</span><br><span class="line"><span class="meta">#</span><span class="language-bash">执行make命令</span></span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="language-bash">执行make install命令</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="4-配置nginx-conf"><a href="#4-配置nginx-conf" class="headerlink" title="4.配置nginx.conf"></a><strong>4.配置nginx.conf</strong></h3><p>这是nginx最重要的地方</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">打开配置文件</span></span><br><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br><span class="line">i 进入编辑</span><br></pre></td></tr></table></figure><p><code>以下为我的配置（仅供参考）</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">    # 默认使用80端口，这个可以根据自己前端访问地址自行修改</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">需要访问的vue项目页面</span></span><br><span class="line">            root   /usr/project/dist;</span><br><span class="line">            # vue项目地址</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">location /prod-api/&#123;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">前端访问后端的端口号！！！一定要根据自己项目进行修改</span></span><br><span class="line">proxy_pass http://localhost:8081/;</span><br><span class="line">&#125;</span><br><span class="line">location /dev-api/&#123;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"><span class="meta"># </span><span class="language-bash">前端访问后端的端口号！！！一定要根据自己项目进行修改</span></span><br><span class="line">proxy_pass http://localhost:8081/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-启动nginx"><a href="#5-启动nginx" class="headerlink" title="5.启动nginx"></a><strong>5.启动nginx</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p><code>如果出现报错：nginx: [error] open() ＂/usr/local/nginx/logs/nginx.pid＂ failed</code></p><p>则运行： </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>再次启动即可！</p><p>查看nginx进程是否启动：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85nginx01.png" alt="image-20210719221837639"></p><h3 id="6-外部主机连接上nginx需要关闭虚拟机的防火墙："><a href="#6-外部主机连接上nginx需要关闭虚拟机的防火墙：" class="headerlink" title="6.外部主机连接上nginx需要关闭虚拟机的防火墙："></a><strong>6.外部主机连接上nginx需要关闭虚拟机的防火墙：</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><p>此时去阿里云终端配置外部访问端口 80 <code>配置安全组规则</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85nginx02.png" alt="image-20210719222129168"></p><p>常用命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">进入目录中<span class="built_in">cd</span> /usr/local/nginx/sbin<span class="comment"># 启动./nginx# 关闭./nginx -s stop# 重启./nginx -s reload</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS服务器安装Mysql全过程</title>
      <link href="/archives/50115.html"/>
      <url>/archives/50115.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、查看服务器状态"><a href="#一、查看服务器状态" class="headerlink" title="一、查看服务器状态"></a>一、查看服务器状态</h2><h4 id="1-确保服务器系统最新状态"><a href="#1-确保服务器系统最新状态" class="headerlink" title="1.确保服务器系统最新状态"></a>1.确保服务器系统最新状态</h4><span id="more"></span><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure><p>出现如下即更新成功</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Replaced:</span><br><span class="line">  grub2.x86_64 1:2.02-0.86.3.al7.alnx               grub2-tools.x86_64 1:2.02-0.86.3.al7.alnx              </span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure><h4 id="2-重启服务器"><a href="#2-重启服务器" class="headerlink" title="2.重启服务器"></a>2.重启服务器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h4 id="3-检查mysql是否已经安装"><a href="#3-检查mysql是否已经安装" class="headerlink" title="3.检查mysql是否已经安装"></a>3.检查mysql是否已经安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><p>如果已经安装的话，那就还看啥呢</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Mysql%E5%85%A8%E8%BF%87%E7%A8%8B.jpg" alt="img" style="zoom:50%;" /></p><p>没安装的小伙伴可以继续下面的文章哦</p><h4 id="4-下载MySql安装包"><a href="#4-下载MySql安装包" class="headerlink" title="4.下载MySql安装包"></a>4.下载MySql安装包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</span><br><span class="line">或者</span><br><span class="line">rpm -ivh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="5-安装mysql"><a href="#5-安装mysql" class="headerlink" title="5.安装mysql"></a>5.安装mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y mysql-server</span><br><span class="line">或者</span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>如果显示以下内容说明安装成功<br>    <img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Myql.png" alt="image-20210522224111980"></p><h4 id="6-设置开机启动mysql"><a href="#6-设置开机启动mysql" class="headerlink" title="6.设置开机启动mysql"></a>6.设置开机启动mysql</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable mysqld.service</span><br></pre></td></tr></table></figure><h4 id="7-检查是否已经安装了开机自动启动"><a href="#7-检查是否已经安装了开机自动启动" class="headerlink" title="7.检查是否已经安装了开机自动启动"></a>7.检查是否已经安装了开机自动启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files | grep mysqld</span><br></pre></td></tr></table></figure><p>如果显示以下内容说明已经完成自动启动安装</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Mysql2.png" alt="image-20210522224226928"></p><h4 id="8-设置开启服务"><a href="#8-设置开启服务" class="headerlink" title="8.设置开启服务"></a>8.设置开启服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><h4 id="9-查看MySql默认密码"><a href="#9-查看MySql默认密码" class="headerlink" title="9.查看MySql默认密码"></a>9.查看MySql默认密码</h4><p>查看默认密码后，方便我们修改为自己想要的密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log   </span><br></pre></td></tr></table></figure><h4 id="10-登陆MySql，输入用户名和密码"><a href="#10-登陆MySql，输入用户名和密码" class="headerlink" title="10. 登陆MySql，输入用户名和密码"></a>10. 登陆MySql，输入用户名和密码</h4><p>密码为上一步看到的默认密码</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p       </span><br></pre></td></tr></table></figure><h4 id="11-修改当前用户密码"><a href="#11-修改当前用户密码" class="headerlink" title="11.修改当前用户密码"></a>11.修改当前用户密码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(&#x27;xxxxxxxxx&#x27;);  </span><br></pre></td></tr></table></figure><p>注：直接复制粘贴上边的命令，会出现错误，错误如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Mysql3.png" alt="image-20210522225358120"></p><p>解决方式如下：</p><p>原因：mysql为了安全，有自己的策略要求，如果我们想将其设置为我们常用的root或者123456这样的密码，需要修改策略要求，具体命令如下：</p><p>通过设置密码强度来改变，如下方式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set global validate_password_policy=LOW;</span><br></pre></td></tr></table></figure><p>然后再次在mysql命令行下执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(&#x27;xxxxxxxxxx&#x27;); </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Mysql4.png" alt="image-20210522225636265"></p><h4 id="12-开启远程登录，授权root远程登录"><a href="#12-开启远程登录，授权root远程登录" class="headerlink" title="12.开启远程登录，授权root远程登录"></a>12.开启远程登录，授权root远程登录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;xxxxxxx&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h4 id="13-命令立即执行生效"><a href="#13-命令立即执行生效" class="headerlink" title="13.命令立即执行生效"></a>13.命令立即执行生效</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="二、远程工具连接"><a href="#二、远程工具连接" class="headerlink" title="二、远程工具连接"></a>二、远程工具连接</h2><p>1.使用xshell，putty等工具连接服务器</p><p>2.输入mysql -uroot -p  输入密码登录</p><p>3.use mysql</p><p>4.接下来我们可以查看一下现有用户及连接权限</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select User,authentication_string,Host from user</span><br></pre></td></tr></table></figure><p>mysql是为了安全考虑所以初始的时候远程是不能访问的，只能本地localhost，127.0.0.1访问。（<strong>就相当于远程只能登录mysql这个工具，却不能以某种用户的身份访问里面的数据</strong>（我们平时做项目都是以root用户的身份访问指定数据库数据））</p><p>5.下面我们就再添加一个root用户，密码暂时为空，允许任意Ip访问’%’</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;root用户的密码&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>6.刷新</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>7.<code>阿里云配置实例安全组</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Mysql5.png" alt="image-20210522231442755"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Mysql6.png" alt="image-20210522231511389"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%B0%E5%A2%9EMysql7.png" alt="image-20210522231534521"></p><p>通过navicat工具连接，即可连接成功。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS服务器安装Redis</title>
      <link href="/archives/13186.html"/>
      <url>/archives/13186.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h3><p>进入官网找到下载地址 <a href="https://redis.io/download">https://redis.io/download</a></p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis01.png" alt="image-20210718232240582" style="zoom: 25%;" /></p><p>右键Download按钮，选择复制链接。<br>进入到Xshell控制台(默认当前是root根目录)，输入wget 将上面复制的下载链接粘贴上，如下命令:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.7.tar.gz</span><br></pre></td></tr></table></figure><p>敲入回车键执行后如下图:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis02.png" alt="img"></p><h3 id="解压并安装Redis"><a href="#解压并安装Redis" class="headerlink" title="解压并安装Redis"></a>解压并安装Redis</h3><p>下载完成后需要将压缩文件解压，输入以下命令解压到当前目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zvxf redis-5.0.7.tar.gz</span><br></pre></td></tr></table></figure><p>解压后在根目录上输入ls 列出所有目录会发现与下载redis之前多了一个redis-5.0.7.tar.gz文件和 redis-5.0.7的目录。</p><h3 id="移动redis目录"><a href="#移动redis目录" class="headerlink" title="移动redis目录"></a>移动redis目录</h3><p>一般都会将redis目录放置到 /usr/local/redis目录，所以这里输入下面命令将目前在/root目录下的redis-5.0.7文件夹更改目录，同时更改文件夹名称为redis。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv /root/redis-5.0.7 /usr/local/redis</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>cd到/usr/local/redis目录，输入命令make执行编译命令，接下来控制台会输出各种编译过程中输出的内容。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>最终运行结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis03.png" alt="img"></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>输入以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure><blockquote><p>这里多了一个关键字 <strong><code>PREFIX=</code></strong> 这个关键字的作用是编译的时候用于指定程序存放的路径。比如我们现在就是指定了redis必须存放在/usr/local/redis目录。假设不添加该关键字Linux会将可执行文件存放在/usr/local/bin目录，</p><p>库文件会存放在/usr/local/lib目录。配置文件会存放在/usr/local/etc目录。其他的资源文件会存放在usr/local/share目录。这里指定号目录也方便后续的卸载，后续直接rm -rf /usr/local/redis 即可删除redis。</p></blockquote><p>执行结果如下图:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis04.png" alt="img"></p><h4 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动<strong>redis</strong></h4><p>在目录/usr/local/redis 输入下面命令启动redis</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/redis-server&amp; ./redis.conf</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis05.png" alt="img"></p><h4 id="redis-conf配置文件"><a href="#redis-conf配置文件" class="headerlink" title="redis.conf配置文件"></a>redis.conf配置文件</h4><p>在目录/usr/local/redis下有一个redis.conf的配置文件。我们上面启动方式就是执行了该配置文件的配置运行的。我么可以通过cat、vim、less等Linux内置的读取命令读取该文件。</p><p>也可以通过redis-cli命令进入redis控制台后通过CONFIG GET * 的方式读取所有配置项。 如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br><span class="line">CONFIG GET *</span><br></pre></td></tr></table></figure><p>回车确认后会将所有配置项读取出来，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis06.png" alt="img"></p><h4 id="一些比较重要的配置选项"><a href="#一些比较重要的配置选项" class="headerlink" title="一些比较重要的配置选项"></a>一些比较重要的配置选项</h4><div class="table-container"><table><thead><tr><th>配置项名称</th><th>配置项值范围</th><th>说明</th></tr></thead><tbody><tr><td>daemonize</td><td>yes、no</td><td>yes表示启用守护进程，默认是no即不以守护进程方式运行。其中Windows系统下不支持启用守护进程方式运行</td></tr><tr><td>port</td><td></td><td>指定 Redis 监听端口，默认端口为 6379</td></tr><tr><td>bind</td><td></td><td>绑定的主机地址,如果需要设置远程访问则直接将这个属性备注下或者改为bind * 即可,这个属性和下面的protected-mode控制了是否可以远程访问 。</td></tr><tr><td>protected-mode</td><td>yes 、no</td><td>保护模式，该模式控制外部网是否可以连接redis服务，默认是yes,所以默认我们外网是无法访问的，如需外网连接rendis服务则需要将此属性改为no。</td></tr><tr><td>timeout</td><td>300</td><td>当客户端闲置多长时间后关闭连接，如果指定为 0，表示关闭该功能</td></tr><tr><td>loglevel</td><td>debug、verbose、notice、warning</td><td>日志级别，默认为 notice</td></tr><tr><td>databases</td><td>16</td><td>设置数据库的数量，默认的数据库是0。整个通过客户端工具可以看得到</td></tr><tr><td>rdbcompression</td><td>yes、no</td><td>指定存储至本地数据库时是否压缩数据，默认为 yes，Redis 采用 LZF 压缩，如果为了节省 CPU 时间，可以关闭该选项，但会导致数据库文件变的巨大。</td></tr><tr><td>dbfilename</td><td>dump.rdb</td><td>指定本地数据库文件名，默认值为 dump.rdb</td></tr><tr><td>dir</td><td></td><td>指定本地数据库存放目录</td></tr><tr><td>requirepass</td><td></td><td>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 AUTH <password> 命令提供密码，默认关闭</td></tr><tr><td>maxclients</td><td>0</td><td>设置同一时间最大客户端连接数，默认无限制，Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息。</td></tr><tr><td>maxmemory</td><td>XXX <bytes></td><td>指定 Redis 最大内存限制，Redis 在启动时会把数据加载到内存中，达到最大内存后，Redis 会先尝试清除已到期或即将到期的 Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis 新的 vm 机制，会把 Key 存放内存，Value 会存放在 swap 区。配置项值范围列里XXX为数值。</td></tr></tbody></table></div><p>这里我要将daemonize改为yes，不然我每次启动都得在redis-server命令后面加符号&amp;，不这样操作则只要回到Linux控制台则redis服务会自动关闭，同时也将bind注释，将protected-mode设置为no。<br>这样启动后我就可以在外网访问了。</p><p>更改方式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/redis/redis.conf</span><br></pre></td></tr></table></figure><p>通过 /daemonize 查找到属性，默认是no，更改为yes即可。 (通过/关键字查找出现多个结果则使用 n字符切换到下一个即可，查找到结果后输入:noh退回到正常模式)</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">i进入编辑模式dd 删除当前行esc退出编辑:wq 退出并保存</span><br></pre></td></tr></table></figure><h3 id="查看Redis是否正在运行"><a href="#查看Redis是否正在运行" class="headerlink" title="查看Redis是否正在运行"></a>查看Redis是否正在运行</h3><p><strong>1、采取查看进程方式</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -aux | grep redis</span><br></pre></td></tr></table></figure><p>结果如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis07.png" alt="img"></p><p><strong>2、采取端口监听查看方式</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -lanp | grep 6379</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis07.png" alt="img"></p><h3 id="关闭运行中的Redis服务"><a href="#关闭运行中的Redis服务" class="headerlink" title="关闭运行中的Redis服务"></a>关闭运行中的Redis服务</h3><p>输入<code>redis-cli</code> 进入控制台后输入命令<code>shutdown</code>即可关闭运行中的Redis服务了。</p><p>Redis客户端查看工具：<a href="https://gitee.com/qishibo/AnotherRedisDesktopManager">AnotherRedisDesktopManager: Github国内镜像，供下载使用，有问题可移步到 (gitee.com)</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Redis09.png" alt="image-20210719000755141"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS服务器安装Tomcat全过程</title>
      <link href="/archives/23233.html"/>
      <url>/archives/23233.html</url>
      
        <content type="html"><![CDATA[<p>一、安装tomcat之前需要先安装JDK，具体步骤参考：<a href="https://blog.csdn.net/qq_38140292/article/details/117186436?spm=1001.2014.3001.5501">https://blog.csdn.net/qq_38140292/article/details/117186436?spm=1001.2014.3001.5501</a></p><span id="more"></span><p>二、下载Tomcat</p><p><a href="http://tomcat.apache.org/download-90.cgi">点击下载</a>，下载Tomcat8</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Tomcat1.png" alt="image-20210523095000999"></p><p>三、上传Linux</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//解压即可</span><br><span class="line">tar -xzvf  apache-tomcat-8.5.66.M9.tar.gz</span><br></pre></td></tr></table></figure><p>四、配置环境</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export CATALINA_HOME=/usr/local/tomcat                   </span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin</span><br></pre></td></tr></table></figure><p>五、启动验证</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85tomcat2.png" alt="image-20210523095340856"></p><p>出现如上提示表示安装成功</p><p>六、阿里云安全组配置</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85tomcat3.png" alt="image-20210523095433501"></p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS服务器安装Maven</title>
      <link href="/archives/52595.html"/>
      <url>/archives/52595.html</url>
      
        <content type="html"><![CDATA[<p><strong>一. 下载压缩包:</strong></p><p>官网地址: <a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85maven1.png" alt="image-20210523101140539"></p><p><strong>二、上传文件</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><p><strong>三. 解压文件</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.8.1-bin.tar.gz</span><br></pre></td></tr></table></figure><p><strong>四. 配置环境变量</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">export MAVEN_HOME=/usr/local/apache-maven-3.8.1</span><br><span class="line">export PATH=$MAVEN_HOME/bin:$PATH </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85Maven2.png" alt="image-20210523101325611"></p><p>出现如上提示，即可表示安装成功</p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot部署到阿里云服务器</title>
      <link href="/archives/10691.html"/>
      <url>/archives/10691.html</url>
      
        <content type="html"><![CDATA[<p><strong>一、本地打包</strong></p><p>打开项目根目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean</span><br><span class="line">mvn install</span><br></pre></td></tr></table></figure><span id="more"></span><p>会在项目根目录下有个target文件夹中生成项目jar文件</p><p><strong>二、上传jar包到服务器</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure><p><strong>三、启动项目</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar xxxx.jar</span><br></pre></td></tr></table></figure><p>但是上面的方式在我们关闭终端窗口的时候，服务即会被关闭，通过如下方式来进行服务挂载</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -jar oasys.jar &amp;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ECS服务器安装JDK全过程</title>
      <link href="/archives/14382.html"/>
      <url>/archives/14382.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-工具选择"><a href="#1-工具选择" class="headerlink" title="1.工具选择"></a>1.工具选择</h3><p>选择合适的连接工具，如xftp、putty、Terminus等</p><span id="more"></span><h3 id="2、JDK下载与安装"><a href="#2、JDK下载与安装" class="headerlink" title="2、JDK下载与安装"></a>2、JDK下载与安装</h3><h4 id="2-1-JDK下载"><a href="#2-1-JDK下载" class="headerlink" title="2.1 JDK下载"></a>2.1 JDK下载</h4><p><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">oracle官网</a></p><p>官网下载相应服务器的JDK版本</p><p>可以通过第三方ftp工具，也可以通过命令行<code>rz</code>上传文件</p><p>一般系统默认，不带有rz命令，安装rz/sz</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install lrzsz</span><br></pre></td></tr></table></figure><h4 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h4><p><strong>解压下载的压缩包：</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk-8u291-linux-x64.tar.gz </span><br></pre></td></tr></table></figure><p><strong>切换到指定文件</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr</span><br><span class="line">mkdir software</span><br><span class="line">cd software</span><br><span class="line">mv ~/jdk1.8.0_291 /usr/software/jdk1.8.0_291</span><br></pre></td></tr></table></figure><p><strong>配置环境变量</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash"><span class="built_in">set</span> java <span class="built_in">env</span></span></span><br><span class="line">export JAVA_HOME=/usr/software/jdk1.8.0_291</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre    </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib    </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH </span><br></pre></td></tr></table></figure><p><strong>执行命令使修改立即生效：</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>测试安装连接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>出现如下即表示安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85JDK1.png" alt="image-20210523091638120"></p>]]></content>
      
      
      <categories>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】Python之attrs和attrlib</title>
      <link href="/archives/52956.html"/>
      <url>/archives/52956.html</url>
      
        <content type="html"><![CDATA[<p>Python 是支持面向对象的，很多情况下使用面向对象编程会使得代码更加容易扩展，并且可维护性更高，但是如果你写的多了或者某一对象非常复杂了，其中的一些写法会相当相当繁琐，而且我们会经常碰到对象和 JSON 序列化及反序列化的问题，原生的 Python 转起来还是很费劲的。</p><span id="more"></span><p>首先让我们定义一个对象吧，比如颜色。我们常用 RGB 三个原色来表示颜色，R、G、B 分别代表红、绿、蓝三个颜色的数值，范围是 0-255，也就是每个原色有 256 个取值。如 RGB(0, 0, 0) 就代表黑色，RGB(255, 255, 255) 就代表白色，RGB(255, 0, 0) 就代表红色，如果不太明白可以具体看看 RGB 颜色的定义哈。<br>好，那么我们现在如果想定义一个颜色对象，那么正常的写法就是这样了，创建这个对象的时候需要三个参数，就是 R、G、B 三个数值，定义如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Color Object of RGB</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, r, g, b</span>):</span><br><span class="line">        self.r = r</span><br><span class="line">        self.g = g</span><br><span class="line">        self.b = b</span><br></pre></td></tr></table></figure><p>其实对象一般就是这么定义的，初始化方法里面传入各个参数，然后定义全局变量并赋值这些值。其实挺多常用语言比如 Java、PHP 里面都是这么定义的。但其实这种写法是比较冗余的，比如 r、g、b 这三个变量一写就写了三遍。</p><p>好，那么我们初始化一下这个对象，然后打印输出下，看看什么结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">color = Color(255, 255, 255)</span><br><span class="line">print(color)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;__main__.Color <span class="built_in">object</span> at <span class="number">0x103436f60</span>&gt;</span><br></pre></td></tr></table></figure><p>在 Python 里面想要定义某个对象本身的打印输出结果的时候，需要实现它的<code>__repr__</code>方法，所以我们比如我们添加这么一个方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;<span class="subst">&#123;self.__class__.__name__&#125;</span>(r=<span class="subst">&#123;self.r&#125;</span>, g=<span class="subst">&#123;self.g&#125;</span>, b=<span class="subst">&#123;self.b&#125;</span>)&#x27;</span></span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Color(r=<span class="number">255</span>, g=<span class="number">255</span>, b=<span class="number">255</span>)</span><br></pre></td></tr></table></figure><p>如果我们要想实现这个对象里面的<code>__eq__</code>、<code>__lt__</code>等各种方法来实现对象之间的比较呢？</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(other, self.__class__): <span class="keyword">return</span> <span class="literal">NotImplemented</span></span><br><span class="line">    <span class="keyword">return</span> (self.r, self.g, self.b) &lt; (other.r, other.g, other.b)</span><br></pre></td></tr></table></figure><p>这里是 <code>__lt__</code>方法，有了这个方法就可以使用比较符来对两个 Color 对象进行比较了，但这里又把这几个属性写了两遍。</p><p>最后再考虑考虑，如果我要把 JSON 转成 Color 对象，难道我要读完 JSON 然后一个个属性赋值吗？如果我想把 Color 对象转化为 JSON，又得把这几个属性写几遍呢？</p><p><code>attrs</code> 这个库，其官方的介绍如下：</p><blockquote><p>attrs 是这样的一个 Python 工具包，它能将你从繁综复杂的实现上解脱出来，享受编写 Python 类的快乐。它的目标就是在不减慢你编程速度的前提下，帮助你来编写简洁而又正确的代码。</p></blockquote><p>其实意思就是用了它，定义和实现 Python 类变得更加简洁和高效。</p><h2 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h2><p>安装的时候是安装了<code>attrs</code>和 <code>cattrs</code> 这两个库，但是实际导入的时候是使用 <code>attr</code> 和 <code>cattr</code> 这两个包，是不带 s 的。</p><p>在<code>attr</code>这个库里面有两个比较常用的组件叫做<code>attrs</code> 和 <code>attr</code>，前者是主要用来修饰一个自定义类的，后者是定义类里面的一个字段的。有了它们，我们就可以将上文中的定义改写成下面的样子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attrib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@attrs</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    r = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)</span><br><span class="line">    g = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)</span><br><span class="line">    b = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    color = Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">    <span class="built_in">print</span>(color)</span><br></pre></td></tr></table></figure><p>首先我们导入了刚才所说的两个组件，然后用 <code>attrs</code>里面修饰了 Color 这个自定义类，然后用<code>attrib</code>来定义一个个属性，同时可以指定属性的类型和默认值。最后打印输出，结果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Color(r=<span class="number">255</span>, g=<span class="number">255</span>, b=<span class="number">255</span>)</span><br></pre></td></tr></table></figure><p>观察一下有什么变化，是不是变得更简洁了？r、g、b 三个属性都只写了一次，同时还指定了各个字段的类型和默认值，另外也不需要再定义<code>__init__</code>方法和 <code>__repr__</code>方法了，一切都显得那么简洁。</p><p>实际上，主要是 attrs 这个修饰符起了作用，然后根据定义的 attrib 属性自动帮我们实现了<code>__init__</code>、<code>__repr__</code>、<code>__eq__</code>、<code>__ne__</code>、<code>__lt__</code>、<code>__le__</code>、<code>__gt__</code>、<code>__ge__</code>、<code>__hash__</code>这几个方法</p><p>如使用 attrs 修饰的类定义是这样子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attrib@attrsclass Color(<span class="built_in">object</span>):    r = attrib()    g = attrib()</span><br></pre></td></tr></table></figure><p>其实就相当于已经实现了这些方法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RoughClass</span>(<span class="title class_ inherited__">object</span>):    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):        self.a = a        self.b = b    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):        <span class="keyword">return</span> <span class="string">&quot;RoughClass(a=&#123;&#125;, b=&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(self.a, self.b)    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:            <span class="keyword">return</span> (self.a, self.b) == (other.a, other.b)        <span class="keyword">else</span>:            <span class="keyword">return</span> <span class="literal">NotImplemented</span>    <span class="keyword">def</span> <span class="title function_">__ne__</span>(<span class="params">self, other</span>):        result = self.__eq__(other)        <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">NotImplemented</span>:            <span class="keyword">return</span> <span class="literal">NotImplemented</span>        <span class="keyword">else</span>:            <span class="keyword">return</span> <span class="keyword">not</span> result    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:            <span class="keyword">return</span> (self.a, self.b) &lt; (other.a, other.b)        <span class="keyword">else</span>:            <span class="keyword">return</span> <span class="literal">NotImplemented</span>    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self, other</span>):        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:            <span class="keyword">return</span> (self.a, self.b) &lt;= (other.a, other.b)        <span class="keyword">else</span>:            <span class="keyword">return</span> <span class="literal">NotImplemented</span>    <span class="keyword">def</span> <span class="title function_">__gt__</span>(<span class="params">self, other</span>):        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:            <span class="keyword">return</span> (self.a, self.b) &gt; (other.a, other.b)        <span class="keyword">else</span>:            <span class="keyword">return</span> <span class="literal">NotImplemented</span>    <span class="keyword">def</span> <span class="title function_">__ge__</span>(<span class="params">self, other</span>):        <span class="keyword">if</span> other.__class__ <span class="keyword">is</span> self.__class__:            <span class="keyword">return</span> (self.a, self.b) &gt;= (other.a, other.b)        <span class="keyword">else</span>:            <span class="keyword">return</span> <span class="literal">NotImplemented</span>    <span class="keyword">def</span> <span class="title function_">__hash__</span>(<span class="params">self</span>):        <span class="keyword">return</span> <span class="built_in">hash</span>((self.__class__, self.a, self.b))</span><br></pre></td></tr></table></figure><h2 id="二、别名使用"><a href="#二、别名使用" class="headerlink" title="二、别名使用"></a>二、别名使用</h2><p>首先是 <code>attrs</code>，它主要是用来修饰 class 类的，而 <code>attrib</code>主要是用来做属性定义的，这个就记住它们两个的用法就好了。</p><p>翻了一下源代码，发现其实它还有一些别名：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = attributes = attrsib = attr = attrib</span><br></pre></td></tr></table></figure><p>也就是说，<code>attrs</code>可以用 <code>s</code>或 <code>attributes</code>来代替，<code>attrib</code> 可以用 <code>attr</code>或 <code>ib</code>来代替。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> s, ib@sclass Color(<span class="built_in">object</span>):    r = ib(<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)    g = ib(<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)    b = ib(<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    color = Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)    <span class="built_in">print</span>(color)</span><br></pre></td></tr></table></figure><p>所以总结一下：</p><ul><li>库名：<code>attrs</code></li><li>导入包名：<code>attr</code></li><li>修饰类：<code>s</code> 或 <code>attributes</code> 或 <code>attrs</code></li><li>定义属性：<code>ib</code>或<code>attr</code> 或 <code>attrib</code></li></ul><h2 id="三、声明和比较"><a href="#三、声明和比较" class="headerlink" title="三、声明和比较"></a>三、声明和比较</h2><p>在这里我们再声明一个简单一点的数据结构，比如叫做 Point，包含 x、y 的坐标，定义如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@attrsclass Point(<span class="params"><span class="built_in">object</span></span>):    x = attrib()    y = attrib()</span></span><br></pre></td></tr></table></figure><p>其中 <code>attrib</code>里面什么参数都没有，如果我们要使用的话，参数可以顺次指定，也可以根据名字指定，如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p1 = Point(<span class="number">1</span>, <span class="number">2</span>)    <span class="built_in">print</span>(p1)       <span class="comment"># Point(x=1, y=2)    p2 = Point(x=3, y=4)    print(p2)       # Point(x=3, y=4)</span></span><br></pre></td></tr></table></figure><p>重载运算符 OK，接下来让我们再验证下类之间的比较方法，由于使用了 attrs，相当于我们定义的类已经有了<code>__eq__</code>、<code>__ne__</code>、<code>__lt__</code>、<code>__le__</code>、<code>__gt__</code>、<code>__ge__</code> 这几个方法，所以我们可以直接使用比较符来对类和类之间进行比较，下面我们用实例来感受一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Equal:&#x27;</span>, Point(<span class="number">1</span>, <span class="number">2</span>) == Point(<span class="number">1</span>, <span class="number">2</span>))    <span class="comment"># Equal: True    print(&#x27;Not Equal(ne):&#x27;, Point(1, 2) != Point(3, 4))    # Not Equal(ne): True    print(&#x27;Less Than(lt):&#x27;, Point(1, 2) &lt; Point(3, 4))    # Less Than(lt): True    print(&#x27;Less or Equal(le):&#x27;, Point(1, 2) &lt;= Point(1, 4), Point(1, 2) &lt;= Point(1, 2))    # Less or Equal(le): True True    print(&#x27;Greater Than(gt):&#x27;, Point(4, 2) &gt; Point(3, 2), Point(4, 2) &gt; Point(3, 1))    # Greater Than(gt): True True    print(&#x27;Greater or Equal(ge):&#x27;, Point(4, 2) &gt;= Point(4, 1))    # Greater or Equal(ge): True</span></span><br></pre></td></tr></table></figure><h2 id="四、属性定义"><a href="#四、属性定义" class="headerlink" title="四、属性定义"></a>四、属性定义</h2><p>现在看来，对于这个类的定义莫过于每个属性的定义了，也就是 attrib 的定义。对于<code>attrib</code>的定义，我们可以传入各种参数，<strong>不同的参数对于这个类的定义有非常大的影响。</strong></p><p>每个属性的具体参数和用法</p><p>首先让我们概览一下总共可能有多少可以控制一个属性的参数，我们用 <code>attrs</code>里面的<code>fields</code>方法可以查看一下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attrib, fields@attrsclass Point(<span class="built_in">object</span>):    x = attrib()    y = attrib()<span class="built_in">print</span>(fields(Point))</span><br></pre></td></tr></table></figure><p>这就可以输出 Point 的所有属性和对应的参数，结果如下:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(Attribute(name=<span class="string">&#x27;x&#x27;</span>, default=NOTHING, validator=<span class="literal">None</span>, <span class="built_in">repr</span>=<span class="literal">True</span>, cmp=<span class="literal">True</span>, <span class="built_in">hash</span>=<span class="literal">None</span>, init=<span class="literal">True</span>,  metadata=mappingproxy(&#123;&#125;),  <span class="built_in">type</span>=<span class="literal">None</span>,  converter=<span class="literal">None</span>, kw_only=<span class="literal">False</span>),   Attribute(name=<span class="string">&#x27;y&#x27;</span>, default=NOTHING, validator=<span class="literal">None</span>, <span class="built_in">repr</span>=<span class="literal">True</span>,  cmp=<span class="literal">True</span>, <span class="built_in">hash</span>=<span class="literal">None</span>, init=<span class="literal">True</span>, metadata=mappingproxy(&#123;&#125;),   <span class="built_in">type</span>=<span class="literal">None</span>, converter=<span class="literal">None</span>, kw_only=<span class="literal">False</span>) )</span><br></pre></td></tr></table></figure><p>输出出来了，可以看到结果是一个元组，元组每一个元素都其实是一个 <code>Attribute</code>对象，包含了各个参数，下面详细解释下几个参数的含义：</p><ul><li><code>name</code>：属性的名字，是一个字符串类型。</li><li><code>default</code>：属性的默认值，如果没有传入初始化数据，那么就会使用默认值。如果没有默认值定义，那么就是 NOTHING，即没有默认值。</li><li><code>validator</code>：验证器，检查传入的参数是否合法。</li><li><code>init</code>：是否参与初始化，如果为 False，那么这个参数不能当做类的初始化参数，默认是 True。</li><li>`metadata：元数据，只读性的附加数据。</li><li><code>type</code>：类型，比如 int、str 等各种类型，默认为 None。</li><li><code>converter</code>：转换器，进行一些值的处理和转换器，增加容错性。</li><li><code>kw_only</code>：是否为强制关键字参数，默认为 False。</li></ul><p><strong>属性名</strong></p><p>对于属性名，非常清楚了，我们定义什么属性，属性名就是什么，例如上面的例子，定义了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = attrib()</span><br></pre></td></tr></table></figure><p>那么其属性名就是 x。</p><p><strong>默认值</strong></p><p>对于默认值，如果在初始化的时候没有指定，那么就会默认使用默认值进行初始化，我们看下面的一个实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attrib, s,fields@attrsclass Point(<span class="built_in">object</span>):    x = attrib()    y = attrib(default=<span class="number">100</span>)<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    point3 = Point(<span class="number">1</span>)    <span class="built_in">print</span>(point3)</span><br></pre></td></tr></table></figure><p><strong>初始化</strong></p><p>如果一个类的某些属性不想参与初始化，比如想直接设置一个初始值，一直固定不变，我们可以将属性的 init 参数设置为 False，看一个实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attrib@attrsclass Point(<span class="built_in">object</span>):    x = attrib(init=<span class="literal">False</span>, default=<span class="number">10</span>)    y = attrib()<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    <span class="built_in">print</span>(Point(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>比如 x 我们只想在初始化的时候设置固定值，不想初始化的时候被改变和设定，我们将其设置了 init 参数为 False，同时设置了一个默认值，如果不设置默认值，默认为 NOTHING。然后初始化的时候我们只传入了一个值，其实也就是为 y 这个属性赋值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Point(x=<span class="number">10</span>, y=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>没什么问题，y 被赋值为了我们设置的值 3。</p><p>那假如我们非要设置 x 呢？会发生什么，比如改写成这样子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Point(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>报错了，</p><p><strong>强制关键字</strong></p><p>强制关键字是 Python 里面的一个特性，在传入的时候必须使用关键字的名字来传入，如果不太理解可以再了解下 Python 的基础。</p><p>设置了强制关键字参数的属性必须要放在后面，其后面不能再有非强制关键字参数的属性，否则会报这样的错误：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ValueError: Non keyword-only attributes are <span class="keyword">not</span> allowed after a keyword-only attribute (unless they are init=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>将最后一个属性设置<code>kw_only 参数</code>为<code>True</code>：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attrib, s,fields@attrsclass Point(<span class="built_in">object</span>):    x = attrib(default=<span class="number">0</span>)    y = attrib(kw_only=<span class="literal">True</span>)<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    point4 = Point(y = <span class="number">12</span>)    <span class="built_in">print</span>(point4)    <span class="comment"># point4 = Point(12)  报错，必须指定y变量名称</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，如果我们将一个属性设置了<code>init</code> 为<code>False</code>，那么<code>kw_only</code>这个参数会被忽略。</p></blockquote><p><strong>验证器</strong></p><p>有时候在设置一个属性的时候必须要满足某个条件，比如性别必须要是男或者女，否则就不合法。对于这种情况，我们就需要有条件来控制某些属性不能为非法值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8from attr import attrs, attrib, s,fieldsdef is_valid_gender(instance,attribute,value):    if value not in [&#x27;male&#x27;,&#x27;female&#x27;]:        raise ValueError(f&#x27;gender &#123;value&#125; is not valid&#x27;)@attrsclass Person(object):    name = attrib()    gender = attrib(validator=is_valid_gender)if __name__ == &#x27;__main__&#x27;:    print(Person(name=&quot;lhh&quot;,gender=&quot;male&quot;))  #正确显示    print(Person(name=&quot;lhh&quot;,gender=&quot;mlea&quot;))   # 报错</span></span><br></pre></td></tr></table></figure><p>在这里我们定义了一个验证器 <code>Validator 方法</code>，叫做 is_valid_gender。<br>然后定义了一个类 Person 还有它的两个属性 name 和 gender，其中 gender 定义的时候传入了一个参数<code>validator</code>，其值就是我们定义的 Validator 方法。</p><p>这个<code>Validator</code>定义的时候有几个固定的参数：</p><ul><li><code>instance</code>：类对象</li><li><code>attribute</code>：属性名</li><li><code>value</code>：属性值</li></ul><p>这是三个参数是固定的，在类初始化的时候，其内部会将这三个参数传递给这个 Validator，因此 Validator 里面就可以接受到这三个值，然后进行判断即可。在 Validator 里面，我们判断如果不是男性或女性，那么就直接抛出错误。</p><p>OK，结果显而易见了，第二个报错了，因为其值不是正常的性别，所以程序直接报错终止。</p><p>注意在 Validator 里面返回 True 或 False 是没用的，错误的值还会被照常复制。所以，一定要在 Validator 里面 raise 某个错误</p><p>另外 attrs 库里面还给我们内置了好多 Validator，比如判断类型，这里我们再增加一个属性 age，必须为 int 类型：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = attrib(validator=validators.instance_of(<span class="built_in">int</span>))</span><br></pre></td></tr></table></figure><p>这时候初始化的时候就必须传入 int 类型，如果为其他类型，则直接抛错：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TypeError: (<span class="string">&quot;&#x27;age&#x27; must be &lt;class &#x27;int&#x27;&gt; (got &#x27;x&#x27; that is a &lt;class &#x27;str&#x27;&gt;).</span></span><br></pre></td></tr></table></figure><p>其它的一些验证器：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8import attrfrom attr import attrs, attrib, s,fields,validatorsimport enumclass State(enum.Enum):    on = &quot;on&quot;    off = &quot;off&quot;@sclass C(object):    state = attr.ib(validator=attr.validators.in_(State))    val = attr.ib(validator=attr.validators.in_([1, 2, 3]))c = C(State.on,1)print(c)# C(state=&lt;State.on: &#x27;on&#x27;&gt;, val=1)c = C(State.off,4)print(c)#   File &quot;&lt;attrs generated init __main__.C&gt;&quot;, line 6, in __init__#  File &quot;D:\Anaconda\envs\gui\lib\site-packages\attr\validators.py&quot;, line 229, in __call__#   raise ValueError(#ValueError: &#x27;val&#x27; must be in [1, 2, 3] (got 4)</span></span><br></pre></td></tr></table></figure><p><strong>转换器</strong></p><p>其实很多时候我们会不小心传入一些形式不太标准的结果，比如本来是 int 类型的 100，我们传入了字符串类型的 100，那这时候直接抛错应该不好吧，所以我们可以设置一些转换器来增强容错机制，比如将字符串自动转为数字等等，看一个实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attribdef to_int(value):    <span class="keyword">if</span> <span class="built_in">isinstance</span>(value,<span class="built_in">str</span>):        <span class="keyword">return</span> <span class="built_in">int</span>(value)@attrsclass Point(<span class="built_in">object</span>):    x = attrib(converter=to_int)    y = attrib()<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    <span class="built_in">print</span>(Point(<span class="string">&quot;10&quot;</span>,<span class="number">10</span>))  <span class="comment"># Point(x=10, y=10)</span></span><br></pre></td></tr></table></figure><p><strong>类型</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attrib@attrsclass Point(<span class="built_in">object</span>):    x = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>)    y = attrib()<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    <span class="built_in">print</span>(Point(<span class="number">100</span>, <span class="number">3</span>))    <span class="built_in">print</span>(Point(<span class="string">&#x27;100&#x27;</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>这里我们将 x 属性定义为 int 类型了，初始化的时候传入了数值型 100 和字符串型 100，结果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Point(x=<span class="number">100</span>, y=<span class="number">3</span>)Point(x=<span class="string">&#x27;100&#x27;</span>, y=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>但我们发现，虽然定义了，但是不会被自动转类型的。</p><p>另外我们还可以自定义 typing 里面的类型，比如 List，另外 attrs 里面也提供了类型的定义：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attrib, Factoryimport typing@attrsclass Point(<span class="built_in">object</span>):    x = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>)    y = attrib(<span class="built_in">type</span>=typing.<span class="type">List</span>[<span class="built_in">int</span>])    z = attrib(<span class="built_in">type</span>=Factory(<span class="built_in">list</span>))</span><br></pre></td></tr></table></figure><p>这里我们引入了 typing 这个包，定义了 y 为 int 数字组成的列表，z 使用了 attrs 里面定义的 Factory 定义了同样为列表类型。</p><h2 id="五、序列转换"><a href="#五、序列转换" class="headerlink" title="五、序列转换"></a>五、序列转换</h2><p>在很多情况下，我们经常会遇到 JSON 等字符串序列和对象互相转换的需求，尤其是在写 REST API、数据库交互的时候。</p><p>attrs 库的存在让我们可以非常方便地定义 Python 类，但是它对于序列字符串的转换功能还是比较薄弱的，<code>cattrs</code> 这个库就是用来弥补这个缺陷的，下面我们再来看看 <code>cattrs 库</code>。</p><p>cattrs 导入的时候名字也不太一样，叫做 cattr，它里面提供了两个主要的方法，叫做 <code>structure</code>和 <code>unstructure</code>，两个方法是相反的，对于类的序列化和反序列化支持非常好。</p><h2 id="六、基本转换"><a href="#六、基本转换" class="headerlink" title="六、基本转换"></a>六、基本转换</h2><p>首先我们来看看基本的转换方法的用法，看一个基本的转换实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cattr <span class="keyword">import</span> structure,unstructurefrom attr <span class="keyword">import</span> attrib, attrs@attrsclass Point(<span class="built_in">object</span>):    x = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">0</span>)    y = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>,default=<span class="number">0</span>)<span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    point = Point(<span class="number">1</span>,<span class="number">2</span>)    <span class="built_in">print</span>(<span class="string">&quot;point&quot;</span>,point)    json = unstructure(point)    <span class="built_in">print</span>(<span class="string">&#x27;json:&#x27;</span>, json)    obj = structure(json, Point)    <span class="built_in">print</span>(<span class="string">&#x27;obj:&#x27;</span>, obj)</span><br></pre></td></tr></table></figure><p>在这里我们定义了一个 Point 对象，然后<code>调用 unstructure 方法</code>即可直接转换为 JSON 字符串。如果我们再想把它转回来，那就需要调用 <code>structure 方法</code>，这样就成功转回了一个 Point 对象。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">point Point(x=<span class="number">1</span>, y=<span class="number">2</span>)json: &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">2</span>&#125;obj: Point(x=<span class="number">1</span>, y=<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="七、多类型转"><a href="#七、多类型转" class="headerlink" title="七、多类型转"></a>七、多类型转</h2><p>另外 structure 也支持一些其他的类型转换，看下实例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(structure(<span class="number">1</span>,<span class="built_in">str</span>))    <span class="built_in">print</span>(structure(<span class="string">&quot;1&quot;</span>, <span class="built_in">float</span>))    <span class="built_in">print</span>(structure([<span class="number">1.0</span>, <span class="number">2</span>, <span class="string">&quot;3&quot;</span>], <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>]))    <span class="built_in">print</span>(structure((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), MutableSequence[<span class="built_in">int</span>]))    <span class="built_in">print</span>(structure((<span class="number">1</span>, <span class="literal">None</span>, <span class="number">3</span>), <span class="type">List</span>[<span class="type">Optional</span>[<span class="built_in">str</span>]]))    <span class="built_in">print</span>(structure([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="type">Set</span>))    <span class="built_in">print</span>(structure([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]], <span class="type">Set</span>[FrozenSet[<span class="built_in">str</span>]]))    <span class="built_in">print</span>(structure(OrderedDict[(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>)], <span class="type">Dict</span>))    <span class="built_in">print</span>(structure([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">str</span>, <span class="built_in">float</span>]))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">11.0</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>][<span class="string">&#x27;1&#x27;</span>, <span class="literal">None</span>, <span class="string">&#x27;3&#x27;</span>]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;&#123;<span class="built_in">frozenset</span>(&#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>&#125;), <span class="built_in">frozenset</span>(&#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;)&#125;</span><br></pre></td></tr></table></figure><p>不过总的来说，大部分情况下，JSON 和对象的互转是用的最多的。</p><h2 id="八、属性处理"><a href="#八、属性处理" class="headerlink" title="八、属性处理"></a>八、属性处理</h2><p>上面的例子都是理想情况下使用的，但在实际情况下，很容易遇到 JSON 和对象不对应的情况，比如 JSON 多个字段，或者对象多个字段。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> attr <span class="keyword">import</span> attrs, attribfrom cattr <span class="keyword">import</span> structure@attrsclass Point(<span class="built_in">object</span>):    x = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)    y = attrib(<span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>)json = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>&#125;json2 = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>&#125;<span class="built_in">print</span>(structure(json,Point))<span class="built_in">print</span>(structure(json2,Point))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Point(x=<span class="number">1</span>, y=<span class="number">2</span>)Point(x=<span class="number">1</span>, y=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】Python之marshmallow</title>
      <link href="/archives/62899.html"/>
      <url>/archives/62899.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>marshmallow是一个用来将复杂的orm对象与python原生数据类型之间相互转换的库，简而言之，就是实现object -&gt; dict， objects -&gt; list, string -&gt; dict 和 string -&gt; list。</p><p>序列化：序列化的意思是将数据对象转化为可存储或可传输的数据类型<br>反序列化：将可存储或可传输的数据类型转化为数据对象</p><p>要进行序列化或反序列化，首先我们需要一个用来操作的object，这里我们先定义一个类：</p></blockquote><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime <span class="keyword">as</span> dt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, email</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.email = email</span><br><span class="line">        self.created_time = dt.datetime.now()</span><br></pre></td></tr></table></figure><h2 id="1、Scheme"><a href="#1、Scheme" class="headerlink" title="1、Scheme"></a>1、Scheme</h2><p>要对一个类或者一个json数据实现相互转换(即序列化和反序列化), 需要一个中间载体, 这个载体就是Schema，另外Schema还可以用来做数据验证。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 这是一个简单的Scheme</span><br><span class="line">from marshmallow <span class="keyword">import</span> Schema, fields</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(Schema):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.Email()</span><br><span class="line">    created_time = fields.DateTime()</span><br></pre></td></tr></table></figure><h2 id="2、Serializing-序列化"><a href="#2、Serializing-序列化" class="headerlink" title="2、Serializing(序列化)"></a>2、Serializing(序列化)</h2><p>使用scheme的dump()方法来序列化对象，返回的是dict格式的数据</p><p>另外schema的dumps()方法序列化对象，返回的是json编码格式的字符串。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user = User(<span class="string">&quot;lhh&quot;</span>,<span class="string">&quot;2432783449@qq.com&quot;</span>)</span><br><span class="line">schema = UserSchema()</span><br><span class="line">res = schema.dump(user)</span><br><span class="line">print(res)</span><br><span class="line"># &#123;<span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;2432783449@qq.com&#x27;</span>, <span class="string">&#x27;created_time&#x27;</span>: <span class="string">&#x27;2021-05-28 20:43:08.946112&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>&#125;  <span class="type">dict</span></span><br><span class="line"></span><br><span class="line"><span class="variable">res2</span> <span class="operator">=</span> schema.dumps(user)</span><br><span class="line">print(res2)</span><br><span class="line"># &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;lhh&quot;</span>, <span class="string">&quot;email&quot;</span>: <span class="string">&quot;2432783449@qq.com&quot;</span>, <span class="string">&quot;created_time&quot;</span>: <span class="string">&quot;2021-05-28 20:45:17.418739&quot;</span>&#125;  json</span><br></pre></td></tr></table></figure><h2 id="3、过滤输出"><a href="#3、过滤输出" class="headerlink" title="3、过滤输出"></a>3、过滤输出</h2><p>当不需要输出所有的字段时，可以在实例化Scheme时，声明only参数，来指定输出：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">summary_schema = UserSchema(only=&#123;<span class="string">&quot;name&quot;</span>,<span class="string">&quot;email&quot;</span>&#125;)</span><br><span class="line">res = summary_schema.dump(user)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h2 id="4、Deserializing（反序列化）"><a href="#4、Deserializing（反序列化）" class="headerlink" title="4、Deserializing（反序列化）"></a>4、Deserializing（反序列化）</h2><p>schema的load()方法与dump()方法相反，用于dict类型的反序列化。他将输入的字典格式数据转换成应用层数据结构。他也能起到验证输入的字典格式数据的作用。<br>同样，也有对json解码的loads()方法。用于string类型的反序列化。<br>默认情况下，load()方法返回一个字典，当输入的数据的值不匹配字段类型时，抛出 ValidationError 异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user_data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;lhh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;2432783449@qq.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;created_time&quot;</span>: <span class="string">&quot;2021-05-28 20:45:17.418739&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">schema = UserSchema()</span><br><span class="line">res = schema.load(user_data)</span><br><span class="line">print(res)</span><br><span class="line"># &#123;<span class="string">&#x27;created_time&#x27;</span>: <span class="string">&#x27;2021-05-28 20:45:17.418739&#x27;</span>, <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;2432783449@qq.com&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>对反序列化而言, 将传入的dict变成object更加有意义. 在Marshmallow中, dict -&gt; object的方法需要自己实现, 然后在该方法前面加上一个装饰器post_load即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(Schema):</span><br><span class="line">    name = fields.String()</span><br><span class="line">    email = fields.Email()</span><br><span class="line">    created_time = fields.DateTime()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@post_load</span></span><br><span class="line">    def <span class="title function_">make_user</span><span class="params">(self, data)</span>:</span><br><span class="line">        <span class="keyword">return</span> User(**data)</span><br></pre></td></tr></table></figure><p>这样每次调用load()方法时, 会按照make_user的逻辑, 返回一个User类对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user_data = &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;lhh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;2432783449@qq.com&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">schema = UserSchema()</span><br><span class="line">res = schema.load(user_data)</span><br><span class="line">print(res)</span><br><span class="line"># &lt;__main__.User object at <span class="number">0x0000027BE9678128</span>&gt;</span><br><span class="line">user = res</span><br><span class="line"><span class="title function_">print</span><span class="params">(<span class="string">&quot;name: &#123;&#125;    email: &#123;&#125;&quot;</span>.format(user.name, user.email)</span>)</span><br><span class="line"># name: lhh    email: <span class="number">2432783449</span><span class="meta">@qq</span>.com</span><br></pre></td></tr></table></figure><h2 id="5、处理多个对象的集合"><a href="#5、处理多个对象的集合" class="headerlink" title="5、处理多个对象的集合"></a>5、处理多个对象的集合</h2><p>多个对象的集合如果是可迭代的，那么也可以直接对这个集合进行序列化或者反序列化。在实例化Scheme类时设置参数many=True</p><p>也可以不在实例化类的时候设置，而在调用dump()方法的时候传入这个参数。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user1 = User(name=<span class="string">&quot;lhh1&quot;</span>, email=<span class="string">&quot;2432783449@qq.com&quot;</span>)</span><br><span class="line">user2 = User(name=<span class="string">&quot;lhh2&quot;</span>, email=<span class="string">&quot;2432783449@qq.com&quot;</span>)</span><br><span class="line">users = [user1, user2]</span><br><span class="line"></span><br><span class="line"># 第一种方法</span><br><span class="line">schema = UserSchema(many=True)</span><br><span class="line">res = schema.dump(users)</span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"># 第二种方法</span><br><span class="line">schema = UserSchema()</span><br><span class="line">res = schema.dump(users,many=True)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h2 id="6、Validation-验证"><a href="#6、Validation-验证" class="headerlink" title="6、Validation(验证)"></a>6、Validation(验证)</h2><p>当不合法的数据通过Schema.load()或者Schema.loads()时，会抛出一个 ValidationError 异常。ValidationError.messages属性有验证错误信息，验证通过的数据在 ValidationError.valid_data 属性中<br>我们捕获这个异常，然后做异常处理。首先需要导入ValidationError这个异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">from marshmallow <span class="keyword">import</span> Schema,fields,ValidationErrorclass <span class="title function_">UserSchema</span><span class="params">(Schema)</span>:    name = fields.String()    email = fields.Email()    created_time = fields.DateTime()<span class="keyword">try</span>:    res = UserSchema().load(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lhh&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;lhh&quot;</span>&#125;)except ValidationError as e:    print(f<span class="string">&quot;错误信息：&#123;e.messages&#125;  合法数据:&#123;e.valid_data&#125;&quot;</span>)<span class="string">&#x27;&#x27;</span><span class="string">&#x27;    当验证一个数据集合的时候，返回的错误信息会以 错误序号-错误信息 的键值对形式保存在errors中&#x27;</span><span class="string">&#x27;&#x27;</span>user_data = [    &#123;<span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;2432783449@qq.com&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lhh&#x27;</span>&#125;,    &#123;<span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;invalid&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Invalid&#x27;</span>&#125;,    &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;wcy&#x27;</span>&#125;,    &#123;<span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;2432783449@qq.com&#x27;</span>&#125;,]<span class="keyword">try</span>:    schema = UserSchema(many=True)    res = schema.load(user_data)    print(res)except ValidationError as e:    print(<span class="string">&quot;错误信息：&#123;&#125;   合法数据：&#123;&#125;&quot;</span>.format(e.messages, e.valid_data))</span><br></pre></td></tr></table></figure><p>可以看到上面，有错误信息，但是对于没有传入的属性则没有检查，也就是说没有规定属性必须传入。</p><p>在Schema里规定不可缺省字段：设置参数required=True</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">可以看到上面，有错误信息，但是对于没有传入的属性则没有检查，也就是说没有规定属性必须传入。在Schema里规定不可缺省字段：设置参数required=True</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-1-自定义验证信息"><a href="#6-1-自定义验证信息" class="headerlink" title="6.1  自定义验证信息"></a>6.1  自定义验证信息</h3><p>在编写Schema类的时候，可以向内建的fields中设置validate参数的值来定制验证的逻辑, validate的值可以是函数, 匿名函数lambda, 或者是定义了<strong>call</strong>的对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">from marshmallow <span class="keyword">import</span> Schema,fields,ValidationErrorclass <span class="title function_">UserSchema</span><span class="params">(Schema)</span>:    name = fields.String(required=True, validate=lambda s:len(s) &lt; <span class="number">6</span>)    email = fields.Email()    created_time = fields.DateTime()        user_data = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;InvalidName&quot;</span>,<span class="string">&quot;email&quot;</span>:<span class="string">&quot;2432783449@qq.com&quot;</span>&#125;<span class="keyword">try</span>:    res = UserSchema().load(user_data)except ValidationError as e:    print(e.messages)</span><br></pre></td></tr></table></figure><p><strong>在验证函数中自定义异常信息：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8from marshmallow import Schema,fields,ValidationErrordef validate_name(name):    if len(name) &lt;=2:        raise ValidationError(&quot;name长度必须大于2位&quot;)    if len(name) &gt;= 6:        raise ValidationError(&quot;name长度不能大于6位&quot;)class UserSchema(Schema):    name = fields.String(required=True, validate=validate_name)    email = fields.Email()    created_time = fields.DateTime()user_data = &#123;&quot;name&quot;:&quot;InvalidName&quot;,&quot;email&quot;:&quot;2432783449@qq.com&quot;&#125;try:    res = UserSchema().load(user_data)except ValidationError as e:    print(e.messages)</span></span><br></pre></td></tr></table></figure><p><code>注意</code>：只会在反序列化的时候发生验证！序列化的时候不会验证！</p><h3 id="6-2-将验证函数写在Schema中变成验证方法"><a href="#6-2-将验证函数写在Schema中变成验证方法" class="headerlink" title="6.2 将验证函数写在Schema中变成验证方法"></a>6.2 将验证函数写在Schema中变成验证方法</h3><p>在Schema中，使用validates装饰器就可以注册验证方法。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8from marshmallow import Schema, fields, ValidationError, validatesclass UserSchema(Schema):    name = fields.String(required=True)    email = fields.Email()    created_time = fields.DateTime()    @validates(&quot;name&quot;)    def validate_name(self, value):        if len(value) &lt;= 2:            raise ValidationError(&quot;name长度必须大于2位&quot;)        if len(value) &gt;= 6:            raise ValidationError(&quot;name长度不能大于6位&quot;)user_data = &#123;&quot;name&quot;:&quot;InvalidName&quot;,&quot;email&quot;:&quot;2432783449@qq.com&quot;&#125;try:    res = UserSchema().load(user_data)except ValidationError as e:    print(e.messages)</span></span><br></pre></td></tr></table></figure><h3 id="6-3-Required-Fields-必填选项"><a href="#6-3-Required-Fields-必填选项" class="headerlink" title="6.3 Required Fields(必填选项)"></a>6.3 Required Fields(必填选项)</h3><p>上面已经简单使用过required参数了。这里再简单介绍一下。</p><p><strong>自定义required异常信息：</strong></p><p>首先我们可以自定义在requird=True时缺失字段时抛出的异常信息：设置参数error_messages的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8from marshmallow import Schema, fields, ValidationError, validatesclass UserSchema(Schema):    name = fields.String(required=True, error_messages=&#123;&quot;required&quot;:&quot;name字段必须的&quot;&#125;)    email = fields.Email()    created_time = fields.DateTime()    @validates(&quot;name&quot;)    def validate_name(self, value):        if len(value) &lt;= 2:            raise ValidationError(&quot;name长度必须大于2位&quot;)        if len(value) &gt;= 6:            raise ValidationError(&quot;name长度不能大于6位&quot;)user_data = &#123;&quot;email&quot;:&quot;2432783449@qq.com&quot;&#125;try:    res = UserSchema().load(user_data)except ValidationError as e:    print(e.messages)</span></span><br></pre></td></tr></table></figure><p><strong>忽略部分字段：</strong></p><p>使用required之后我们还是可以在传入数据的时候忽略这个必填字段。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#encoding=utf-8from marshmallow <span class="keyword">import</span> Schema, fields, ValidationError, validatesclass <span class="title function_">UserSchema</span><span class="params">(Schema)</span>:    name = fields.String(required=True)    age = fields.Integer(required=True)# 方法一：在load()方法设置partial参数的值（元组），表时忽略那些字段。schema = UserSchema()res = schema.load(&#123;<span class="string">&quot;age&quot;</span>: <span class="number">42</span>&#125;, partial=(<span class="string">&quot;name&quot;</span>,))print(res)# &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">42</span>&#125;# 方法二：直接设置partial=Trueschema = UserSchema()res = schema.load(&#123;<span class="string">&quot;age&quot;</span>: <span class="number">42</span>&#125;, partial=True)print(res)# &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">42</span>&#125;</span><br></pre></td></tr></table></figure><p>看起来两种方法是一样的，但是方法一和方法二有区别：方法一只忽略传入partial的字段，方法二会忽略除前面传入的数据里已有的字段之外的所有字段</p><h3 id="6-4-对未知字段的处理"><a href="#6-4-对未知字段的处理" class="headerlink" title="6.4 对未知字段的处理"></a>6.4 对未知字段的处理</h3><p>默认情况下，如果传入了未知的字段（Schema里没有的字段），执行load()方法会抛出一个 ValidationError 异常。这种行为可以通过更改 unknown 选项来修改。</p><p>unknown 有三个值：</p><ul><li>EXCLUDE: exclude unknown fields(直接扔掉未知字段)</li><li>INCLUDE: accept and include the unknown fields（接受未知字段）</li><li>RAISE: raise a ValidationError if there are any unknown fields（抛出异常）</li></ul><p>我们可以看到，默认的行为就是RAISE。有两种方法去更改：</p><p>方法一：在编写Schema类的时候在class Meta里修改</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> EXCLUDE,Schema,fieldsclass UserSchema(Schema):    name = fields.String(required=<span class="literal">True</span>,error_messages=&#123;<span class="string">&quot;required&quot;</span>: <span class="string">&quot;name字段必须填写&quot;</span>&#125;)    email = fields.Email()    created_time = fields.DateTime()    <span class="keyword">class</span> <span class="title class_">Meta</span>:        unknown  = EXCLUDE</span><br></pre></td></tr></table></figure><p>方法二：在实例化Schema类的时候设置参数unknown的值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):    name = fields.Str(required=<span class="literal">True</span>, error_messages=&#123;<span class="string">&quot;required&quot;</span>: <span class="string">&quot;name字段必须填写&quot;</span>&#125;)    email = fields.Email()    created_time = fields.DateTime()shema = UserSchema(unknown=EXCLUDE)</span><br></pre></td></tr></table></figure><h2 id="7、Schema-validate-校验数据"><a href="#7、Schema-validate-校验数据" class="headerlink" title="7、Schema.validate(校验数据)"></a>7、Schema.validate(校验数据)</h2><p>如果只是想用Schema去验证数据, 而不进行反序列化生成对象, 可以使用Schema.validate()<br>可以看到, 通过schema.validate()会自动对数据进行校验, 如果有错误, 则会返回错误信息的dict,没有错误则返回空的dict，通过返回的数据, 我们就可以确认验证是否通过.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8from marshmallow import Schema,fields,ValidationErrorclass UserSchema(Schema):    name = fields.Str(required=True, error_messages=&#123;&quot;required&quot;: &quot;name字段必须填写&quot;&#125;)    email = fields.Email()    created_time = fields.DateTime()user = &#123;&quot;name&quot;:&quot;lhh&quot;,&quot;email&quot;:&quot;2432783449&quot;&#125;schema = UserSchema()res = schema.validate(user)print(res)  # &#123;&#x27;email&#x27;: [&#x27;Not a valid email address.&#x27;]&#125;user = &#123;&quot;name&quot;:&quot;lhh&quot;,&quot;email&quot;:&quot;2432783449@qq.com&quot;&#125;schema = UserSchema()res = schema.validate(user)print(res)  # &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="8-Specifying-Serialization-Deserialization-Keys（指定序列化-反序列化键）"><a href="#8-Specifying-Serialization-Deserialization-Keys（指定序列化-反序列化键）" class="headerlink" title="8. Specifying Serialization/Deserialization Keys（指定序列化/反序列化键）"></a>8. Specifying Serialization/Deserialization Keys（指定序列化/反序列化键）</h2><h3 id="8-1-Specifying-Attribute-Names（序列化时指定object属性对应fields字段）"><a href="#8-1-Specifying-Attribute-Names（序列化时指定object属性对应fields字段）" class="headerlink" title="8.1 Specifying Attribute Names（序列化时指定object属性对应fields字段）"></a>8.1 Specifying Attribute Names（序列化时指定object属性对应fields字段）</h3><p>Schema默认会序列化传入对象和自身定义的fields相同的属性, 然而你也会有需求使用不同的fields和属性名. 在这种情况下, 你需要明确定义这个fields将从什么属性名取值</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> fields,Schema,ValidationErrorimport datetime <span class="keyword">as</span> dtclass User:    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, email</span>):        self.name = name        self.email = email        self.created_time = dt.datetime.now()<span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):    full_name = fields.String(attribute=<span class="string">&quot;name&quot;</span>)    email_address = fields.Email(attribute=<span class="string">&quot;email&quot;</span>)    created_at = fields.DateTime(attribute=<span class="string">&quot;created_time&quot;</span>)user = User(<span class="string">&quot;lhh&quot;</span>,email=<span class="string">&quot;2432783449@qq.com&quot;</span>)schema = UserSchema()res = schema.dump(user)<span class="built_in">print</span>(res)<span class="comment"># &#123;&#x27;email_address&#x27;: &#x27;2432783449@qq.com&#x27;, &#x27;full_name&#x27;: &#x27;lhh&#x27;, &#x27;created_at&#x27;: &#x27;2021-05-29T09:24:38.186191&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>如上所示：UserSchema中的full_name，email_address，created_at分别从User对象的name，email，created_time属性取值。</p><h3 id="8-2-反序列化时指定fields字段对应object属性"><a href="#8-2-反序列化时指定fields字段对应object属性" class="headerlink" title="8.2 反序列化时指定fields字段对应object属性"></a>8.2 反序列化时指定fields字段对应object属性</h3><p>这个与上面相反，Schema默认反序列化传入字典和输出字典中相同的字段名. 如果你觉得数据不匹配你的schema, 可以传入load_from参数指定需要增加load的字段名(原字段名也能load, 且优先load原字段名)</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> fields,Schema,ValidationErrorimport datetime <span class="keyword">as</span> dtclass UserSchema(Schema):    full_name = fields.String(load_from=<span class="string">&quot;name&quot;</span>)    email_address = fields.Email(load_from=<span class="string">&quot;email&quot;</span>)    created_at = fields.DateTime(load_from=<span class="string">&quot;created_time&quot;</span>)user = &#123;<span class="string">&quot;full_name&quot;</span>:<span class="string">&quot;lhh&quot;</span>,<span class="string">&quot;email_address&quot;</span>:<span class="string">&quot;2432783449@qq.com&quot;</span>&#125;schema = UserSchema()res = schema.load(user)<span class="built_in">print</span>(res)<span class="comment"># &#123;&#x27;full_name&#x27;: &#x27;lhh&#x27;, &#x27;email_address&#x27;: &#x27;2432783449@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-让key同时满足序列化与反序列化的方法"><a href="#8-3-让key同时满足序列化与反序列化的方法" class="headerlink" title="8.3 让key同时满足序列化与反序列化的方法"></a>8.3 让key同时满足序列化与反序列化的方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8from marshmallow import fields,ValidationError,Schemaclass UserSchema(Schema):    full_name = fields.String(data_key=&quot;name&quot;)    email_address = fields.Email(data_key=&quot;email&quot;)    created_at = fields.DateTime(data_key=&quot;created_time&quot;)# 序列化user = &#123;&quot;full_name&quot;: &quot;lhh&quot;, &quot;email_address&quot;: &quot;2432783449@qq.com&quot;&#125;schema = UserSchema()res = schema.dump(user)print(res)# &#123;&#x27;name&#x27;: &#x27;lhh&#x27;, &#x27;email&#x27;: &#x27;2432783449@qq.com&#x27;&#125;# 反序列化user = &#123;&#x27;name&#x27;: &#x27;lhh&#x27;, &#x27;email&#x27;: &#x27;2432783449@qq.com&#x27;&#125;schema = UserSchema()res = schema.load(user)print(res)# &#123;&#x27;full_name&#x27;: &#x27;lhh&#x27;, &#x27;email_address&#x27;: &#x27;2432783449@qq.com&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="9-重构：创建隐式字段"><a href="#9-重构：创建隐式字段" class="headerlink" title="9. 重构：创建隐式字段"></a>9. 重构：创建隐式字段</h2><p>当Schema具有许多属性时，为每个属性指定字段类型可能会重复，特别是当许多属性已经是本地python的数据类型时。class Meta允许指定要序列化的属性，marshmallow将根据属性的类型选择适当的字段类型。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重构Schemaclass UserSchema(Schema):    uppername = fields.Function(lambda obj: obj.name.upper())    class Meta:        fields = (&quot;name&quot;, &quot;email&quot;, &quot;created_at&quot;, &quot;uppername&quot;)</span></span><br></pre></td></tr></table></figure><p>以上代码中， name将自动被格式化为String类型，created_at将被格式化为DateTime类型。</p><p>如果您希望指定除了显式声明的字段之外还包括哪些字段名，则可以使用附加选项。如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):    uppername = fields.Function(<span class="keyword">lambda</span> obj: obj.name.upper())    <span class="keyword">class</span> <span class="title class_">Meta</span>:        <span class="comment"># No need to include &#x27;uppername&#x27;        additional = (&quot;name&quot;, &quot;email&quot;, &quot;created_at&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="10-排序"><a href="#10-排序" class="headerlink" title="10. 排序"></a>10. 排序</h2><p>对于某些用例，维护序列化输出的字段顺序可能很有用。要启用排序，请将ordered选项设置为true。这将指示marshmallow将数据序列化到<code>collections.OrderedDict</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDictimport datetime <span class="keyword">as</span> dtfrom marshmallow <span class="keyword">import</span> fields,ValidationError,Schemaclass User:    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, email</span>):        self.name = name        self.email = email        self.created_time = dt.datetime.now()<span class="keyword">class</span> <span class="title class_">UserSchema</span>(<span class="title class_ inherited__">Schema</span>):    uppername = fields.Function(<span class="keyword">lambda</span> obj: obj.name.upper())    <span class="keyword">class</span> <span class="title class_">Meta</span>:        fields = (<span class="string">&quot;name&quot;</span>, <span class="string">&quot;email&quot;</span>, <span class="string">&quot;created_time&quot;</span>, <span class="string">&quot;uppername&quot;</span>)        ordered = Trueuser = User(<span class="string">&quot;lhh&quot;</span>, <span class="string">&quot;2432783449@qq.com&quot;</span>)schema = UserSchema()res = schema.dump(user)<span class="built_in">print</span>(<span class="built_in">isinstance</span>(res,OrderedDict))  <span class="comment"># 判断变量类型# Trueprint(res)# OrderedDict([(&#x27;name&#x27;, &#x27;lhh&#x27;), (&#x27;email&#x27;, &#x27;2432783449@qq.com&#x27;), (&#x27;created_time&#x27;, &#x27;2021-05-29T09:40:46.351382&#x27;), (&#x27;uppername&#x27;, &#x27;LHH&#x27;)])</span></span><br></pre></td></tr></table></figure><h2 id="11-“只读”与“只写”字段"><a href="#11-“只读”与“只写”字段" class="headerlink" title="11. “只读”与“只写”字段"></a>11. “只读”与“只写”字段</h2><p>在Web API的上下文中，序列化参数dump_only和反序列化参数load_only在概念上分别等同于只读和只写字段。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema,fieldsclass UserSchema(Schema):    name = fields.Str()    password = fields.Str(load_only=<span class="literal">True</span>)  <span class="comment"># 等于只写    created_at = fields.DateTime(dump_only=True)  # 等于只读</span></span><br></pre></td></tr></table></figure><p>load时，dump_only字段被视为未知字段。如果unknown选项设置为include，则与这些字段对应的键的值将因此loaded而不进行验证。</p><h2 id="12-序列化-反序列化时指定字段的默认值"><a href="#12-序列化-反序列化时指定字段的默认值" class="headerlink" title="12. 序列化/反序列化时指定字段的默认值"></a>12. 序列化/反序列化时指定字段的默认值</h2><p>序列化时输入值缺失用default指定默认值。反序列化时输入值缺失用missing指定默认值。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8import uuidimport datetime as dtfrom marshmallow import fields,ValidationError,Schemaclass UserSchema(Schema):    id = fields.UUID(missing=uuid.uuid1)    birthday = fields.DateTime(default=dt.datetime(1996,11,17))# 序列化res = UserSchema().dump(&#123;&#125;)print(res)# &#123;&#x27;birthday&#x27;: &#x27;1996-11-17T00:00:00&#x27;&#125;# 反序列化res = UserSchema().load(&#123;&#x27;birthday&#x27;: &#x27;1996-11-17T00:00:00&#x27;&#125;)print(res)# &#123;&#x27;id&#x27;: UUID(&#x27;751d95db-c020-11eb-83eb-001a7dda7115&#x27;), &#x27;birthday&#x27;: datetime.datetime(1996, 11, 17, 0, 0)&#125;</span></span><br></pre></td></tr></table></figure><h2 id="13-后续扩展"><a href="#13-后续扩展" class="headerlink" title="13. 后续扩展"></a>13. 后续扩展</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> marshmallow <span class="keyword">import</span> Schema, fieldsclass String128(fields.String):    <span class="string">&quot;&quot;&quot;    长度为128的字符串类型    &quot;&quot;&quot;</span>    default_error_messages = &#123;        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;该字段只能是字符串类型&quot;</span>,        <span class="string">&quot;invalid&quot;</span>: <span class="string">&quot;该字符串长度必须大于6&quot;</span>,    &#125;    <span class="keyword">def</span> <span class="title function_">_deserialize</span>(<span class="params">self, value, attr, data, **kwargs</span>):        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(value, <span class="built_in">str</span>):            self.fail(<span class="string">&quot;type&quot;</span>)        <span class="keyword">if</span> <span class="built_in">len</span>(value) &lt; <span class="number">6</span>:            self.fail(<span class="string">&quot;invalid&quot;</span>)<span class="keyword">class</span> <span class="title class_">AppSchema</span>(<span class="title class_ inherited__">Schema</span>):    name = String128(required=<span class="literal">True</span>)    priority = fields.Integer()    obj_type = String128()    link = String128()    deploy = fields.<span class="type">Dict</span>()    description = fields.String()    projects = fields.<span class="type">List</span>(cls_or_instance=fields.<span class="type">Dict</span>)app = &#123;    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;app11&quot;</span>,    <span class="string">&quot;priority&quot;</span>: <span class="number">2</span>,    <span class="string">&quot;obj_type&quot;</span>: <span class="string">&quot;web&quot;</span>,    <span class="string">&quot;link&quot;</span>: <span class="string">&quot;123.123.00.2&quot;</span>,    <span class="string">&quot;deploy&quot;</span>: &#123;<span class="string">&quot;deploy1&quot;</span>: <span class="string">&quot;deploy1&quot;</span>, <span class="string">&quot;deploy2&quot;</span>: <span class="string">&quot;deploy2&quot;</span>&#125;,    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;app111 test111&quot;</span>,    <span class="string">&quot;projects&quot;</span>: [&#123;<span class="string">&quot;id&quot;</span>: <span class="number">2</span>&#125;]&#125;schema = AppSchema()res = schema.validate(app)<span class="built_in">print</span>(res)<span class="comment"># &#123;&#x27;obj_type&#x27;: [&#x27;该字符串长度必须大于6&#x27;], &#x27;name&#x27;: [&#x27;该字符串长度必须大于6&#x27;]&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】Python文件监控</title>
      <link href="/archives/8422.html"/>
      <url>/archives/8422.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>Windows环境下打开Cmd(开始—运行—CMD)，苹果系统环境下请打开Terminal(command+空格输入Terminal)，准备开始输入命令安装依赖。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install watchdog</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>主要分为以下几个关键步骤：</p><ul><li>1.配置各项信息；</li><li>2.生成事件处理器、监控器；</li><li>3.注册事件处理器、配置目录、递归执行（即同时监控子文件夹）；</li><li>4:启动。</li></ul><p>具体实现代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> LoggingEventHandler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># cmd 输入 python 脚本地址  监听文件路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    path = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成事件处理器对象</span></span><br><span class="line">    event_handler = LoggingEventHandler()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成监控器对象</span></span><br><span class="line">    observer = Observer()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册事件处理器，配置监控目录</span></span><br><span class="line">    observer.schedule(event_handler, path, recursive=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监控器启动-创建线程</span></span><br><span class="line">    observer.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下代码是为了保证主线程运行</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        observer.join()</span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><p>cmd 输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python F:\PycharmProjects\Pytorch_frame\python\python基础代码练习\文件监听\listen.py e:/test</span><br></pre></td></tr></table></figure><p>结果示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/Python%E6%96%87%E4%BB%B6%E7%9B%91%E6%8E%A7.png" alt="image-20210512143252524"></p><p>对文件的操作，增加，或者删除，或者修改，都会有有日志记录</p><h2 id="三、-监控文件变化"><a href="#三、-监控文件变化" class="headerlink" title="三、 监控文件变化"></a>三、 监控文件变化</h2><p>实现自动提取文件高潮部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> watchdog.observers <span class="keyword">import</span> Observer</span><br><span class="line"><span class="keyword">from</span> watchdog.events <span class="keyword">import</span> LoggingEventHandler</span><br><span class="line"><span class="keyword">from</span> pychorus <span class="keyword">import</span> find_and_output_chorus</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动提取音乐文件中的高潮部分</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">extractor</span>(<span class="title class_ inherited__">LoggingEventHandler</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_created</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="built_in">super</span>(LoggingEventHandler, self).on_created(event)</span><br><span class="line">        what = <span class="string">&#x27;directory&#x27;</span> <span class="keyword">if</span> event.is_directory <span class="keyword">else</span> <span class="string">&#x27;file&#x27;</span></span><br><span class="line">        logging.info(<span class="string">&#x27;Created %s: %s&#x27;</span>, what, event.src_path)</span><br><span class="line">        NameExt = event.src_path.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> NameExt[-<span class="number">1</span>] == <span class="string">&#x27;mp3&#x27;</span>:</span><br><span class="line">            logging.info(<span class="string">&quot;mp3文件，提取音乐高潮中&quot;</span>)</span><br><span class="line">            output_path = <span class="string">&quot;test_high.wav&quot;</span></span><br><span class="line">            find_and_output_chorus(event.src_path, output_path, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># cmd 输入 python 脚本地址  监听文件路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(message)s&#x27;</span>, datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    path = sys.argv[<span class="number">1</span>] <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成事件处理器对象</span></span><br><span class="line">    <span class="comment"># event_handler = LoggingEventHandler()</span></span><br><span class="line">    event_handler = extractor()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成监控器对象</span></span><br><span class="line">    observer = Observer()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 注册事件处理器，配置监控目录</span></span><br><span class="line">    observer.schedule(event_handler, path, recursive=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 监控器启动-创建线程</span></span><br><span class="line">    observer.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 以下代码是为了保证主线程运行</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        observer.stop()</span><br><span class="line"></span><br><span class="line">    observer.join()</span><br></pre></td></tr></table></figure><p><img src="https://mmbiz.qpic.cn/mmbiz_png/h6NqozYcCQ76YR3XHOfh21JLia7tWXZxvznKlVElicDic3aW8m1BtIHgQmTDYPex3sSBjjRiathVEjTJSJUeib3VeDQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】pyecharts可视化（史上最全）</title>
      <link href="/archives/16689.html"/>
      <url>/archives/16689.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><a href="https://github.com/ecomfe/echarts">Echarts</a> 是一个由百度开源的数据可视化，凭借着良好的交互性，精巧的图表设计，得到了众多开发者的认可。而 Python 是一门富有表达力的语言，很适合用于数据处理。当数据分析遇上数据可视化时，<a href="https://github.com/pyecharts/pyecharts">pyecharts</a> 诞生了。</p><span id="more"></span><ul><li><p>简洁的 API 设计，使用如丝滑般流畅，支持链式调用</p></li><li><p>囊括了 30+ 种常见图表，应有尽有</p></li><li><p>支持主流 Notebook 环境，Jupyter Notebook 和 JupyterLab</p></li><li><p>可轻松集成至 Flask，Django 等主流 Web 框架</p></li><li><p>高度灵活的配置项，可轻松搭配出精美的图表</p></li><li><p>详细的文档和示例，帮助开发者更快的上手项目</p></li><li><p>多达 400+ 地图文件以及原生的百度地图，为地理数据可视化提供强有力的支持</p><p><a href="https://pyecharts.org/#/zh-cn/intro">官网链接</a></p></li></ul><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pyecharts</span><br></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyecharts</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pyecharts.__version__)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> PyEcharts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】matplotlib教程大全</title>
      <link href="/archives/16690.html"/>
      <url>/archives/16690.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、初识matplotlib"><a href="#一、初识matplotlib" class="headerlink" title="一、初识matplotlib"></a>一、初识matplotlib</h2><h3 id="1-1-核心原理"><a href="#1-1-核心原理" class="headerlink" title="1.1 核心原理"></a>1.1 核心原理</h3><p>使用<code>matplotlib</code>绘图的原理，主要就是理解<code>figure</code>(<strong>画布</strong>)、<code>axes</code>(<strong>坐标系</strong>)、<code>axis</code>(<strong>坐标轴</strong>)三者之间的关系。</p><span id="more"></span><p><img src="http://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTQ5NzAzOC8yMDIwMDUvMTQ5NzAzOC0yMDIwMDUxMTEzNTMyNDY1Ni00NDM5MjY3OTcuanBn?x-oss-process=image/format,png" alt="img"></p><p>下面这幅图更详细：</p><p><img src="http://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTQ5NzAzOC8yMDIwMDUvMTQ5NzAzOC0yMDIwMDUxMTEzNTMzNTYzNi04Mjk4OTY1NDYuanBn?x-oss-process=image/format,png" alt="img"></p><p><code>matplotlib</code>中，就是需要指定<code>axes</code>(<strong>坐标系</strong>)，每一个<code>axes</code>(<strong>坐标系</strong>)相当于一张画布上的一块区域。一张画布上，可以分配不同区域，也就是说，一张画布，可以指定多个<code>axes</code>(<strong>坐标系</strong>)。</p><blockquote><p> 一个<code>figure</code>(画布)上，可以有多个区域<code>axes</code>(<strong>坐标系</strong>)，我们在每个坐标系上绘图，也就是说每个<code>axes</code>(<strong>坐标系</strong>)中，都有一个<code>axis</code>(<strong>坐标轴</strong>)。</p><p>特别注意：在<code>matplotlib</code>中，<code>figure</code><strong>画布</strong>和<code>axes</code><strong>坐标轴</strong>并不能显示的看见，我们能够看到的就是一个<code>axis</code><strong>坐标轴</strong>的各种图形。</p></blockquote><h3 id="1-2-基本使用"><a href="#1-2-基本使用" class="headerlink" title="1.2 基本使用"></a>1.2 基本使用</h3><h4 id="1-2-1-创建figure-画布-的两种方式"><a href="#1-2-1-创建figure-画布-的两种方式" class="headerlink" title="1.2.1 创建figure(画布)的两种方式"></a>1.2.1 创建figure(画布)的两种方式</h4><h5 id="1-2-1-1-隐式创建figure对象"><a href="#1-2-1-1-隐式创建figure对象" class="headerlink" title="1.2.1.1 隐式创建figure对象"></a>1.2.1.1 隐式创建figure对象</h5><p>当第一次执行<code>plt.xxx()</code>画图代码时，系统会去判断是否已经有了<code>figure</code>对象，如果没有，系统会自动创建一个<code>figure</code>对象，并且在这个<code>figure</code>之上，自动创建一个<code>axes</code>坐标系。</p><p>【注意】默认创建一个<code>figure</code>对象，一个<code>axes</code>坐标系</p><p>也就是说，如果我们不设置<code>figure</code><strong>对象</strong>，那么一个<code>figure</code><strong>对象</strong>上，只能有一个<code>axes</code><strong>坐标系</strong>，即我们只能绘制一个图形。</p><p>隐式创建figure对象存在的问题</p><p>优势：如果只是绘制一个小图形，那么直接使用plt.xxx()的方式，会自动帮我们创建一个figure对象和一个axes坐标系，这个图形最终就是绘制在这个axes坐标系之上的。</p><p>劣势：如果我们想要在一个figure对象上，绘制多个图形，那么我们就必须拿到每个个axes对象，然后调用每个位置上的axes对象，就可以在每个对应位置的坐标系上，进行绘图，如下图所示。注意：如果figure对象是被默认创建的，那么我们根本拿不到axes对象。因此，需要我们显示创建figure对象。</p><h5 id="1-2-1-2-显示创建figure对象"><a href="#1-2-1-2-显示创建figure对象" class="headerlink" title="1.2.1.2  显示创建figure对象"></a>1.2.1.2  显示创建figure对象</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">axes1 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">axes2 = fig.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib01.png" alt="image-20210602211338614"></p><p>案例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">figure = plt.figure()</span><br><span class="line">axes1 = figure.add_subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">axes2 = figure.add_subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">axes1.plot([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>], [<span class="number">4</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">8</span>])</span><br><span class="line">axes2.plot([<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">2</span>])</span><br><span class="line">figure.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib02.png" alt="image-20210602211530337"></p><h4 id="1-2-2-完整的绘图步骤"><a href="#1-2-2-完整的绘图步骤" class="headerlink" title="1.2.2 完整的绘图步骤"></a>1.2.2 完整的绘图步骤</h4><p>1.<strong>导库</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>2.创建figure画布对象<br>如果绘制一个简单的小图形，我们可以不设置figure对象，使用默认创建的figure对象，当然我们也可以显示创建figure对象。如果一张figure画布上，需要绘制多个图形。那么就必须显示的创建figure对象，然后得到每个位置上的axes对象，进行对应位置上的图形绘制。</p><p>3.<strong>根据<code>figure</code>对象进行布局设置</strong></p><p>4.<strong>获取对应位置子图的<code>axes</code>坐标系对象</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">figure = plt.figure()</span><br><span class="line">axes1 = figure.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">axes2 = figure.add_subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>5.<strong>调用<code>axes</code>对象，进行对应位置的图形绘制</strong></p><p>这一步，是我们传入数据，进行绘图的一步。对于图形的一些细节设置，都可以在这一步进行。</p><p>6.<strong>显示图形</strong></p><p><code>plt.show()</code>或<code>figure.show()</code>如果在<strong>PyCharm</strong>中绘图的话，必须要加这句代码，才能显示。如果在notebook中进行绘图，可以不用加这句代码，而是自动显示。</p><h2 id="二、matplotlib常用函数"><a href="#二、matplotlib常用函数" class="headerlink" title="二、matplotlib常用函数"></a>二、matplotlib常用函数</h2><h3 id="2-1-绘制图表组成元素的主要函数"><a href="#2-1-绘制图表组成元素的主要函数" class="headerlink" title="2.1  绘制图表组成元素的主要函数"></a>2.1  绘制图表组成元素的主要函数</h3><h4 id="2-1-1-plot-——展现量的变化趋势"><a href="#2-1-1-plot-——展现量的变化趋势" class="headerlink" title="2.1.1  plot()——展现量的变化趋势"></a>2.1.1  plot()——展现量的变化趋势</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line">y = np.cos(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls 曲线类型  lw曲线粗细  lable 图例名称</span></span><br><span class="line">plt.plot(x,y,ls=<span class="string">&quot;--&quot;</span>,lw=<span class="number">5</span>,label=<span class="string">&quot;plot figure&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib03.png" alt="image-20210602212357519"></p><h4 id="2-1-2-scatter-——寻找变量之间的关系"><a href="#2-1-2-scatter-——寻找变量之间的关系" class="headerlink" title="2.1.2 scatter()——寻找变量之间的关系"></a>2.1.2 scatter()——寻找变量之间的关系</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">y = np.random.rand(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls 曲线类型  lw曲线粗细  lable 图例名称</span></span><br><span class="line">plt.scatter(x,y,label=<span class="string">&quot;scatter figure&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib04.png" alt="image-20210602212736467"></p><h4 id="2-1-3-xlim-——设置x轴的数值显示范围"><a href="#2-1-3-xlim-——设置x轴的数值显示范围" class="headerlink" title="2.1.3 xlim()——设置x轴的数值显示范围"></a>2.1.3 xlim()——设置x轴的数值显示范围</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">y = np.random.rand(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ls 曲线类型  lw曲线粗细  lable 图例名称</span></span><br><span class="line">plt.scatter(x,y,label=<span class="string">&quot;scatter figure&quot;</span>)</span><br><span class="line">plt.xlim(<span class="number">0.01</span>,<span class="number">10</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib05.png" alt="image-20210602212950451"></p><h4 id="2-1-4-xlabel-——设置x轴的标签文本"><a href="#2-1-4-xlabel-——设置x轴的标签文本" class="headerlink" title="2.1.4 xlabel()——设置x轴的标签文本"></a>2.1.4 xlabel()——设置x轴的标签文本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0.05</span>, <span class="number">10</span>, <span class="number">1000</span>)</span><br><span class="line">y = np.sin(x)</span><br><span class="line"></span><br><span class="line">plt.plot(x, y, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>, c=<span class="string">&quot;c&quot;</span>, label=<span class="string">&quot;plot figure&quot;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.xlabel(<span class="string">&quot;x-axis&quot;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&quot;y-axis&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib06.png" alt="image-20210602221218562"></p><h4 id="2-1-5-grid-——绘制刻度线的网格线"><a href="#2-1-5-grid-——绘制刻度线的网格线" class="headerlink" title="2.1.5 grid()——绘制刻度线的网格线"></a>2.1.5 grid()——绘制刻度线的网格线</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npimport matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlibx = np.linspace(<span class="number">0.05</span>, <span class="number">10</span>, <span class="number">1000</span>)y = np.sin(x)plt.plot(x, y, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>, c=<span class="string">&quot;c&quot;</span>, label=<span class="string">&quot;plot figure&quot;</span>)plt.legend()plt.grid(linestyle=<span class="string">&quot;-&quot;</span>,color=<span class="string">&quot;r&quot;</span>)plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib07.png" alt="image-20210602221531887"></p><blockquote><p>grid()函数的主要参数为grid(b, which, axis, color, linestyle, linewidth， **kwargs)：</p><p>b：布尔值。就是是否显示网格线的意思。官网说如果b设置为None， 且kwargs长度为0，则切换网格状态<br>which：取值为major, minor， both。 默认为major<br>axis：取值为both， x，y。就是想绘制哪个方向的网格线<br>color：这就不用多说了，就是设置网格线的颜色。或者直接用c来代替color也可以<br>linestyle：也可以用ls来代替linestyle， 设置网格线的风格，是连续实线，虚线或者其它不同的线条</p></blockquote><h4 id="2-1-6-axhline-——绘制平行于x轴的水平参考线"><a href="#2-1-6-axhline-——绘制平行于x轴的水平参考线" class="headerlink" title="2.1.6 axhline()——绘制平行于x轴的水平参考线"></a>2.1.6 axhline()——绘制平行于x轴的水平参考线</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npimport matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlibx = np.linspace(<span class="number">0.05</span>, <span class="number">10</span>, <span class="number">1000</span>)y = np.sin(x)plt.plot(x, y, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>, c=<span class="string">&quot;c&quot;</span>, label=<span class="string">&quot;plot figure&quot;</span>)plt.legend()plt.axhline(y=<span class="number">0.0</span>,c=<span class="string">&quot;r&quot;</span>,ls=<span class="string">&quot;:&quot;</span>,lw=<span class="number">2</span>)plt.axvline(x=<span class="number">4.0</span>,c=<span class="string">&quot;r&quot;</span>,ls=<span class="string">&quot;:&quot;</span>,lw=<span class="number">2</span>)plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib08.png" alt="image-20210602221923757"></p><h4 id="2-1-7-axvspan-——绘制垂直于x轴的参考区域"><a href="#2-1-7-axvspan-——绘制垂直于x轴的参考区域" class="headerlink" title="2.1.7  axvspan()——绘制垂直于x轴的参考区域"></a>2.1.7  axvspan()——绘制垂直于x轴的参考区域</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npimport matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlibx = np.linspace(<span class="number">0.05</span>, <span class="number">10</span>, <span class="number">1000</span>)y = np.sin(x)plt.plot(x, y, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>, c=<span class="string">&quot;c&quot;</span>, label=<span class="string">&quot;plot figure&quot;</span>)plt.legend()plt.axhspan(ymin=<span class="number">0.0</span>,ymax=<span class="number">0.5</span>,facecolor=<span class="string">&quot;y&quot;</span>,alpha=<span class="number">0.3</span>)plt.axvspan(xmin=<span class="number">4.0</span>,xmax=<span class="number">6.0</span>,facecolor=<span class="string">&quot;y&quot;</span>,alpha=<span class="number">0.3</span>)plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib09.png" alt="image-20210602222200923"></p><h4 id="2-1-8-annotate-——添加图形内容细节的指向型注释文本"><a href="#2-1-8-annotate-——添加图形内容细节的指向型注释文本" class="headerlink" title="2.1.8 annotate()——添加图形内容细节的指向型注释文本"></a>2.1.8 annotate()——添加图形内容细节的指向型注释文本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npimport matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlibx = np.linspace(<span class="number">0.05</span>, <span class="number">10</span>, <span class="number">1000</span>)y = np.sin(x)plt.plot(x, y, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>, c=<span class="string">&quot;c&quot;</span>, label=<span class="string">&quot;plot figure&quot;</span>)plt.legend()plt.annotate(    <span class="comment"># 文字描述    s = &quot;maximum&quot;,    # 设置xy坐标点    xy=(np.pi / 2 ,1.0),    xytext=((np.pi / 2) + 1.0, 0.8),    weight=&quot;bold&quot;,    c=&quot;b&quot;,    arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3&quot;, color=&quot;b&quot;))plt.show()</span></span><br></pre></td></tr></table></figure><blockquote><p><code>xy</code>：被注释图形内容的位置坐标</p><p><code>xytext</code>：注释文本的位置坐标</p><p><code>weight</code>：注释文本的字体粗细风格</p><p><code>color</code>：注释文本的字体颜色</p><p><code>arrowprops</code>：指示被注释内容的箭头的属性字典</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib10.png" alt="image-20210602223828150"></p><h4 id="2-1-9-text-——添加图形内容细节的无指向型注释文本"><a href="#2-1-9-text-——添加图形内容细节的无指向型注释文本" class="headerlink" title="2.1.9 text()——添加图形内容细节的无指向型注释文本"></a>2.1.9 text()——添加图形内容细节的无指向型注释文本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npimport matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlibx = np.linspace(<span class="number">0.05</span>, <span class="number">10</span>, <span class="number">1000</span>)y = np.sin(x)plt.plot(x, y, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>, c=<span class="string">&quot;c&quot;</span>, label=<span class="string">&quot;plot figure&quot;</span>)plt.legend()plt.annotate(    <span class="comment"># 文字描述    s = &quot;maximum&quot;,    # 设置xy坐标点    xy=(np.pi/2,1.0),    xytext=((np.pi / 2) + 1.0, 0.8),    weight=&quot;bold&quot;,    c=&quot;b&quot;,    arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3&quot;, color=&quot;b&quot;))plt.text(x=3.10,y=0.09,s=&quot;y=sin(x)&quot;,weight=&quot;bold&quot;, c=&quot;b&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib11.png" alt="image-20210602224045180"></p><h4 id="2-1-10-title-——添加图形内容的标题"><a href="#2-1-10-title-——添加图形内容的标题" class="headerlink" title="2.1.10 title()——添加图形内容的标题"></a>2.1.10 title()——添加图形内容的标题</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npimport matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlibx = np.linspace(<span class="number">0.05</span>, <span class="number">10</span>, <span class="number">1000</span>)y = np.sin(x)plt.plot(x, y, ls=<span class="string">&quot;--&quot;</span>, lw=<span class="number">2</span>, c=<span class="string">&quot;c&quot;</span>, label=<span class="string">&quot;plot figure&quot;</span>)plt.legend()plt.title(<span class="string">&quot;center&quot;</span>)plt.title(<span class="string">&quot;left&quot;</span>,loc=<span class="string">&quot;left&quot;</span>,fontdict=&#123;<span class="string">&quot;size&quot;</span>: <span class="string">&quot;xx-large&quot;</span>,                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;r&quot;</span>,                    <span class="string">&quot;family&quot;</span>: <span class="string">&quot;Times New Roman&quot;</span>&#125;)plt.title(<span class="string">&quot;right&quot;</span>,loc=<span class="string">&quot;right&quot;</span>,family=<span class="string">&quot;Comic Sans MS&quot;</span>, size=<span class="number">20</span>,          style=<span class="string">&quot;oblique&quot;</span>, color=<span class="string">&quot;c&quot;</span>)plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib12.png" alt="image-20210602224241314"></p><h4 id="2-1-11-legend-——表示不同图形的文本标签图例"><a href="#2-1-11-legend-——表示不同图形的文本标签图例" class="headerlink" title="2.1.11 legend()——表示不同图形的文本标签图例"></a>2.1.11 legend()——表示不同图形的文本标签图例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npimport matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlibx = np.arange(<span class="number">0</span>,<span class="number">3</span>,<span class="number">0.1</span>)y1 = np.power(x,<span class="number">3</span>)y2 = np.power(x,<span class="number">2</span>)y3 = np.power(x,<span class="number">1</span>)plt.plot(x,y1,c=<span class="string">&quot;r&quot;</span>,ls=<span class="string">&quot;-&quot;</span>, lw=<span class="number">2</span>, label=<span class="string">&quot;$x^3$&quot;</span>)plt.plot(x,y2,c=<span class="string">&quot;b&quot;</span>,ls=<span class="string">&quot;-&quot;</span>, lw=<span class="number">2</span>, label=<span class="string">&quot;$x^2$&quot;</span>)plt.plot(x,y3,c=<span class="string">&quot;y&quot;</span>,ls=<span class="string">&quot;-&quot;</span>, lw=<span class="number">2</span>, label=<span class="string">&quot;$x^1$&quot;</span>)plt.legend(loc=<span class="string">&quot;upper left&quot;</span>,fontsize=<span class="string">&quot;x-large&quot;</span>,bbox_to_anchor=(<span class="number">0.05</span>, <span class="number">0.95</span>), ncol=<span class="number">3</span>,           title=<span class="string">&quot;power function&quot;</span>, shadow=<span class="literal">True</span>, fancybox=<span class="literal">True</span>)plt.show()</span><br></pre></td></tr></table></figure><blockquote><ul><li><p><code>loc</code>参数控制图例的位置，可选值为</p><p>：</p><ul><li><code>best</code></li><li><code>upper right</code></li><li><code>upper left</code></li><li><code>lower left</code></li><li><code>lower right</code></li><li><code>right</code></li><li><code>center left</code></li><li><code>center right</code></li><li><code>lower center</code></li><li><code>upper center</code></li><li><code>center</code></li></ul></li><li><p><code>fontsize</code>控制图例字体大小，可选值为</p><p>：</p><ul><li><code>int</code></li><li><code>float</code></li><li><code>xx-small</code></li><li><code>x-small</code></li><li><code>small</code></li><li><code>medium</code></li><li><code>large</code></li><li><code>x-large</code></li><li><code>xx-large</code></li></ul></li><li><p><code>frameon</code>：<code>True</code>或<code>False</code>，是否显示图例边框</p></li><li><code>edgecolor</code>：图例边框颜色</li><li><code>facecolor</code>：图例背景颜色,若无边框,参数无效</li><li><code>title</code>：设置图例标题</li><li><code>fancybox</code>：<code>True</code>表示线框直角，<code>False</code>表示线框圆角</li><li><code>shadow</code>：<code>True</code>或<code>False</code>，是否显示阴影</li></ul></blockquote><h3 id="2-2-常用配置参数"><a href="#2-2-常用配置参数" class="headerlink" title="2.2  常用配置参数"></a>2.2  常用配置参数</h3><h4 id="2-2-1-线型"><a href="#2-2-1-线型" class="headerlink" title="2.2.1 线型"></a>2.2.1 线型</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linestyle`或`ls</span><br></pre></td></tr></table></figure><ul><li><code>-</code>：实线</li><li><code>--</code>：虚线</li><li><code>-.</code>：点划线</li><li><code>:</code>：点线</li></ul><h4 id="2-2-2-线宽"><a href="#2-2-2-线宽" class="headerlink" title="2.2.2 线宽"></a>2.2.2 线宽</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linewidth`或`lw</span><br></pre></td></tr></table></figure><ul><li>浮点数</li></ul><h4 id="2-2-3-线条颜色"><a href="#2-2-3-线条颜色" class="headerlink" title="2.2.3 线条颜色"></a>2.2.3 线条颜色</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">color`或`c</span><br></pre></td></tr></table></figure><ul><li><code>b</code>：blue，蓝色</li><li><code>g</code>：green，绿色</li><li><code>r</code>：red，红色</li><li><code>c</code>：cyan，蓝绿</li><li><code>m</code>：magenta，洋红</li><li><code>y</code>：yellow，黄色</li><li><code>k</code>：black，黑色</li><li><code>w</code>：white，白色</li></ul><blockquote><p>也可以对关键字参数color赋十六进制的RGB字符串如 color=’#900302’</p></blockquote><h4 id="2-2-4-点标记类型"><a href="#2-2-4-点标记类型" class="headerlink" title="2.2.4 点标记类型"></a>2.2.4 点标记类型</h4><p><code>marker</code>，只能用以下简写符号表示</p><ul><li><code>.</code>：point marker</li><li><code>,</code>：pixel marker</li><li><code>o</code>：circle marker</li><li><code>v</code>：triangle_down marker</li><li><code>^</code>：triangle_up marker</li><li><code>&lt;</code>：triangle_left marker</li><li><code>&gt;</code>：triangle_right marker</li><li><code>1</code>：tri_down marker</li><li><code>2</code>：tri_up marker</li><li><code>3</code>：tri_left marker</li><li><code>4</code>：tri_right marker</li><li><code>s</code>：square marker</li><li><code>p</code>：pentagon marker</li><li><code>*</code>：star marker</li><li><code>h</code>：hexagon1 marker</li><li><code>H</code>：hexagon2 marker</li><li><code>+</code>：plus marker</li><li><code>x</code>：x marker</li><li><code>D</code>：diamond marker</li><li><code>d</code>：thin_diamond marker</li><li><code>|</code>：vline marker</li><li><code>_</code>：hline marker</li></ul><p>特别地，标记还有mathtext模式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8import numpy as npimport matplotlib.pyplot as pltimport matplotlib as mplmpl.rcParams[&#x27;font.sans-serif&#x27;] = [&#x27;SimHei&#x27;]mpl.rcParams[&#x27;font.serif&#x27;] = [&#x27;SimHei&#x27;]mpl.rcParams[&#x27;axes.unicode_minus&#x27;] = False  # 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = np.arange(1,13,1)y = np.array([12, 34, 22, 30, 18, 13, 15, 19, 24, 28, 23, 27])# 将画布分为2行2列fig,ax = plt.subplots(2,2)ax[0, 0].scatter(x, y * 1.5, marker=r&quot;$\clubsuit$&quot;, c=&quot;#fb8072&quot;, s=500)ax[0, 0].locator_params(axis=&quot;x&quot;, tight=True, nbins=11)ax[0, 0].set_xlim(0, 13)ax[0, 0].set_xticks(x)ax[0, 0].set_title(&#x27;显示样式&#123;&#125;的散点图&#x27;.format(r&quot;$\clubsuit$&quot;))ax[0, 1].scatter(x, y - 2, marker=r&quot;$\heartsuit$&quot;, c=&quot;#fb8072&quot;, s=500)ax[0, 1].locator_params(axis=&quot;x&quot;, tight=True, nbins=11)ax[0, 1].set_xlim(0, 13)ax[0, 1].set_xticks(x)ax[0, 1].set_title(&#x27;显示样式&#123;&#125;的散点图&#x27;.format(r&quot;$\heartsuit$&quot;))ax[1, 0].scatter(x, y + 7, marker=r&quot;$\diamondsuit$&quot;, c=&quot;#fb8072&quot;, s=500)ax[1, 0].locator_params(axis=&quot;x&quot;, tight=True, nbins=11)ax[1, 0].set_xlim(0, 13)ax[1, 0].set_xticks(x)ax[1, 0].set_title(&#x27;显示样式&#123;&#125;的散点图&#x27;.format(r&quot;$\diamondsuit$&quot;))ax[1, 1].scatter(x, y - 9, marker=r&quot;$\spadesuit$&quot;, c=&quot;#fb8072&quot;, s=500)ax[1, 1].locator_params(axis=&quot;x&quot;, tight=True, nbins=11)ax[1, 1].set_xlim(0, 13)ax[1, 1].set_xticks(x)ax[1, 1].set_title(&#x27;显示样式&#123;&#125;的散点图&#x27;.format(r&quot;$\spadesuit&quot;))plt.suptitle(&quot;不同原始字符串作为标记类型的展示效果&quot;, fontsize=16, weight=&quot;black&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p>官网有一张属性表，先贴在这，以后有空会再补充内容的</p><p><img src="http://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyMDIwLmNuYmxvZ3MuY29tL2Jsb2cvMTQ5NzAzOC8yMDIwMDUvMTQ5NzAzOC0yMDIwMDUxMTE2MDUxNDg2My0xMjY1MDAwODcucG5n?x-oss-process=image/format,png" alt="img"></p><h2 id="三、matplotlib常用图表"><a href="#三、matplotlib常用图表" class="headerlink" title="三、matplotlib常用图表"></a>三、matplotlib常用图表</h2><h3 id="3-1-柱状图"><a href="#3-1-柱状图" class="headerlink" title="3.1 柱状图"></a>3.1 柱状图</h3><p>柱状图主要是应用在<strong>定性数据的可视化</strong>场景中，或是离散数据类型的分布展示。例如，一个本科班级的学生籍贯分布，出国旅游人士的职业分布以及下载一款App产品的操作系统的分布。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = [1,2,3,4,5]y = [6,10,2,1,1]plt.bar(x,y,align=&quot;center&quot;,color=&quot;b&quot;,tick_label=[&quot;语文&quot;,&quot;数学&quot;,&quot;英语&quot;,&quot;物理&quot;,&quot;化学&quot;],alpha=0.6)plt.xlabel(&quot;学科&quot;)plt.ylabel(&quot;分数&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib13.png" alt="image-20210606090150432"></p><blockquote></blockquote><ul><li><code>x</code>：柱状图中的柱体标签值</li><li><code>y</code>：柱状图中的柱体高度</li><li><code>align</code>：柱体对齐方式，可选<code>center</code>或<code>edge</code></li><li><code>color</code>：柱体颜色</li><li><code>tick_label</code>：刻度标签值</li><li><code>alpha</code>：柱体透明度</li></ul><h3 id="3-2-条形图"><a href="#3-2-条形图" class="headerlink" title="3.2 条形图"></a>3.2 条形图</h3><p>其实就是把柱状图转置过来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = [1,2,3,4,5]y = [6,10,2,1,1]plt.barh(x,y,align=&quot;center&quot;,color=&quot;b&quot;,tick_label=[&quot;语文&quot;,&quot;数学&quot;,&quot;英语&quot;,&quot;物理&quot;,&quot;化学&quot;],alpha=0.6)plt.xlabel(&quot;学科&quot;)plt.ylabel(&quot;分数&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib14.png" alt="image-20210606090426320"></p><h3 id="3-3-多数据并列柱状图"><a href="#3-3-多数据并列柱状图" class="headerlink" title="3.3  多数据并列柱状图"></a>3.3  多数据并列柱状图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = np.arange(1,6,1)y = [0,4,3,5,6]y1 = [1,3,4,2,7]y2 = [3,4,1,6,5]labels = [&quot;BluePlanet&quot;, &quot;BrownPlanet&quot;, &quot;GreenPlanet&quot;]colors = [&quot;#8da0cb&quot;, &quot;#fc8d62&quot;, &quot;#66c2a5&quot;]x = np.arange(5)y = [6,10,4,5,1]y1 = [2,6,3,8,5]bar_width = 0.35tick_label = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;]plt.bar(x,y,bar_width,color=&quot;r&quot;, align=&quot;center&quot;,label=&quot;班级A&quot;,alpha=0.5)plt.bar(x+bar_width, y1,bar_width,color=&quot;b&quot;, align=&quot;center&quot;, label=&quot;班级B&quot;, alpha=0.5)plt.xlabel(&quot;测试难度&quot;)plt.ylabel(&quot;试卷份数&quot;)plt.xticks(x + bar_width / 2, tick_label)plt.legend()plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib20.png" alt="image-20210606100340193"></p><h3 id="3-4-多数据平行条形图"><a href="#3-4-多数据平行条形图" class="headerlink" title="3.4 多数据平行条形图"></a>3.4 多数据平行条形图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = np.arange(1,6,1)y = [0,4,3,5,6]y1 = [1,3,4,2,7]y2 = [3,4,1,6,5]labels = [&quot;BluePlanet&quot;, &quot;BrownPlanet&quot;, &quot;GreenPlanet&quot;]colors = [&quot;#8da0cb&quot;, &quot;#fc8d62&quot;, &quot;#66c2a5&quot;]x = np.arange(5)y = [6,10,4,5,1]y1 = [2,6,3,8,5]bar_width = 0.35tick_label = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;]plt.barh(x,y,bar_width,color=&quot;r&quot;, align=&quot;center&quot;,label=&quot;班级A&quot;,alpha=0.5)plt.barh(x+bar_width, y1,bar_width,color=&quot;b&quot;, align=&quot;center&quot;, label=&quot;班级B&quot;, alpha=0.5)plt.xlabel(&quot;测试难度&quot;)plt.ylabel(&quot;试卷份数&quot;)plt.xticks(x + bar_width / 2, tick_label)plt.legend()plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib21.png" alt="image-20210606100419966"></p><h3 id="3-5-参数探讨"><a href="#3-5-参数探讨" class="headerlink" title="3.5 参数探讨"></a>3.5 参数探讨</h3><p>如果想在柱体上绘制装饰线或装饰图，也就是说，设置柱体填充样式，我们可以用关键字参数<code>hatch</code>，其可能取值为：<code>/</code>,<code>\</code> ,<code>|</code> ,<code>-</code> , <code>+</code> , <code>x</code> , <code>o</code> , <code>O</code> , <code>.</code> , <code>*</code></p><blockquote><p>每种符号数量越多，填充样式越密集，如<code>///</code></p></blockquote><p>柱状图还有其他关键字参数，如描边</p><ul><li>边缘颜色（包括填充样式颜色，会一起变）：<code>edgecolor</code>(<code>ec</code>)</li><li>边缘样式：<code>linestyle</code>(<code>ls</code>)</li><li>边缘粗细：<code>linwwidth</code>(<code>lw</code>)</li></ul><h3 id="3-6-堆积折线图"><a href="#3-6-堆积折线图" class="headerlink" title="3.6 堆积折线图"></a>3.6 堆积折线图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = np.arange(1,6,1)y = [0,4,3,5,6]y1 = [1,3,4,2,7]y2 = [3,4,1,6,5]labels = [&quot;BluePlanet&quot;, &quot;BrownPlanet&quot;, &quot;GreenPlanet&quot;]colors = [&quot;#8da0cb&quot;, &quot;#fc8d62&quot;, &quot;#66c2a5&quot;]plt.stackplot(x,y,y1,y2,labels=labels,colors=colors)plt.legend(loc=&quot;upper right&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib19.png" alt="image-20210606095849915"></p><h3 id="3-7-间断条形图"><a href="#3-7-间断条形图" class="headerlink" title="3.7 间断条形图"></a>3.7 间断条形图</h3><p>主要用来可视化定性数据的相同指标在时间维度上的指标值的变化情况，实现定性数据的相同指标的变化情况的有效直观比较</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串plt.broken_barh([(30,100),(180,50),(260,70)],(20,8),facecolors=&quot;#1f78b4&quot;)plt.broken_barh([(60, 90), (190, 20), (230, 30), (280, 60)], (10, 8),                facecolors=(&quot;#7fc97f&quot;, &quot;#beaed4&quot;, &quot;#fdc086&quot;, &quot;#ffff99&quot;))plt.xlim(0, 360)plt.ylim(5, 35)plt.xlabel(&quot;演出时间&quot;)plt.xticks(np.arange(0, 361, 60))plt.yticks([15, 25], [&quot;歌剧院A&quot;, &quot;歌剧院B&quot;])plt.grid(ls=&quot;-&quot;, lw=1, color=&quot;gray&quot;)plt.title(&quot;不同地区的歌剧院的演出时间比较&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib18.png" alt="image-20210606095248591"></p><blockquote><p>针对plt.broken_barh([(60, 90), (190, 20), (230, 30), (280, 60)], (10, 8),facecolors=(“#7fc97f”, “#beaed4”, “#fdc086”, “#ffff99”))来讲解使用方法：</p><p>列表[(60, 90), (190, 20), (230, 30), (280, 60)]的元组表示从起点是x轴的数值为60的位置起，沿x轴正方向移动90个单位。其他元组类似。</p><p>参数(10, 8)表示从起点是y轴的数值为10的位置起，沿y轴正方向移动8个单位，这就是每个柱体的高度和垂直起始位置。</p><p>关键字参数facecolors表示每个柱体的填充颜色，这里使用HEX模式的颜色表示方法</p></blockquote><h3 id="3-8-阶梯图"><a href="#3-8-阶梯图" class="headerlink" title="3.8 阶梯图"></a>3.8 阶梯图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = np.linspace(1,10,10)y = np.sin(x)plt.step(x,y, color=&quot;#8dd3c7&quot;, where=&quot;pre&quot;, lw=2)plt.xlim(0,11)plt.ylim(-1.2,1.2)plt.xticks(np.arange(1,11,1))plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib17.png" alt="image-20210606094726215"></p><blockquote><p><code>step()</code>方法参数和<code>plot()</code>类似，主要是关键字参数<code>where</code>，默认值是<code>pre</code>，表示数据点向右对齐，，还可以设为<code>post</code>，表示数据点向左对齐，如下图。</p></blockquote><h3 id="3-9-饼图"><a href="#3-9-饼图" class="headerlink" title="3.9 饼图"></a>3.9 饼图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串# 标记每份饼片的文本标签内容labels = &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;# 饼片代表的百分比students = [0.35,0.15,0.20,0.30]colors = [&#x27;#377eb8&#x27;, &#x27;#4daf4a&#x27;, &#x27;#984ea3&#x27;, &#x27;#ff7f00&#x27;]# 饼片边缘偏离半径的百分比explode = (0.1,0.1,0.1,0.1)# autopct 饼片文本标签内容对应的数值百分比样式# startangle 从x轴作为起始位置，第一个饼片的起始位置（逆时针），单位度# shadow 是否绘制饼片的阴影# colors：饼片的颜色wedges,texts,autotexts = plt.pie(students, explode=explode,                                 autopct=&quot;%3.1f%%&quot;,startangle=45,                                 shadow=True, colors=colors)plt.legend(wedges, labels, fontsize=12, title=&quot;难度等级&quot;,loc=&quot;right&quot;,           bbox_to_anchor=(0.95,0,0.3,1))plt.setp(autotexts, size=15, weight=&quot;bold&quot;)plt.setp(texts, size=12)plt.title(&quot;选择不同难度测试试卷的学生占比&quot;)colLables = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]rowLables = [&quot;学生选择试卷人数&quot;]studentValues = [[350, 150, 200, 300]]colColors = [&quot;#377eb8&quot;, &quot;#e41a1c&quot;, &quot;#4daf4a&quot;, &quot;#984ea3&quot;]plt.table(cellText=studentValues,          cellLoc=&quot;center&quot;,          colWidths=[0.1] * 4,          colLabels=colLables,          colColours=colColors,          rowLabels=rowLables,          rowLoc=&quot;center&quot;,          loc=&quot;bottom&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib16.png" alt="image-20210606094204188"></p><h3 id="3-10-箱线图"><a href="#3-10-箱线图" class="headerlink" title="3.10 箱线图"></a>3.10 箱线图</h3><p>关于箱线图的组成部分有：箱体、箱须和离群值，其中，箱体主要由第一四分位数、中位数和第三四分位数，箱须又分为上箱须和下箱须。上箱须和下箱须长度的确定方法是绘制箱线图的原始数据集Data中分贝寻找不大于Q3+whis×IQRQ3+whis×IQR的最大值valuemaxvaluemax和不小于Q1−whis×IQRQ1−whis×IQR的最小值valueminvaluemin，其中Q1Q1和Q3Q3分别是第一四分位数和第三四分位数，whis是关键字参数whis的值，IQR是四分位差，计算方法是IQR=Q3−Q1IQR=Q3−Q1。离群值OutlierOutlier的判断标准是 value&lt;(Q1−whis×IQR)value&lt;(Q1−whis×IQR)或者value&gt;(Q3+whis×IQR)value&gt;(Q3+whis×IQR)，其中valuevalue是Data中的数据点。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串testA = np.random.randn(5000)testB = np.random.randn(5000)# 绘制图片输入数据testList = [testA,testB]labels = [&quot;随机数生成器AlphaRM&quot;,&quot;随机数生成器BetaRM&quot;]colors = [&quot;#1b9e77&quot;, &quot;#d95f02&quot;]# 四分卫间距的倍数，用来确定箱须包含数据范围的大小whis = 1.6# 设置箱体的宽度，可以统一设为一个值，或者分别赋值宽度width = 0.35# sym  离群值的标记样式bplot = plt.boxplot(testList, whis=whis, widths=width, sym=&quot;o&quot;,labels=labels, patch_artist=True)for patch,color in zip(bplot[&quot;boxes&quot;],colors):    patch.set_facecolor(color)plt.ylabel(&quot;随机数值&quot;)plt.title(&quot;生成器抗干扰能力的稳定性比较&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib15.png" alt="image-20210606091516310"></p><h2 id="四、matplotlib划分画布的主要函数"><a href="#四、matplotlib划分画布的主要函数" class="headerlink" title="四、matplotlib划分画布的主要函数"></a>四、matplotlib划分画布的主要函数</h2><h3 id="4-1-subplot"><a href="#4-1-subplot" class="headerlink" title="4.1 subplot()"></a>4.1 subplot()</h3><ul><li>绘制网格区域中几何形状相同的子区布局</li></ul><p>函数签名有：</p><ul><li><code>subplot(numRows, numCols, plotNum)</code></li><li><code>subplot(CRN)</code></li></ul><blockquote><p>都是整数，意思是将画布划分为C行R列个子区，此时定位到第N个子区上，子区编号按照行优先排序。</p></blockquote><p>Example</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = np.linspace(-2 * np.pi, 2*np.pi, 200)y = np.sin(x)y1 = np.cos(x)plt.subplot(121)plt.plot(x,y)plt.subplot(122)plt.plot(x,y1)plt.show()</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> pltimport matplotlib <span class="keyword">as</span> mplimport numpy <span class="keyword">as</span> npmpl.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;font.serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]mpl.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题,或者转换负号为字符串x = np.linspace(0.0, 2*np.pi)y = np.cos(x)*np.sin(x)fig = plt.figure()ax1 = fig.add_subplot(121)# 设置自动缩放ax1.margins(0.03)ax1.plot(x,y,ls=&quot;-&quot;,lw=2,color=&quot;b&quot;)ax2 = fig.add_subplot(222)ax2.margins(0.1)ax2.plot(x,y,ls=&quot;-&quot;,lw=2,color=&quot;r&quot;)ax2 = fig.add_subplot(224)ax2.margins(0.1)ax2.plot(x,y,ls=&quot;-&quot;,lw=2,color=&quot;y&quot;)plt.show()</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/matplotlib22.png" alt="image-20210606101908004"></p><blockquote><p>非等分画布可以多次使用等分画布来实现</p></blockquote><h3 id="4-2-subplot2grid"><a href="#4-2-subplot2grid" class="headerlink" title="4.2 subplot2grid()"></a>4.2 subplot2grid()</h3><ul><li>让子区跨越固定的网格布局</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】lamdba详解</title>
      <link href="/archives/57187.html"/>
      <url>/archives/57187.html</url>
      
        <content type="html"><![CDATA[<p>在Python中有两种函数，一种是def定义的函数，另一种是lambda函数，也就是大家常说的匿名函数。</p><p>与java中的lamdba类似，简化了代码，使代码看起来更加简洁流畅。 </p><span id="more"></span><h3 id="1-为什么使用lamdba"><a href="#1-为什么使用lamdba" class="headerlink" title="1.为什么使用lamdba"></a>1.为什么使用lamdba</h3><p>比如：我们需要计算两个数相加的和</p><p>传统的定义方式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>lamdba表达式的形式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = lamdba a,b:a+b</span><br><span class="line">y = <span class="keyword">lambda</span> a,b:a+b</span><br><span class="line"><span class="comment">#直接使用变量名作为方法名调用</span></span><br><span class="line"><span class="built_in">print</span>(y(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h4 id="补充-map函数的使用方式："><a href="#补充-map函数的使用方式：" class="headerlink" title="==补充==map函数的使用方式："></a>==补充==map函数的使用方式：</h4><p><strong>map()</strong> 会根据提供的函数对指定序列做映射。</p><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p><p>map() 函数==语法==：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map(function, iterable, ...)</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>function — 函数</p></li><li><p>iterable — 一个或多个序列</p><p><strong><em>Python 2.x 返回列表。</em></strong></p><p><strong><em>Python 3.x 返回迭代器。</em></strong></p></li></ul><p>==demo:==</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>) :            <span class="comment"># 计算平方数</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])   <span class="comment"># 计算列表各个元素的平方</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 使用 lambda 匿名函数</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 提供了两个列表，对相同位置的列表数据进行相加</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>])</span><br><span class="line">[<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">19</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># .............python3.x</span></span><br><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x*x,[y <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>在这个简单的例子中，可以看到，lamdba使得代码看起来相对清爽，少了些代码的冗余，可以不用再去给一个函数命名，可以快速的实现一个简单的小功能，lamdba使得代码可读性更强，程序看起来更加简洁。</p><p>lamdba函数的==语法==：</p><blockquote><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">lambda argument_list:expersion</span><br></pre></td></tr></table></figure></blockquote><p>语法中的argument_list是参数列表，它的结构与Python中函数(function)的参数列表是一样的，例如：a,b    a=1,b=2等等</p><p>lamdba虽可以简洁代码，但是对程序的执行效率无任何影响。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = <span class="keyword">lambda</span> a,b:a+b</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;def执行前：&#x27;</span>,time.time())</span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;def执行时间&#x27;</span>,time.time())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;lamdba执行前：&#x27;</span>,time.time())</span><br><span class="line"><span class="built_in">print</span>(y(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;lamdba执行时间&#x27;</span>,time.time())</span><br></pre></td></tr></table></figure><p>result：</p><blockquote><p>def执行前： 1608178942.6293051<br>3<br>def执行时间 1608178942.629337<br>lamdba执行前： 1608178942.629343<br>3<br>lamdba执行时间 1608178942.62935</p></blockquote><p>可以看出两者并没有多大变化</p><h3 id="2-lamdba匿名函数的优点"><a href="#2-lamdba匿名函数的优点" class="headerlink" title="2.lamdba匿名函数的优点"></a>2.lamdba匿名函数的优点</h3><p>（1）可以直接赋一个变量，像函数一样去调用（把变量名当做函数名）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = <span class="keyword">lambda</span> a,b:a+b</span><br><span class="line"><span class="built_in">print</span>(y(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>​        也可以在函数后直接传入参数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>((<span class="keyword">lambda</span> a,b:a+b)(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>(2) 将lambda函数作为参数传递给其他函数比如说结合map、filter、sorted、reduce等一些Python内置函数使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x:x%<span class="number">3</span>==<span class="number">0</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])<span class="keyword">for</span> i <span class="keyword">in</span> y:    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x*x,[y <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])<span class="keyword">for</span> i <span class="keyword">in</span> result:    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>与sorted函数结合使用，按照第一个元素排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([(<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;d&#x27;</span>,<span class="number">4</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>)],key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>])<span class="built_in">print</span>:[(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;d&#x27;</span>,<span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p>按照第二个元素排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>([(<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;d&#x27;</span>,<span class="number">4</span>),(<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>)],key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>])<span class="built_in">print</span>:[(<span class="string">&#x27;c&#x27;</span>,<span class="number">1</span>),(<span class="string">&#x27;a&#x27;</span>,<span class="number">2</span>),(<span class="string">&#x27;b&#x27;</span>,<span class="number">3</span>),(<span class="string">&#x27;d&#x27;</span>,<span class="number">4</span>)]</span><br></pre></td></tr></table></figure><p>与reduce函数结合使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduceprint(reduce(<span class="keyword">lambda</span> a,b:<span class="string">&#x27;&#123;&#125;,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(a,b),[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]))<span class="built_in">print</span>:<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span></span><br></pre></td></tr></table></figure><p>(3) def函数与lamdba结合使用</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a</span>):    <span class="keyword">return</span> <span class="keyword">lambda</span> b:a+bf = add(<span class="number">2</span>)<span class="built_in">print</span>(f(<span class="number">3</span>))<span class="built_in">print</span>: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>(4) 字符串连接</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="keyword">lambda</span> x=<span class="string">&#x27;wo&#x27;</span>,y=<span class="string">&#x27;xiang&#x27;</span>,z=<span class="string">&#x27;ni&#x27;</span>: x+y+zprint(result(<span class="string">&#x27;wo shizhen d &#x27;</span>))<span class="built_in">print</span>: wo shizhen d xiangni</span><br></pre></td></tr></table></figure><p>(5)判断字符串是否以某个字母开头有</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&#x27;dwdw&#x27;</span>, <span class="string">&#x27;Avf&#x27;</span>, <span class="string">&#x27;rfegbn&#x27;</span>, <span class="string">&#x27;Dqssqve &#x27;</span>, <span class="string">&#x27;ve n&#x27;</span>, <span class="string">&#x27;Bfern&#x27;</span>, <span class="string">&#x27;Zfer&#x27;</span>]result = <span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.startswith(<span class="string">&#x27;r&#x27;</span>),names)<span class="keyword">for</span> name <span class="keyword">in</span> result:    <span class="built_in">print</span>(name)    <span class="built_in">print</span>: rfegbn</span><br></pre></td></tr></table></figure><p>(6) 求两个列表元素的和</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]b = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]<span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x,y:x+y, a,b)))<span class="built_in">print</span>: [<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>]</span><br></pre></td></tr></table></figure><p>(7) 求字符串每个单词的长度</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sentence = <span class="string">&quot;Welcome To Beijing!&quot;</span>words = sentence.split()lengths  = <span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">len</span>(x),words)<span class="built_in">print</span>(<span class="built_in">list</span>(lengths))<span class="built_in">print</span>: [<span class="number">7</span>,<span class="number">2</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure><p>参考：<a href="https://zhuanlan.zhihu.com/p/80960485?utm_source=wechat_timeline">https://zhuanlan.zhihu.com/p/80960485?utm_source=wechat_timeline</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】__slots__限制类实例动态添加属性和方法</title>
      <link href="/archives/63651.html"/>
      <url>/archives/63651.html</url>
      
        <content type="html"><![CDATA[<p>Python中允许动态的对类或实例对象添加属性和方法，类方法大致分为 实例方法、静态方法和类方法，在Python中允许动态的添加，但是对于实例对象，我们只允许动态的添加实例方法，不能添加类方法和静态方法</p><span id="more"></span><p><code>如果单纯的给实例对象添加方法，不会影响类的其他方法，如果给类添加方法的话，则会改变所有的实力对象</code></p><p><strong>example</strong>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义了一个实例方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info1</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;调用实例方法1&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用注释的方式规定了这是一个类对象,约定俗称的方式规定为cls</span></span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info2</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;调用类方法1&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#使用注释的方式规定了这是一个静态对象,约定俗称的方式规定为cls</span></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info3</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;调用静态方法&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#类可以动态添加以上 3 种方法，会影响所有实例对象</span></span><br><span class="line">Student.info1 = info1</span><br><span class="line">Student.info2 = info2</span><br><span class="line">Student.info3 = info3</span><br><span class="line"></span><br><span class="line">stu = Student()</span><br><span class="line"><span class="comment"># tu 可以使用上面三种方法</span></span><br><span class="line">stu.info1()</span><br><span class="line">stu.info2()</span><br><span class="line">stu.info3()</span><br><span class="line"></span><br><span class="line"><span class="comment">#类实例对象只能动态添加实例方法，不会影响其它实例对象</span></span><br><span class="line">stu1 = Student()</span><br><span class="line">stu1.info1 = info1</span><br></pre></td></tr></table></figure><p><strong>print</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">调用实例方法<span class="number">1</span></span><br><span class="line">调用类方法<span class="number">1</span></span><br><span class="line">调用静态方法</span><br></pre></td></tr></table></figure><p>显然，动态给类或者实例对象添加属性或方法，是非常灵活的。但与此同时，如果胡乱地使用，也会给程序带来一定的隐患，即程序中已经定义好的类，如果不做任何限制，是可以做动态的修改的。</p><p>Python 提供了 <strong>slots</strong> 属性，限制了给实例对象动态地添加属性或方法。</p><p><code>__slots__ 只能限制为实例对象动态添加属性和方法，而无法限制动态地为类添加属性和方法。</code></p><p><strong>slots</strong> 属性值其实就是一个元组，只有其中指定的元素，才可以作为动态添加的属性或者方法的名称。如下列出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    __slots__ = (<span class="string">&quot;name&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>可以看出， Student类中指定了 <strong>slots</strong> 属性，这意味着，该类的实例对象仅限于动态添加 name、age、id这 3 个属性以及 name()、age() 和 id() 这 3 个方法。</p><blockquote><p>对于动态添加的方法，<strong>slots</strong> 限制的是其方法名，并不限制参数的个数。</p></blockquote><p>比如，在 Student类的基础上，添加如下代码并运行：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self,name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在调用实例方法&quot;</span>,self.name)</span><br><span class="line">stu = Student()</span><br><span class="line">stu.name = <span class="string">&quot;lhh&quot;</span></span><br><span class="line"><span class="comment">#为 clang 对象动态添加 info 实例方法</span></span><br><span class="line">stu.age = age</span><br><span class="line">stu.info(stu,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><strong>print</strong>:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">正在调用实例方法 lhh</span><br></pre></td></tr></table></figure><p>还是在Student 类的基础上，添加如下代码并运行：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">id</span>(<span class="params">self,name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在调用实例方法&quot;</span>,self.name)</span><br><span class="line">stu = Student ()</span><br><span class="line">stu.name = <span class="string">&quot;lhh&quot;</span></span><br><span class="line">stu.test = <span class="built_in">id</span></span><br><span class="line">stu.test(stu,<span class="string">&quot;haha&quot;</span>)</span><br></pre></td></tr></table></figure><p>报错：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;F:/PycharmProjects/Pytorch_frame/python/python基础代码练习/__slots.py&quot;</span>, line <span class="number">52</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    stu.test = <span class="built_in">id</span></span><br><span class="line">AttributeError: <span class="string">&#x27;Student&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure><p>根据 <strong>slots</strong> 属性的设置，Student 类的实例对象是不能动态添加以 test为名称的方法的。</p><p>另外本节前面提到，<strong>slots</strong> 属性限制的对象是类的实例对象，而不是类，因此下面的代码是合法的：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在调用实例方法&quot;</span>)</span><br><span class="line">Student.test = info</span><br><span class="line">stu = Student()</span><br><span class="line">stu.test()</span><br></pre></td></tr></table></figure><p><strong>可以正常执行</strong></p><p>此外，<strong>slots</strong> 属性对由该类派生出来的子类，也是不起作用的。例如如下代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:    __slots__ = (<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;mul&#x27;</span>)<span class="comment">#Student 的空子类class Boy(Student):    pass#定义的实例方法def mul(self):    print(&quot;正在调用实例方法&quot;)boy = Boy()#为子类对象动态添加 say() 方法boy.say = mulboy.say(boy)</span></span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">正在调用实例方法</span><br></pre></td></tr></table></figure><p>显然，<strong>slots</strong> 属性只对当前所在的类起限制作用。</p><p>因此，如果子类也要限制外界为其实例对象动态地添加属性和方法，必须在子类中设置 <strong>slots</strong> 属性。</p><p>参考文章：（<a href="http://c.biancheng.net/view/2291.html）">http://c.biancheng.net/view/2291.html）</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python基础】os模块的使用</title>
      <link href="/archives/12524.html"/>
      <url>/archives/12524.html</url>
      
        <content type="html"><![CDATA[<h2 id="os简介"><a href="#os简介" class="headerlink" title="os简介"></a>os简介</h2><p>os 模块是关于操作系统操作调用的相关模块，对文件进行重命名、删除等一系列操作，在python中可以用os模块</p><p>os模块提供了一些系统级别的操作</p><p><a href="https://docs.python.org/3.9/whatsnew/3.9.html#os">官网api</a></p><span id="more"></span><h2 id="相对路径与绝对路径"><a href="#相对路径与绝对路径" class="headerlink" title="相对路径与绝对路径"></a>相对路径与绝对路径</h2><p>==绝对路径:==是指文件在硬盘上真正存在的路径。那么如果要使用绝对路径指定网页的背景图片就应该使用 以下语句：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Users/liuhuanhuan/PycharmProjects/blog/os模块操作/os.md</span><br></pre></td></tr></table></figure><blockquote><p> 注: Mac os /linux 中可直接使用pwd查看当前文件的绝对路径</p></blockquote><p>==相对路径==，就是相对于自己的目标文件位置。</p><blockquote><p>在同一个目录: <blog>  (blog为项目的主目录)</p><p>在其所在目录的子目录里: <os模块操作> （此目录为blog的二级目录）</p><p>在其所在目录的上级目录里: &lt;../os.md&gt;  (在相对路径里常使用“../”来表示上一级目录。如果有多个上一级目录，可以使用多个“../”.)</p><p>在其所在目录的上级目录里的os子目录里:&lt;./os/os.md&gt;</p></blockquote><h2 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h2><h3 id="1-getcwd"><a href="#1-getcwd" class="headerlink" title="1. getcwd()"></a>1. getcwd()</h3><blockquote><pre><code>     作用：返回当前工作目录</code></pre></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br></pre></td></tr></table></figure><h3 id="2-rename-old-new"><a href="#2-rename-old-new" class="headerlink" title="2. rename(old, new)"></a>2. rename(old, new)</h3><blockquote><p>作用：修改文件名称</p><p>注: old 的目录必须是存在的，否则报错</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">&#x27;1.py&#x27;</span>,<span class="string">&#x27;2.py&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-remove-filename"><a href="#3-remove-filename" class="headerlink" title="3. remove(filename)"></a>3. remove(filename)</h3><blockquote><p>作用：删除指定的文件，如果 path 是目录则会抛出 OSError </p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">&#x27;3.py&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="4-mkdir-name"><a href="#4-mkdir-name" class="headerlink" title="4. mkdir(name)"></a>4. mkdir(name)</h3><blockquote><p>作用：创建单级目录</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">&#x27;gl&#x27;</span>)</span><br><span class="line">os.mkdir(<span class="string">&quot;/Users/lhh/Downloads/idea&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-rmdir-filename"><a href="#5-rmdir-filename" class="headerlink" title="5. rmdir(filename)"></a>5. rmdir(filename)</h3><blockquote><p>作用：删除单级目录</p><p>注：若存在子目录，则无法删除，必须为空且存在</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">s.rmdir(<span class="string">&#x27;gl&#x27;</span>)</span><br><span class="line">os.rmdir(<span class="string">&quot;/Users/lhh/Downloads/idea&quot;</span>)  <span class="comment">#删除失败。只能删除目录文件下面是空的</span></span><br><span class="line"><span class="comment"># 如果要删除非空目录的话，就需要调用shutil模块</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.rmtree(<span class="string">&quot;/Users/lhh/Downloads/idea&quot;</span>)  <span class="comment">#成功删除非空的文件夹</span></span><br></pre></td></tr></table></figure><h3 id="6-chdir-filename"><a href="#6-chdir-filename" class="headerlink" title="6.chdir(filename)"></a>6.chdir(filename)</h3><blockquote><p>作用：改变当前文件的工作目录</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">&#x27;../&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="7-listdir-filename"><a href="#7-listdir-filename" class="headerlink" title="7.listdir(filename)"></a>7.listdir(filename)</h3><blockquote><p>作用：返回当前目录下所有文件和文件夹，注意 path 是目录路径</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os<span class="comment"># 初始写法file_list = os.listdir(&quot;dname&quot;)for name in file_list:  #打印列表的名称print(name)     #新写法#使用with自动的去释放资源with os.scandir(&quot;/Users/liuhuanhuan/&quot;) as entries:           for entry in entries:            print(entry.name)            pass</span></span><br></pre></td></tr></table></figure><p>==Demo==</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示范:查看一个文件夹下所有的文件basePath = &quot;/Users/liuhuanhuan/&quot;for entry in os.listdir(basePath):      # if os.path.isfile(os.path.join(basePath,entry)):   #只显示是文件的目录文件名称#     #     print(entry)    if os.path.isdir(os.path.join(basePath,entry)):   #只显示是文件夹的目录名称        print(entry)        pass</span></span><br></pre></td></tr></table></figure><h3 id="8-path-join-filename1-filename2…"><a href="#8-path-join-filename1-filename2…" class="headerlink" title="8.path.join(filename1,filename2….)"></a>8.path.join(filename1,filename2….)</h3><blockquote><p>作用：文件路径地址拼接</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ospath = os.path.join(os.getcwd(),<span class="string">&#x27;gl&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="9-makedirs-filename"><a href="#9-makedirs-filename" class="headerlink" title="9.makedirs(filename)"></a>9.makedirs(filename)</h3><blockquote><p>作用：递归创建目录,只是目录，文件无法创建</p><p>filename 只有最后一层文件夹不存在，前几级必须是已存在的目录，否则创建失败</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> osos.makedirs(<span class="string">&quot;/Users/lhh/Downloads/idea/l/h/h/w/c/y/wo/ai/ni&quot;</span>)  <span class="comment">#允许创建多级目录</span></span><br></pre></td></tr></table></figure><h3 id="10-write-path-str"><a href="#10-write-path-str" class="headerlink" title="10.write(path, str)"></a>10.write(path, str)</h3><blockquote><p>作用：将 bytes 字符串 str 写入 path 所指的文件</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> osos.write(<span class="string">&#x27;/Users/lhh/Downloads/a.txt&#x27;</span>,<span class="string">&#x27;miss you&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="11-chmod-filename"><a href="#11-chmod-filename" class="headerlink" title="11.chmod(filename)"></a>11.chmod(filename)</h3><blockquote><p>作用：改变文件的权限</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> osos.chmod(<span class="string">&#x27;/Users/lhh/Downloads/a.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="13-pardir"><a href="#13-pardir" class="headerlink" title="13.pardir"></a>13.pardir</h3><blockquote><p>作用：指代上一级当前目录</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> osprint(os.pardir)</span><br></pre></td></tr></table></figure><h3 id="14-name"><a href="#14-name" class="headerlink" title="14.name"></a>14.name</h3><blockquote><p>作用：指代当前使用的 操作系统（包括‘java’,’mac’等）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> osprint(os.name)</span><br></pre></td></tr></table></figure><h3 id="15-linesep"><a href="#15-linesep" class="headerlink" title="15.linesep"></a>15.linesep</h3><blockquote><p>作用：当前平台使用的行终止符（win下为‘\r\n’,linux下为‘\n’）</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> osprint(os.linesep)</span><br></pre></td></tr></table></figure><p><strong><u><em>以上均为常使用的方法：</em></u></strong></p><h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a><em>附录：</em></h2><p>==<strong><em>os方法大全</em></strong>==</p><blockquote><p><strong><em>os.path模块</em></strong></p><p>os.path.isdir(‘name’) 判断是否为目录  返回bool</p><p>os.path.isfile(‘name’) 判断是否为文件  返回bool</p><p>os.path.islink(‘name’)判断是否为链接  返回bool</p><p>os.path.getsize(‘name’) 返回文件大小，如果文件不存在 返回错误</p><p>os.path.abspath(‘file<em>name’) 返回的是file</em>那么的绝对路径</p><p>os.path.split(‘file_path’) 返回file_path分割成目录和文件名，以元组方式返回</p><p>os.path.exists(‘file_path’) 如果file_path存在 返回True 反之返回False</p><p>os.path.join(‘file_path’,’file_name’) 连接目录和文件名或者目录</p><p>os.path.isabs() 判断是否是绝对路径</p><p>os.path.exists() 检验给出的路径是否真地存</p><p>os.path.splitext() 分离扩展名</p><p>os.path.dirname() 获取路径名<br>os.path.basename() 获取文件名<br>os.system()  运行shell命令<br>os.getenv() 与os.putenv() 读取和设置环境变量<br>os.stat（file） 获取文件属性<br>os.exit（） 终止当前进程<br>os.path.getsize（filename）获取文件大小</p><p><strong><em>import time 模块</em></strong></p><p>Time.ctime() 返回本地时间</p><p>os.path.getatime() 文件或者目录最后访问的时间</p><p>os.path.getmtime()       最后修改的时间</p><p>os.path.getctime()       创建时间</p></blockquote><p>==代码综合实操：== </p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8 import  reimport  osimport  time#str.split(string)分割字符串#&#x27;连接符&#x27;.join(list) 将列表组成字符串def  change_name(path):     if  not  os.path.isdir(path)  and  not  os.path.isfile(path):         return  False     if  os.path.isfile(path):         file_path  =  os.path.split(path)  #分割出目录与文件         lists  =  file_path[1].split( &#x27;.&#x27; )  #分割出文件与文件扩展名         file_ext  =  lists[ - 1 ]  #取出后缀名(列表切片操作)         img_ext  =  [ &#x27;bmp&#x27; , &#x27;jpeg&#x27; , &#x27;gif&#x27; , &#x27;psd&#x27; , &#x27;png&#x27; , &#x27;jpg&#x27; ]         if  file_ext  in  img_ext:             os.rename(path,file_path[ 0 ] + &#x27;/&#x27; + lists[ 0 ] + &#x27;_fc.&#x27; + file_ext)             i + = 1  #注意这里的i是一个陷阱         #或者         #img_ext = &#x27;bmp|jpeg|gif|psd|png|jpg&#x27;         #if file_ext in img_ext:         #    print(&#x27;ok---&#x27;+file_ext)     elif  os.path.isdir(path):         for  x  in  os.listdir(path):             change_name(os.path.join(path,x))  #os.path.join()在路径处理上很有用  img_dir  =  &#x27;D:\\xx\\xx\\images&#x27;img_dir  =  img_dir.replace( &#x27;\\&#x27;,&#x27; / &#x27;)start  =  time.time()i  =  0change_name(img_dir)c  =  time.time()  -  startprint ( &#x27;程序运行耗时:%0.2f&#x27; % (c))print ( &#x27;总共处理了 %s 张图片&#x27; % (i))</span></span><br></pre></td></tr></table></figure><p>​    </p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】多进程Process</title>
      <link href="/archives/14455.html"/>
      <url>/archives/14455.html</url>
      
        <content type="html"><![CDATA[<p>Python中的多线程无法使用多核的优势，如果想要充分地使用多核CPU的资源（<code>os.cpu_count()</code>查看），在Python中大部分情况需要使用多进程。Python提供了multiprocessing。</p><span id="more"></span><p>multiprocessing模块用来开启子进程，并在子进程中执行我们定制的任务（比如函数），该模块与多线程模块threading的编程接口类似。</p><p><code>multiprocessing</code>模块的功能众多：支持子进程、通信和共享数据、执行不同形式的同步，提供了<code>Process</code>、<code>Queue</code>、<code>Pipe</code>、<code>Lock</code>等组件。</p><p>==注意==：<strong>与线程不同，进程没有任何共享状态，进程修改的数据，改动仅限于该进程内</strong>。</p><h2 id="1-进程-Process"><a href="#1-进程-Process" class="headerlink" title="1.进程-Process"></a>1.进程-Process</h2><h3 id="1-1-方法"><a href="#1-1-方法" class="headerlink" title="1.1 方法"></a>1.1 方法</h3><h4 id="1-1-1-创建进程"><a href="#1-1-1-创建进程" class="headerlink" title="1.1.1 创建进程"></a>1.1.1 创建进程</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Process(group=None, target=None, name=None, args=(), kwargs=&#123;&#125;, *, daemon=None)</span><br></pre></td></tr></table></figure><ul><li><strong>group</strong><br><strong>参数未使用，永远为None</strong>，故本方法应该使用关键字参数调用</li><li><strong>target</strong><br>表示调用对象，即子进程要执行的任务</li><li><strong>name</strong><br>子进程名称</li><li><strong>args</strong><br>传递给线程函数的位置参数,它必须是个tuple类型。，<code>args=(1,2,&#39;egon&#39;)</code></li><li><strong>kwargs</strong><br>传递给线程函数的关键字参数,它必须是个字典类型，<code>kwargs=&#123;&#39;name&#39;:&#39;egon&#39;,&#39;age&#39;:18&#125;</code></li><li><strong>daemon</strong><br>守护进程，<code>True</code> 或者 <code>False</code>，如果不传，则从父类的 <code>daemon</code> 继承</li></ul><h4 id="1-1-2-p-run"><a href="#1-1-2-p-run" class="headerlink" title="1.1.2 p.run()"></a>1.1.2 p.run()</h4><p>进程启动时运行的方法，正是它去调用 <code>target</code> 指定的函数，我们自定义类的类中一定要实现该方法。可以在子类中重写此方法。标准 <code>run()</code> 方法调用传递给对象构造函数的可调用对象作为目标参数（如果有），分别使用 <code>args</code> 和 <code>kwargs</code> 参数中的顺序和关键字参数。</p><h3 id="1-1-3-p-start"><a href="#1-1-3-p-start" class="headerlink" title="1.1.3 p.start()"></a>1.1.3 p.start()</h3><p>启动进程，并调用该子进程中的 <code>run()</code> 方法。</p><h4 id="1-1-4-p-join-timeout-None"><a href="#1-1-4-p-join-timeout-None" class="headerlink" title="1.1.4 p.join(timeout=None)"></a>1.1.4 p.join(timeout=None)</h4><p>主进程等待 <code>p</code> 终止（强调：<strong>是主进程处于等待的状态，而 <code>p</code> 是处于运行的状态</strong>）。</p><blockquote><p><code>timeout</code> 是可选的超时时间（<strong>秒</strong>），<strong>如果可选参数 <code>timeout</code> 是 <code>None</code>（默认值），则该方法将阻塞</strong>，直到调用 <code>join()</code>方法的进程终止。需要强调的是，<code>p.join()</code> 只能 <code>join</code> 住 <code>start</code> 开启的进程，而不能 <code>join</code> 住 <code>run</code> 开启的进程。</p></blockquote><h4 id="1-1-5-p-is-alive"><a href="#1-1-5-p-is-alive" class="headerlink" title="1.1.5 p.is_alive()"></a>1.1.5 p.is_alive()</h4><p>返回进程是否存活。</p><blockquote><p>从 <code>start()</code> 方法返回到子进程终止的那一刻，进程对象仍处于活动状态。</p></blockquote><h4 id="1-1-6-p-terminate"><a href="#1-1-6-p-terminate" class="headerlink" title="1.1.6 p.terminate()"></a>1.1.6 p.terminate()</h4><p>强制终止进程 <code>p</code>，不会进行任何清理操作。</p><blockquote><p><strong>如果 <code>p</code> 创建了子进程，该子进程就成了僵尸进程</strong>，使用该方法需要特别小心这种情况。</p><blockquote><p><strong>如果 <code>p</code> 还保存了一个锁那么也将不会被释放</strong>，进而导致死锁</p></blockquote></blockquote><h3 id="1-2-属性"><a href="#1-2-属性" class="headerlink" title="1.2 属性"></a>1.2 属性</h3><h4 id="1-2-1-p-name"><a href="#1-2-1-p-name" class="headerlink" title="1.2.1 p.name"></a>1.2.1 p.name</h4><p>进程的名称。该名称是一个字符串，仅用于识别目的，它没有语义。可以为多个进程指定相同的名称。</p><p>初始名称由构造器设定。如果没有为构造器提供显式名称，则会构造一个形式为 <code>&#39;Process-N&#39;</code>的名称，表明是其父亲的第 N 个孩子。</p><h4 id="1-2-2-p-pid"><a href="#1-2-2-p-pid" class="headerlink" title="1.2.2 p.pid"></a>1.2.2 <code>p.pid</code></h4><p>返回进程的ID，在调用 <code>start()</code> 方法之前返回 <code>None</code></p><h4 id="1-2-3-p-daemon"><a href="#1-2-3-p-daemon" class="headerlink" title="1.2.3 p.daemon"></a>1.2.3 <code>p.daemon</code></h4><p>进程的守护进程标志，一个布尔值。必须在 <code>start()</code> 调用之前设置，当进程退出时，它会尝试终止其所有守护进程子进程。</p><blockquote><p><strong>注意，不允许守护进程创建子进程</strong>。否则，守护进程会在子进程退出时终止其子进程。</p></blockquote><h4 id="1-2-4-p-exitcode"><a href="#1-2-4-p-exitcode" class="headerlink" title="1.2.4 p.exitcode"></a>1.2.4 <code>p.exitcode</code></h4><p>进程在运行时为 <code>None</code>、如果为<code>–N</code>，表示被信号 <code>N</code> 结束(了解即可)</p><h4 id="1-2-5-p-authkey"><a href="#1-2-5-p-authkey" class="headerlink" title="1.2.5 p.authkey"></a>1.2.5 <code>p.authkey</code></h4><p>进程的身份验证密钥（字节字符串）。</p><p>当 <code>multiprocessing</code> 初始化时，主进程使用 <code>os.urandom()</code> 分配一个随机字符串。</p><p>当创建 <code>Process</code> 对象时，它将继承其父进程的身份验证密钥，尽管可以通过将 <code>authkey</code> 设置为另一个字节字符串来更改。</p><blockquote><p>需要注意的是<strong><code>start()</code></strong>，<strong><code>join()</code></strong>，<strong><code>is_alive()</code></strong>，<strong><code>terminate()</code></strong>和<strong><code>exitcode</code></strong>只能由创建进程对象的过程调用。</p></blockquote><h3 id="1-3-Process-的使用"><a href="#1-3-Process-的使用" class="headerlink" title="1.3 Process 的使用"></a>1.3 Process 的使用</h3><p><strong>在windows中 <code>Process()</code> 必须放到 \</strong><code>if __name__ == &#39;__main__&#39;:</code>*<em>下,<br>    由于Windows没有 <code>fork</code>，多处理模块启动一个新的Python进程并导入调用模块。<br>    如果在导入时调用 <code>Process()</code>，那么这将启动无限继承的新进程(或直到机器耗尽资源)。<br>    这是隐藏对 <code>Process()</code> 内部调用的源，使用 <code>if __name__ == “__main __”</code>，这个 <code>if</code>语句中的语句将不会在导入时被调用。*</em></p><h4 id="1-3-1-创建子进程的两种方法"><a href="#1-3-1-创建子进程的两种方法" class="headerlink" title="1.3.1 创建子进程的两种方法"></a>1.3.1 创建子进程的两种方法</h4><ul><li><strong>通过<code>Process</code>类创建对象</strong></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process-<span class="subst">&#123;name&#125;</span> info stats....&quot;</span>)</span><br><span class="line">    time.sleep(random.randrange(<span class="number">1</span>,<span class="number">5</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Process-<span class="subst">&#123;name&#125;</span> info ends....&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  <span class="comment"># args参数传给target指向的</span></span><br><span class="line">    p1 = Process(target=info,args=(<span class="string">&quot;p1&quot;</span>,))</span><br><span class="line">    p2 = Process(target=info,args=(<span class="string">&quot;p2&quot;</span>,))</span><br><span class="line">    p3 = Process(target=info,args=(<span class="string">&quot;p3&quot;</span>,))</span><br><span class="line">    p4 = Process(target=info,args=(<span class="string">&quot;p4&quot;</span>,))</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    p4.start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主进程&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">主进程</span><br><span class="line">Process-p3 info stats....</span><br><span class="line">Process-p2 info stats....</span><br><span class="line">Process-p1 info stats....</span><br><span class="line">Process-p4 info stats....</span><br><span class="line">Process-p3 info ends....</span><br><span class="line">Process-p1 info ends....</span><br><span class="line">Process-p4 info ends....</span><br><span class="line">Process-p2 info ends....</span><br></pre></td></tr></table></figure><ul><li><p><strong>定义一个类继承 <code>Process</code>，重写 <code>run()</code> 方法，并通过自定义类创建对象</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法二:</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">info</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="comment"># 必须super()方法先，不然会覆盖__name</span></span><br><span class="line">        <span class="built_in">super</span>(info, self).__init__()</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Process-<span class="subst">&#123;self.__name&#125;</span> info stats....&quot;</span>)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Process-<span class="subst">&#123;self.__name&#125;</span> info ends....&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p1 = info(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">    p2 = info(<span class="string">&quot;p2&quot;</span>)</span><br><span class="line">    p3 = info(<span class="string">&quot;p3&quot;</span>)</span><br><span class="line">    p4 = info(<span class="string">&quot;p4&quot;</span>)</span><br><span class="line"></span><br><span class="line">    p1.start()</span><br><span class="line">    p2.start()</span><br><span class="line">    p3.start()</span><br><span class="line">    p4.start()</span><br></pre></td></tr></table></figure></li></ul><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Process-p2 info stats....</span><br><span class="line">Process-p1 info stats....</span><br><span class="line">Process-p4 info stats....</span><br><span class="line">Process-p3 info stats....</span><br><span class="line">Process-p4 info ends....</span><br><span class="line">Process-p2 info ends....</span><br><span class="line">Process-p3 info ends....</span><br><span class="line">Process-p1 info ends....</span><br></pre></td></tr></table></figure><h4 id="1-3-2-进程之间的内存空间是隔离的"><a href="#1-3-2-进程之间的内存空间是隔离的" class="headerlink" title="1.3.2 进程之间的内存空间是隔离的"></a>1.3.2 进程之间的内存空间是隔离的</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 内存隔离测试</span></span><br><span class="line">l = [<span class="number">100</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">work</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程内&#x27;</span>,<span class="built_in">id</span>(l))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=work)</span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;进程内&quot;</span>,<span class="built_in">id</span>(l))</span><br></pre></td></tr></table></figure><p>输出结果:</p><blockquote><p>子进程内 140395963531648<br>进程内 140335095201664</p><p>输出结果不同,因为进程之间的内存空间是不共享的</p></blockquote><h4 id="1-3-3-Process对象的join方法：主进程等-等待子进程结束"><a href="#1-3-3-Process对象的join方法：主进程等-等待子进程结束" class="headerlink" title="1.3.3 Process对象的join方法：主进程等,等待子进程结束"></a>1.3.3 Process对象的join方法：主进程等,等待子进程结束</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">info</span>(<span class="title class_ inherited__">Process</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="built_in">super</span>(info, self).__init__()</span><br><span class="line">        self.__name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Process-<span class="subst">&#123;self.__name&#125;</span> run starts...&quot;</span>)</span><br><span class="line">        time.sleep(random.randrange(<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Process-<span class="subst">&#123;self.__name&#125;</span> run ends...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p = info(<span class="string">&quot;p1&quot;</span>)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主进程start&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>父进程join,就允许子进程执行完再执行父进程,如果没有join语句,执行顺序不一定，但是，创建子进程需要时间（比如分配内存等）,故总是看到父进程先执行</p></blockquote><h4 id="1-3-4-守护进程"><a href="#1-3-4-守护进程" class="headerlink" title="1.3.4 守护进程"></a>1.3.4 守护进程</h4><h5 id="1-3-4-1-守护子进程"><a href="#1-3-4-1-守护子进程" class="headerlink" title="1.3.4.1 守护子进程"></a>1.3.4.1 守护子进程</h5><p>主进程创建守护进程：</p><ul><li>守护进程会在主进程代码执行结束后就终止</li><li>守护进程内无法再开启子进程,否则抛出异常</li></ul><blockquote><p>【注】进程之间是互相独立的，主进程代码运行结束，守护进程随即终止</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>():</span><br><span class="line">    <span class="comment"># os.getpid() 获取进程pid</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is running&#x27;</span> % os.getpid())</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s is done&#x27;</span> % os.getpid())</span><br><span class="line">    <span class="comment"># 注意，守护进程内无法再开启子进程,否则抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    p = Process(target=task)</span><br><span class="line">    p.daemon = <span class="literal">True</span>   <span class="comment"># 开启守护进程  必须是在start之前</span></span><br><span class="line">    p.start()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;主&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">26433</span> <span class="keyword">is</span> running主进程</span><br></pre></td></tr></table></figure><blockquote><p>原因是:主进程先创建子进程p,然后休眠1s,在这期间p进程创建完毕,并执行,所以先打印了第一行字符串，然后主进程苏醒（没苏醒由于 <code>p</code> 进程休眠 <code>2s</code>，也会执行它的）打印主进程的字符串，结束主进程，<code>p</code> 作为守护进程也随之毁灭，故 <code>p</code>进程的第二行字符串不会执行打印。</p></blockquote><h5 id="1-3-4-2-守护子进程、非守护子进程并存"><a href="#1-3-4-2-守护子进程、非守护子进程并存" class="headerlink" title="1.3.4.2 守护子进程、非守护子进程并存"></a>1.3.4.2 守护子进程、非守护子进程并存</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():    <span class="built_in">print</span>(<span class="number">123</span>)    time.sleep(<span class="number">1</span>)    <span class="built_in">print</span>(<span class="string">&quot;end123&quot;</span>)<span class="keyword">def</span> <span class="title function_">bar</span>():    <span class="built_in">print</span>(<span class="number">456</span>)    time.sleep(<span class="number">3</span>)    <span class="built_in">print</span>(<span class="string">&quot;end456&quot;</span>)<span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    p1 = Process(target=foo)    p2 = Process(target=bar)    p1.daemon =<span class="literal">True</span>    p1.start()    p2.start()    <span class="built_in">print</span>(<span class="string">&quot;main.....&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main....<span class="number">.456</span>end456</span><br></pre></td></tr></table></figure><blockquote><p>说明：由于p1.p2 都是子进程，需要开辟内存空间，需要耗费时间，所有会优先输出子进程<strong>main</strong>,由于守护子进程,p2是非守护子进程，当<strong>main</strong>进程执行完毕，p1守护进程也就退了,但是还有一个p2非守护进程成为孤儿进程，它会被程序等进程供养，所以p2会执行自己的代码任务，当p 2执行完毕，整个程序就退出了。</p></blockquote><h2 id="2-进程池-Pool"><a href="#2-进程池-Pool" class="headerlink" title="2.进程池-Pool"></a>2.进程池-Pool</h2><p><code>Multiprocessing.Pool</code>可以提供指定数量的进程供用户调用，当有新的请求提交到<code>Pool</code>中时，如果池还没有满，那么就会创建一个新的进程用来执行该请求；但如果池中的进程数已经达到规定最大值，那么该请求就会等待，直到池中有进程结束，才会创建新的进程来执行它。<code>pool</code>类用于需要执行的目标很多，而手动限制进程数量又太繁琐时，如果目标少且不用控制进程数量则可以用<code>Process</code>类。</p><h3 id="2-1-方法"><a href="#2-1-方法" class="headerlink" title="2.1 方法"></a>2.1 方法</h3><h4 id="2-1-1-创建线程池"><a href="#2-1-1-创建线程池" class="headerlink" title="2.1.1 创建线程池"></a>2.1.1 创建线程池</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Pool(processes=<span class="literal">None</span>, initializer=<span class="literal">None</span>, initargs=(), maxtasksperchild=<span class="literal">None</span>, context=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>processes</strong><br>要使用的工作进程数。如果进程是 <code>None</code>，那么使用返回的数字 <code>os.cpu_count()</code>，也就是说根据本地的CPU个数决定</li><li><strong>initializer</strong><br>如果 <code>initializer</code> 是 <code>None</code>，那么每一个工作进程在开始的时候会调用 <code>initializer(*initargs)</code></li><li><strong>initargs</strong><br>调用 <code>initializer</code> 的参数</li><li><strong>maxtasksperchild</strong><br>工作进程退出之前可以完成的任务数，完成后用一个新的工作进程来替代原进程，来让闲置的资源被释放。<code>maxtasksperchild</code> 默认是 <code>None</code>，意味着只要 <code>Pool</code>存在工作进程就会一直存活</li><li><strong>context</strong><br>用在制定工作进程启动时的上下文，一般使用 <code>multiprocessing.Pool()</code> 或者一个 <code>context</code> 对象的 <code>Pool()</code> 方法来创建一个池，两种方法都适当的设置了 <code>context</code>。</li></ul><h4 id="2-1-2-p-apply-func-args-kwds"><a href="#2-1-2-p-apply-func-args-kwds" class="headerlink" title="2.1.2 p.apply(func,args=(),kwds={})"></a>2.1.2 p.apply(func,args=(),kwds={})</h4><p><strong>Equivalent of func(*args, \</strong>kwds), Pool must be running**。它会阻塞其他进程(包括线程池中的其他进程和 <code>main</code> 进程)，直到结果准备就绪。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pooldef test(p):    <span class="built_in">print</span>(p)<span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    pool = Pool(<span class="number">3</span>)    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):        pool.apply(test,args=(i,))    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">0123test</span><br></pre></td></tr></table></figure><blockquote><p>test 最后打印是因为前面执行了apply()函数阻塞了，等apply 执行完才会继续执行下面</p></blockquote><h4 id="2-1-3-p-apply-async"><a href="#2-1-3-p-apply-async" class="headerlink" title="2.1.3 p.apply_async()"></a>2.1.3 p.apply_async()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">apply_async(func, args=(), kwds=&#123;&#125;, callback=<span class="literal">None</span>,error_callback=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>在一个池工作进程中执行 <code>func(*args,**kwds)</code>，然后返回结果。此方法的结果是 <code>AsyncResult</code> 类的实例，<code>callback</code> 是可调用对象，接收一个参数，当结果变为 <code>ready</code> 时，将回调函数应用于它。回调应该立即完成，否则处理结果的线程将被阻塞。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">p</span>):    time.sleep(random.randrange(<span class="number">2</span>))    <span class="keyword">return</span> p*pif __name__ == <span class="string">&quot;__main__&quot;</span>:    pool = Pool(processes=<span class="number">2</span>)    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):        pool.apply_async(test,args=(i,),callback=<span class="built_in">print</span>)    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)    <span class="comment"># 必须要先close,禁止向池中添加任务，不然join会出错    pool.close()    # 没有这个代码，直接输出test后，程序将会停止    pool.join()</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test14169</span><br></pre></td></tr></table></figure><blockquote><p>上面的程序是，多进程执行 <code>test()</code>函数，如果执行没问题返回<code>ready</code>，就对 <code>test</code> 的结果执行<code>callback</code> 指定的回调函数</p><p><code>apply_async()</code> 不阻塞主进程，<code>callback</code> 的入参是 <code>func()</code> 的返回值</p></blockquote><p>总结一下，<code>apply_async</code>方法是异步方法，可以不等先添加到进程池的方法执行完，就异步地继续添加方法到进程池中；而 <code>apply</code> 方法是同步方法，必须等上一个函数执行完再添加。打个比方，执行的函数要休眠3 s，显然异步 <code>apply_async</code> 几乎3 s就结束，而 <code>apply</code> 方法随子进程增加，耗时也是线性增加。<code>apply_async</code> 也是Python官方推荐的方法。</p><h4 id="2-1-4-p-map"><a href="#2-1-4-p-map" class="headerlink" title="2.1.4 p.map()"></a>2.1.4 p.map()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(func, iterable, chunksize=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><code>map()</code>内置函数的并行等价物（尽管它只支持一个可迭代的参数）。它会阻塞 <code>main</code>，直到结果准备就绪。可以把传入的 <code>Iterable</code> 对象分成多个块，通过将 <code>chunksize</code>设置块的大小，将这些块作为单独的任务提交给进程池，不传值时，会自动根据 <code>Iterable</code> 对象和进程池的大小自动确定。返回值是 <code>list</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">int2str</span>(<span class="params">n</span>):    <span class="keyword">return</span> <span class="built_in">str</span>(n)<span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:    pool = Pool(processes=<span class="number">2</span>)    l = [<span class="number">6</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]    <span class="comment"># map的结果可以迭代    for n in pool.map(int2str,l):        print(n,end=&quot;&quot;)    print(&quot;\n test&quot;)</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">644476114</span> test</span><br></pre></td></tr></table></figure><blockquote><p>Main 进程被阻塞，test 是最后打印的</p></blockquote><h4 id="2-1-5-p-map-async"><a href="#2-1-5-p-map-async" class="headerlink" title="2.1.5 p.map_async()"></a>2.1.5 p.map_async()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">map_async(self, func, iterable, chunksize=<span class="literal">None</span>, callback=<span class="literal">None</span>,error_callback=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p><code>map()</code>返回结果对象的方法的变体，异步执行，不阻塞<code>main</code>进程。返回值是<code>ApplyResult</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">x</span>):    <span class="built_in">print</span>(x)    time.sleep(<span class="number">0.5</span>) <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:pool = Pool(processes=<span class="number">2</span>)    pool.map_async(show, <span class="built_in">range</span>(<span class="number">50</span>))    time.sleep(<span class="number">1</span>)    <span class="built_in">print</span>(<span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">0718test</span><br></pre></td></tr></table></figure><blockquote><p><code>map_async()</code>在<code>main</code>进程停止后会跟着停止</p></blockquote><h4 id="2-1-6-p-imap"><a href="#2-1-6-p-imap" class="headerlink" title="2.1.6 p.imap()"></a>2.1.6 p.imap()</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imap(func, iterable, chunksize=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>①大体功能上和内置的map()方法的功能是一样的</p><p>②返回的是一个<code>Generator</code>，是一种<strong>lazier</strong>版本的<code>map()</code>方法</p><p>③该方法不会阻塞<code>main</code>进程，<code>main</code>进程结束，程序就结束</p><h4 id="2-1-7-p-close"><a href="#2-1-7-p-close" class="headerlink" title="2.1.7 p.close()"></a>2.1.7 p.close()</h4><p>防止向池提交任何其他任务。一旦所有任务完成，工作进程将退出</p><h4 id="2-1-8-p-terminate"><a href="#2-1-8-p-terminate" class="headerlink" title="2.1.8 p.terminate()"></a>2.1.8 p.terminate()</h4><p>立即停止工作进程而不完成未完成的工作。当池对象被垃圾收集时，<code>terminate()</code>将立即调用</p><h4 id="2-1-9-p-join"><a href="#2-1-9-p-join" class="headerlink" title="2.1.9 p.join()"></a>2.1.9 p.join()</h4><p>必须在<code>close()</code>之后执行。</p><p>必须等待进程池任务都结束，程序才能结束（相当于<strong>join</strong>住<code>main</code>进程）</p><h3 id="2-2-ApplyResult（AsyncResult它的是别名）"><a href="#2-2-ApplyResult（AsyncResult它的是别名）" class="headerlink" title="2.2 ApplyResult（AsyncResult它的是别名）"></a>2.2 ApplyResult（AsyncResult它的是别名）</h3><p><code>Pool</code> 中 <code>apply_async()</code> 和 <code>map_async()</code> 的方法返回值是 <code>AsyncResult</code> 的实例（或者是它子类的实例）obj。实例具有以下方法：</p><ul><li><code>obj.get(timeout=None)</code><br>返回结果的值，如果设置<code>timeout</code>，则要在规定时间内返回结果，否则报错</li><li><code>obj.ready()</code><br>如果 <code>Pool</code> 的方法调用完成，则返回 <code>True</code></li><li><code>obj.successful()</code><br>如果调用完成且没有引发异常，返回 <code>True</code>，如果在 <code>obj.ready()</code> 为 <code>True</code> 之前调用此方法，将引发异常</li><li><code>obj.wait(timeout=None)</code><br>等待结果可用或超时秒过去</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】zip函数的使用</title>
      <link href="/archives/1937.html"/>
      <url>/archives/1937.html</url>
      
        <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><strong>zip()</strong> 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的对象，这样做的好处是节约了不少的内存。</p><p>我们可以使用 list() 转换来输出列表。</p><span id="more"></span><p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 <strong>*</strong> 号操作符，可以将元组解压为列表。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>zip 语法：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">zip</span>([iterable, ...])</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>iterabl — 一个或多个迭代器;</li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回一个对象。</p><h2 id="实例demo"><a href="#实例demo" class="headerlink" title="实例demo"></a>实例demo</h2><p> <strong><code>返回一个对象</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">d = <span class="built_in">zip</span>(a,b)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"><span class="comment"># 转换为list的形式,返回的是一个元组的形式</span></span><br><span class="line">d_list = <span class="built_in">list</span>(d)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> d_list:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print    &lt;zip object at 0x7f94a3699140&gt;</span></span><br><span class="line"><span class="comment"># print(1, 4)</span></span><br><span class="line"><span class="comment">#      (2, 5)</span></span><br><span class="line"><span class="comment">#      (3, 6)</span></span><br></pre></td></tr></table></figure><p><strong><code>当只有一个参数的时候</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">zz=<span class="built_in">list</span>(<span class="built_in">zip</span>(a))</span><br><span class="line"><span class="built_in">print</span>(zz)</span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print [(1,), (2,), (3,)]</span></span><br></pre></td></tr></table></figure><p><strong><code>当没有参数的时候</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">zz=<span class="built_in">list</span>(<span class="built_in">zip</span>())</span><br><span class="line"><span class="built_in">print</span>(zz)</span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><p><strong><code>压缩长度不一致的数组，元素的个数与长度最短的数组相关</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">c = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">e_list =  <span class="built_in">list</span>(<span class="built_in">zip</span>(a,c))</span><br><span class="line"><span class="built_in">print</span>(e_list)</span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print [(1, 4), (2, 5), (3, 6)]</span></span><br></pre></td></tr></table></figure><p><strong><code>与 zip 相反，zip(*) 可理解为解压，返回二维矩阵式</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]b = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]a1,a2 = <span class="built_in">zip</span>(*<span class="built_in">zip</span>(a,b))<span class="built_in">print</span>(a1,a2)</span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># print (1, 2, 3) (4, 5, 6)</span></span><br></pre></td></tr></table></figure><p><strong><code>通过解压操作之后，输出的是元组类型，而并不是原来的类型，但是值并不会发生改变，除非原来的参数列表长度不一样，看下面的代码</code></strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npa = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]b = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]<span class="comment"># zz = list(zip(a,b))a,b = zip(*zip(a,b))print(a,b)</span></span><br></pre></td></tr></table></figure><p>print</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>unzip后的列表b的值都少了，但是里面的值还是不变的。</p><p><code>扩展</code>：</p><p>机器学习模型训练中，经常需要打乱数据集，用 zip() 函数可以实现如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机种子,保证每次生成随机相同，方便重现</span></span><br><span class="line">random.seed(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">y = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">zipped_data = <span class="built_in">list</span>(<span class="built_in">zip</span>(x,y))</span><br><span class="line"><span class="comment"># 打乱样本的数据 打乱样本的数据 random使用的是原地操作的方式，没有任何 返回值</span></span><br><span class="line">random.shuffle(zipped_data)</span><br><span class="line"><span class="comment"># print(zipped_data)</span></span><br><span class="line"><span class="comment"># 打乱后[(1, 0), (4, 0), (2, 1), (5, 1), (3, 0), (6, 1)]</span></span><br><span class="line"><span class="comment"># 原始 [(1, 0), (2, 1), (3, 0), (4, 0), (5, 1), (6, 1)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zip(*)反向解压，map()逐项转换类型，list()做最后转换</span></span><br><span class="line">zipped_data2 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">list</span>,<span class="built_in">zip</span>(*zipped_data)))</span><br><span class="line"><span class="built_in">print</span>(zipped_data2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(zipped_data2[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(zipped_data2[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>print:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line">[<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python】SMTP发送邮件</title>
      <link href="/archives/52552.html"/>
      <url>/archives/52552.html</url>
      
        <content type="html"><![CDATA[<p>SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。</p><p>python的smtplib提供了一种很方便的途径发送电子邮件。它对smtp协议进行了简单的封装。</p><p>Python创建 SMTP 对象语法如下：</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line">smtpObj = smtplib.SMTP( [host [, port [, local_hostname]]] )</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>host: SMTP 服务器主机。 你可以指定主机的ip地址或者域名如:runoob.com，这个是可选参数</li><li>port: 如果你提供了 host 参数, 你需要指定 SMTP 服务使用的端口号，一般情况下SMTP端口号为25。</li><li>local_hostname: 如果SMTP在你的本机上，你只需要指定服务器地址为 localhost 即可。</li></ul><p>Python SMTP对象使用sendmail方法发送邮件，语法如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SMTP.sendmail(from_addr, to_addrs, msg[, mail_options, rcpt_options]</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>from_addr: 邮件发送者地址。</li><li>to_addrs: 字符串列表，邮件发送地址。</li><li>msg: 发送消息</li></ul><p>这里要注意一下第三个参数，msg是字符串，表示邮件。我们知道邮件一般由标题，发信人，收件人，邮件内容，附件等构成，发送邮件的时候，要注意msg的格式。这个格式就是smtp协议中定义的格式。</p><p>==实例==</p><p>​    <em>163邮箱发送测试邮件到QQ邮件</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件服务器地址</span></span><br><span class="line">smtp_server = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送方账号</span></span><br><span class="line">sender = <span class="string">&#x27;xxxxxxxxx@163.com&#x27;</span></span><br><span class="line"><span class="comment"># 发送方密码（或授权密码）</span></span><br><span class="line">password = <span class="string">&#x27;xxxxxxxxx&#x27;</span></span><br><span class="line"><span class="comment"># 收件方邮箱</span></span><br><span class="line">receiver = <span class="string">&#x27;xxxxxxx@qq.com&#x27;</span></span><br><span class="line"><span class="comment"># 邮件标题</span></span><br><span class="line">subject = <span class="string">&#x27;Python SMTP 测试邮件&#x27;</span></span><br><span class="line"><span class="comment"># 邮件内容</span></span><br><span class="line">mail_msg = <span class="string">&#x27;Python 测试邮件发送。。。。&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个参数：第一个为文本内容，第二个 plain 设置文本格式，html 设置文本格式为html格式  第三个 utf-8 设置编码</span></span><br><span class="line">message = MIMEText(mail_msg, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 发送内容 （文本内容，发送格式，编码格式）</span></span><br><span class="line"><span class="comment"># 发送地址</span></span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line"><span class="comment"># 接受地址</span></span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>] = receiver</span><br><span class="line"><span class="comment"># 邮件标题</span></span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 创建SMTP对象</span></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    smtp.connect(smtp_server)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录邮箱账号</span></span><br><span class="line">    smtp.login(sender, password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送账号信息</span></span><br><span class="line">    smtp.sendmail(sender, receiver, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success:发送成功&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error:邮件发送失败&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    smtp.quit()</span><br></pre></td></tr></table></figure><p>我们使用三个引号来设置邮件信息，标准邮件需要三个头部信息： <strong>From</strong>, <strong>To</strong>, 和 <strong>Subject</strong> ，每个信息直接使用空行分割。</p><p>我们通过实例化 smtplib 模块的 SMTP 对象 <em>smtpObj</em> 来连接到 SMTP 访问，并使用 <em>sendmail</em> 方法来发送信息。</p><p>程序结果：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf6hk1uthj30lq06xweu.jpg" alt="image-20210107154721239" style="zoom:50%;" /></p><blockquote><p>注意：第一次发送邮件时，如果填写发送方的账号密码可能回出现错误：smtplib.SMTPAuthenticationError: (535, b’Error: authentication failed’)</p><p>此时需要去发送方对应的邮箱设置中找到smtp的授权密码：参考（<a href="https://jingyan.baidu.com/article/c275f6ba33a95de33d7567d9.html）开启后，填写授权码在密码处，重新发送即可">https://jingyan.baidu.com/article/c275f6ba33a95de33d7567d9.html）开启后，填写授权码在密码处，重新发送即可</a></p></blockquote><h2 id="使用Python发送HTML格式的邮件"><a href="#使用Python发送HTML格式的邮件" class="headerlink" title="使用Python发送HTML格式的邮件"></a>使用Python发送HTML格式的邮件</h2><p>Python发送HTML格式的邮件与发送纯文本消息的邮件不同之处就是将MIMEText中_subtype设置为html。具体代码如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件服务器地址</span></span><br><span class="line">smtp_server = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送方账号</span></span><br><span class="line">sender = <span class="string">&#x27;xxxxxxxxx@163.com&#x27;</span></span><br><span class="line"><span class="comment"># 发送方密码（或授权密码）</span></span><br><span class="line">password = <span class="string">&#x27;xxxxxxxxx&#x27;</span></span><br><span class="line"><span class="comment"># 收件方邮箱</span></span><br><span class="line">receiver = <span class="string">&#x27;xxxxxxx@qq.com&#x27;</span></span><br><span class="line"><span class="comment"># 邮件标题</span></span><br><span class="line">subject = <span class="string">&#x27;Python SMTP 测试邮件&#x27;</span></span><br><span class="line"><span class="comment"># 邮件内容</span></span><br><span class="line">mail_msg =  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;这是一个链接&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个参数：第一个为文本内容，第二个 plain 设置文本格式，html 设置文本格式为html格式  第三个 utf-8 设置编码</span></span><br><span class="line">message = MIMEText(mail_msg, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 发送内容 （文本内容，发送格式，编码格式）</span></span><br><span class="line"><span class="comment"># 发送地址</span></span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line"><span class="comment"># 接受地址</span></span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>] = receiver</span><br><span class="line"><span class="comment"># 邮件标题</span></span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 创建SMTP对象</span></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    smtp.connect(smtp_server)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录邮箱账号</span></span><br><span class="line">    smtp.login(sender, password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送账号信息</span></span><br><span class="line">    smtp.sendmail(sender, receiver, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success:发送成功&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error:邮件发送失败&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    smtp.quit()</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmf7mbspynj313w0bu3zj.jpg" alt="image-20210107162702921" style="zoom:50%;" /></p><h2 id="Python-发送带附件的邮件"><a href="#Python-发送带附件的邮件" class="headerlink" title="Python 发送带附件的邮件"></a>Python 发送带附件的邮件</h2><p><em>发送带附件的邮件，首先要创建MIMEMultipart()实例，然后构造附件，如果有多个附件，可依次构造，最后利用smtplib.smtp发送。</em></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件服务器地址</span></span><br><span class="line">smtp_server = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送方账号</span></span><br><span class="line">sender = <span class="string">&#x27;x x x x xxx@163.com&#x27;</span></span><br><span class="line"><span class="comment"># 发送方密码（或授权密码）</span></span><br><span class="line">password = <span class="string">&#x27;xxxxxxx&#x27;</span></span><br><span class="line"><span class="comment"># 收件方邮箱</span></span><br><span class="line">receiver = <span class="string">&#x27;xxxxxxxxx@qq.com&#x27;</span></span><br><span class="line"><span class="comment"># 邮件标题</span></span><br><span class="line">subject = <span class="string">&#x27;Python SMTP 测试邮件&#x27;</span></span><br><span class="line"><span class="comment"># 邮件内容</span></span><br><span class="line">mail_msg =  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;这是一个链接&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个带附件的实例</span></span><br><span class="line">message = MIMEMultipart()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个参数：第一个为文本内容，第二个 plain 设置文本格式，html 设置文本格式为html格式  第三个 utf-8 设置编码</span></span><br><span class="line"><span class="comment"># message = MIMEText(mail_msg, &#x27;html&#x27;, &#x27;utf-8&#x27;)  # 发送内容 （文本内容，发送格式，编码格式）</span></span><br><span class="line"><span class="comment"># 发送地址</span></span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line"><span class="comment"># 接受地址</span></span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>] = receiver</span><br><span class="line"><span class="comment"># 邮件标题</span></span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加邮件正文内容</span></span><br><span class="line">message.attach(MIMEText(mail_msg, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造附件1，传送当前目录下的 809147873.jpeg 文件</span></span><br><span class="line">att1 = MIMEText(<span class="built_in">open</span>(<span class="string">&#x27;809147873.jpeg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 此处为固定的格式，可以在浏览器中查看到相关信息</span></span><br><span class="line">att1[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line"><span class="comment"># 这里的 filename 命名任意，即在邮件中显示的名称</span></span><br><span class="line">att1[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&#x27;attachment; filename=&quot;809147873.jpeg&quot;&#x27;</span></span><br><span class="line">message.attach(att1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以发送多个附件</span></span><br><span class="line"><span class="comment"># # 构造附件2，传送当前目录下的 1543852953700.jpg 文件 由于使用的是图片，采用base64加密方式进行传输</span></span><br><span class="line">att2 = MIMEText(<span class="built_in">open</span>(<span class="string">&#x27;1543852953700.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">att2[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">att2[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&#x27;attachment; filename=&quot;1543852953700.jpg&quot;&#x27;</span></span><br><span class="line">message.attach(att2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 创建SMTP对象</span></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    smtp.connect(smtp_server)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录邮箱账号</span></span><br><span class="line">    smtp.login(sender, password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送账号信息</span></span><br><span class="line">    smtp.sendmail(sender, receiver, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success:发送成功&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error:邮件发送失败&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    smtp.quit()</span><br></pre></td></tr></table></figure><p>实验结果：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfa0v1mb4j313u0h677a.jpg" alt="image-20210107175014035" style="zoom:50%;" /></p><p><img src="Users/liuhuanhuan/Library/Application Support/typora-user-images/image-20210107175241392.png" alt="image-20210107175241392" style="zoom:50%;" /></p><h2 id="在-HTML-文本中添加图片并多人发送"><a href="#在-HTML-文本中添加图片并多人发送" class="headerlink" title="在 HTML 文本中添加图片并多人发送"></a>在 HTML 文本中添加图片并多人发送</h2><p>邮件的 HTML 文本中一般邮件服务商添加外链是无效的，正确添加图片的实例如下所示：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送邮件服务器地址</span></span><br><span class="line">smtp_server = <span class="string">&#x27;smtp.163.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送方账号</span></span><br><span class="line">sender = <span class="string">&#x27;xxxxxx@163.com&#x27;</span></span><br><span class="line"><span class="comment"># 发送方密码（或授权密码）</span></span><br><span class="line">password = <span class="string">&#x27;xxxxxxxx&#x27;</span></span><br><span class="line"><span class="comment"># 收件方邮箱</span></span><br><span class="line"><span class="comment"># 发送多个时可能存在图片不显示的问题</span></span><br><span class="line">receiver = [<span class="string">&#x27;xxxxx@qq.com&#x27;</span>,<span class="string">&#x27;xxxxx9@qq.com&#x27;</span>]</span><br><span class="line"><span class="comment"># receiver = &#x27;xxxxx@qq.com&#x27;</span></span><br><span class="line"><span class="comment"># 邮件标题</span></span><br><span class="line">subject = <span class="string">&#x27;Python SMTP 文本新增图片及多人发送&#x27;</span></span><br><span class="line"><span class="comment"># 邮件内容</span></span><br><span class="line">mail_msg =  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            &lt;p&gt;Python 邮件发送测试...&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot;&gt;这是一个链接&lt;/a&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;图片演示：&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;&lt;img src=&quot;cid:img&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个带附件的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MIME邮件中除了可以携带各种附件外，还可以将其它内容以内嵌资源的方式存储在邮件中</span></span><br><span class="line">message = MIMEMultipart(<span class="string">&#x27;related&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送地址</span></span><br><span class="line">message[<span class="string">&#x27;From&#x27;</span>] = sender</span><br><span class="line"><span class="comment"># 接受地址</span></span><br><span class="line">message[<span class="string">&#x27;To&#x27;</span>] = <span class="string">&#x27;,&#x27;</span>.join(receiver)</span><br><span class="line"><span class="comment"># 邮件标题</span></span><br><span class="line">message[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 构造正文内容</span></span><br><span class="line"><span class="comment"># MIME邮件可以传送超文本内容，但出于兼容性的考虑，一般在发送超文本格式内容的同时会同时发送一个纯文本内容的副本，</span></span><br><span class="line"><span class="comment"># 如果邮件中同时存在纯文本和超文本内容，则邮件需要在Content-Type域中定义multipart/alternative类型，</span></span><br><span class="line"><span class="comment"># 邮件通过其boundary中的分段标识将纯文本、超文本和邮件的其它内容分成不同的段。</span></span><br><span class="line">body = MIMEMultipart(<span class="string">&#x27;alternative&#x27;</span>)</span><br><span class="line">body.attach(MIMEText(mail_msg, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 读取需要在邮件正文显示的图片</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;809147873.jpeg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    msgImage = MIMEImage(f.read())</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 定义图片 ID，在 HTML 文本中引用</span></span><br><span class="line">msgImage.add_header(<span class="string">&#x27;Content-ID&#x27;</span>, <span class="string">&#x27;&lt;img&gt;&#x27;</span>)</span><br><span class="line">message.attach(msgImage)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">message.attach(body)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 构造附件1，传送当前目录下的 809147873.jpeg 文件</span></span><br><span class="line">att1 = MIMEText(<span class="built_in">open</span>(<span class="string">&#x27;809147873.jpeg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># 此处为固定的格式，可以在浏览器中查看到相关信息</span></span><br><span class="line">att1[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line"><span class="comment"># 这里的 filename 命名任意，即在邮件中显示的名称</span></span><br><span class="line">att1[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&#x27;attachment; filename=&quot;809147873.jpeg&quot;&#x27;</span></span><br><span class="line">message.attach(att1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以发送多个附件</span></span><br><span class="line"><span class="comment"># # 构造附件2，传送当前目录下的 1543852953700.jpg 文件 由于使用的是图片，采用base64加密方式进行传输</span></span><br><span class="line">att2 = MIMEText(<span class="built_in">open</span>(<span class="string">&#x27;1543852953700.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read(), <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">att2[<span class="string">&quot;Content-Type&quot;</span>] = <span class="string">&#x27;application/octet-stream&#x27;</span></span><br><span class="line">att2[<span class="string">&quot;Content-Disposition&quot;</span>] = <span class="string">&#x27;attachment; filename=&quot;1543852953700.jpg&quot;&#x27;</span></span><br><span class="line">message.attach(att2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 创建SMTP对象</span></span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    smtp.connect(smtp_server,port=<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录邮箱账号</span></span><br><span class="line">    smtp.login(sender, password)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送账号信息</span></span><br><span class="line">    smtp.sendmail(sender, receiver, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;success:发送成功&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> smtplib.SMTPException:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error:邮件发送失败&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭</span></span><br><span class="line">    smtp.quit()</span><br></pre></td></tr></table></figure><p>实验结果：</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEgy1gmfbd0pl6rj31620qyat0.jpg" alt="image-20210107183619242" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python强化】assert的使用方式</title>
      <link href="/archives/51865.html"/>
      <url>/archives/51865.html</url>
      
        <content type="html"><![CDATA[<h2 id="assert-的作用"><a href="#assert-的作用" class="headerlink" title="assert 的作用"></a>assert 的作用</h2><h3 id="一、python-assert的作用："><a href="#一、python-assert的作用：" class="headerlink" title="一、python assert的作用："></a>一、python assert的作用：</h3><span id="more"></span><p><a href="https://docs.python.org/3/reference/simple_stmts.html#assert">官方文档：</a></p><blockquote><p>assert 断言成功则继续进行，断言失败则<strong>程序报错（类似于java中的异常捕捉，自定义异常</strong>）</p><p>1.断言能够别人更好的理解自己的代码</p><p>2.找出程序中逻辑不对的一方面</p><p>3.断言会提示某个对象会处于何种状态</p><p>4.另一方面，如果断言为假会抛出异常，很有可能终止程序</p></blockquote><h3 id="二、一般用法"><a href="#二、一般用法" class="headerlink" title="二、一般用法"></a>二、一般用法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> condition</span><br><span class="line"><span class="comment"># 用来让程序测试这个condition，如果condition为false，那么raise一个AssertionError出来。逻辑上等同于：</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> condition:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError()</span><br></pre></td></tr></table></figure><p>语法：<code>assert expression1 [, expression2]</code></p><blockquote><p><code>expresssion1</code> 是要判断的表达式，<code>expression2</code> 是可选的，用于返回错误信息</p></blockquote><p>【注意】</p><ul><li>不要使用断言验证数据，因为有可能程序被禁用断言</li><li>不要写出永远不会失败的断言</li></ul><p>例如：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">assert</span> a == <span class="number">2</span>,Exception(<span class="string">&#x27;不等于2&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ok&#x27;</span>,<span class="number">2</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>  __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PyCINRAD】 pycinrad模块的安装</title>
      <link href="/archives/52064.html"/>
      <url>/archives/52064.html</url>
      
        <content type="html"><![CDATA[<pre><code>**PyCINRAD**模块用于读取**CINRAD**雷达数据，进行相关计算并可视化的模块，该模块支持**SA/SB/CB**三种雷达数据格式</code></pre><p>​     <strong>GitHub</strong>主页：<a href="https://github.com/CyanideCN/PyCINRAD/blob/master/README_zh.md">https://github.com/CyanideCN/PyCINRAD/blob/master/README_zh.md</a></p><p>​    <strong>PyCINRAD源码</strong>：<a href="https://github.com/liuhuanhuan963019/PyCINRAD.git">https://github.com/liuhuanhuan963019/PyCINRAD.git</a></p><span id="more"></span><h1 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h1><ul><li><strong>Python 3.6</strong></li><li><strong>Cartopy</strong></li><li><strong>Metpy</strong></li><li><strong>Shapefile</strong></li><li><strong>Pykdtree</strong>(可选安装)</li></ul><h1 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h1><h2 id="1-安装Anaconda"><a href="#1-安装Anaconda" class="headerlink" title="1. 安装Anaconda"></a>1. 安装Anaconda</h2><p>​     在众多Python开发环境中，Anaconda3因为集成安装大量扩展库，得到了很多Python学习者和开发人员尤其是科研人员的喜爱。<br>​     安装教程推荐<a href="https://www.jianshu.com/p/169403f7e40c">https://www.jianshu.com/p/169403f7e40c</a></p><h2 id="2-安装-Microsoft-visual-c-14-0"><a href="#2-安装-Microsoft-visual-c-14-0" class="headerlink" title="2. 安装 Microsoft visual c++ 14.0"></a>2. 安装 Microsoft visual c++ 14.0</h2><p>​     下载地址: <a href="https://pan.baidu.com/s/169X5Q6KMon4VCcsbP0UpAA，提取码">https://pan.baidu.com/s/169X5Q6KMon4VCcsbP0UpAA，提取码</a>: k7qs</p><blockquote><p>如果出现了.Net framework版本过低，小于4.5的最低版本要求，重新安装 .Net framework 更高的版本，下载地址：<a href="https://support.microsoft.com/en-us/help/3151800/the-net-framework-4-6-2-offline-installer-for-windows，之后再安装Microsoft">https://support.microsoft.com/en-us/help/3151800/the-net-framework-4-6-2-offline-installer-for-windows，之后再安装Microsoft</a> visual c++ 14.0</p></blockquote><h2 id="3-Shapefile版本修正"><a href="#3-Shapefile版本修正" class="headerlink" title="3. Shapefile版本修正"></a>3. Shapefile版本修正</h2><p>​     这个库本身Anaconda3就有（pyshp库），不需要再安装。在Anaconda3里有2个版本，1.2.12和2.0.1版本，但是pyshp 2.0.1版本绘图会出错，我们通过anaconda使用1.2.12版本：</p><h3 id="3-1-搜索pyshape"><a href="#3-1-搜索pyshape" class="headerlink" title="3.1 搜索pyshape"></a>3.1 搜索pyshape</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glpwkphg5aj30gs03yq2v.jpg" alt="img"></p><h3 id="3-2-选择1-2-12版本"><a href="#3-2-选择1-2-12版本" class="headerlink" title="3.2 选择1.2.12版本"></a>3.2 选择1.2.12版本</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glpwkqku7wj30h10ae74k.jpg" alt="img"></p><h3 id="3-3-点击右下角apply安装，此时会有弹窗，确定即可"><a href="#3-3-点击右下角apply安装，此时会有弹窗，确定即可" class="headerlink" title="3.3 点击右下角apply安装，此时会有弹窗，确定即可"></a>3.3 点击右下角apply安装，此时会有弹窗，确定即可</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glpwknzf9rj307c02gq2p.jpg" alt="img"></p><h2 id="4-安装Cartopy、Metpy、Pykdtree包"><a href="#4-安装Cartopy、Metpy、Pykdtree包" class="headerlink" title="4 安装Cartopy、Metpy、Pykdtree包"></a>4 安装Cartopy、Metpy、Pykdtree包</h2><p>在anaconda中，你所创建的虚拟环境下执行下面代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda install -c pycinrad cartopy</span><br><span class="line">conda activate pycinrad</span><br><span class="line">pip3 install Cartopy</span><br><span class="line">pip3 install Metpy</span><br><span class="line">pip3 install Pykdtree</span><br></pre></td></tr></table></figure><h2 id="5-安装PyCINRAD"><a href="#5-安装PyCINRAD" class="headerlink" title="5. 安装PyCINRAD"></a>5. 安装PyCINRAD</h2><p>同样环境下执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip3 install cinrad</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Numpy】python实现结构体数组</title>
      <link href="/archives/976.html"/>
      <url>/archives/976.html</url>
      
        <content type="html"><![CDATA[<h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><p>在C语言中我们可以通过struct关键字定义结构类型，结构中的字段占据连续的内存空间，每个结构体占用的内存大小都相同，因此可以很容易地定义结构数组。和C语言一样，在NumPy中也很容易对这种结构数组进行操作。只要NumPy中的结构定义和C语言中的定义相同，NumPy就可以很方便地读取C语言的结构数组的二进制数据，转换为NumPy的结构数组。假设我们需要定义一个结构数组，它的每个元素都有name, age和salary字段。在NumPy中可以如下定义：</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">MyType=np.dtype(&#123;</span><br><span class="line">    <span class="string">&#x27;names&#x27;</span>:[<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;salary&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;formats&#x27;</span>:[<span class="string">&#x27;S32&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]<span class="comment">#必须加s，且S大写</span></span><br><span class="line">&#125;)</span><br><span class="line">a=np.array([(<span class="string">&quot;tang&quot;</span>,<span class="number">23</span>,<span class="number">130.2</span>),(<span class="string">&quot;wang&quot;</span>,<span class="number">22</span>,<span class="number">100.2</span>)],</span><br><span class="line">dtype=MyType)</span><br><span class="line"><span class="comment">#或者Data=np.array([(‘zero’,0.,0.)]*10,dtype=MyType) #创建Data[2]</span></span><br><span class="line"><span class="comment">#Date[0][&#x27;name&#x27;]=&quot;tang&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><p>我们先创建一个dtype对象persontype，通过其字典参数描述结构类型的各个字段。字典有两个关键字：names，formats。每个关键字对应的值都是一个列表。names定义结构中的每个字段名，而formats则定义每个字段*的类型：</p><ul><li>S32 : 32个字节的字符串类型，由于结构中的每个元素的大小必须固定，因此需要指定字符串的<br>长度</li><li>i : 32bit的整数类型，相当于np.int32</li><li>f : 32bit的单精度浮点数类型，相当于np.float32<br>然后我们调用array函数创建数组，通过关键字参数dtype=MyType， 指定所创建的数组的元素类<br>型为结构MyType。运行上面程序之后，我们可以在IPython中执行如下的语句查看数组a的元素类<br>型</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.dtype</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dtype([(&#x27;name&#x27;, &#x27;S32&#x27;), (&#x27;age&#x27;, &#x27;&lt;i4&#x27;), (&#x27;salary&#x27;, &#x27;&lt;f4&#x27;)])</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>这里我们看到了另外一种描述结构类型的方法： 一个包含多个组元的列表，其中形如(字段名, 类型描述) 的组元描述了结构中的每个字段。类型描述前面为我们添加了 ‘&lt;’字符，这些字符用来描述字段值的字节顺序：</p><ul><li>&lt;:低位字节在前</li><li>>:高位字节在前</li></ul><p>结构数组的存取方式和一般数组相同，通过下标能够取得其中的元素，注意元素的值看上去像是组元，实际上它是一个结构：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(b&#x27;tang&#x27;, 23, 130.2)</span><br><span class="line">1</span><br><span class="line">a[0].dtype</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dtype([(&#x27;name&#x27;, &#x27;S32&#x27;), (&#x27;age&#x27;, &#x27;&lt;i4&#x27;), (&#x27;salary&#x27;, &#x27;&lt;f4&#x27;)])</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>a[0]是一个结构元素，它和数组a共享内存数据，因此可以通过修改它的字段，改变原始数组中的对应字段：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=a[<span class="number">0</span>]</span><br><span class="line">c[<span class="string">&quot;name&quot;</span>]=<span class="string">&quot;Lian&quot;</span><span class="comment">#修改元素属性</span></span><br><span class="line">a[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>]</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;Lian&#x27;</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>结构像字典一样可以通过字符串下标获取其对应的字段值：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[<span class="number">1</span>][<span class="string">&quot;name&quot;</span>]<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b&#x27;wang&#x27;1</span><br></pre></td></tr></table></figure><p>我们不但可以获得结构元素的某个字段，还可以直接获得结构数组的字段，它返回的是原始数组的视图，因此可以通过修改b[0]改变a[0][’‘age’’]：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b=a[:][<span class="string">&quot;salary&quot;</span>]<span class="comment">#或者a[&quot;salary&quot;]b12</span></span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array([130.2, 100.2], dtype=float32)1</span><br></pre></td></tr></table></figure><p>通过调用a.tostring或者a.tofile方法，可以直接输出数组a的二进制形式：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.tofile(<span class="string">&quot;test.bin&quot;</span>)<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><p>C语言的结构体为了内存寻址方便，会自动的添加一些填充用的字节，这叫做内存对齐。例如如果把下面的name[32]改为name[30]的话，由于内存对齐问题，在name和age中间会填补两个字节，最终的结构体大小不会改变。因此如果numpy中的所配置的内存大小不符合C语言的对齐规范的话，将会出现数据错位。为了解决这个问题，在创建dtype对象时，可以传递参数align=True，这样numpy的结构数组的内存对齐和C语言的结构体就一致了。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="type">float</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">p</span>[2];</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">FILE *fp;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">fp=fopen(<span class="string">&quot;test.bin&quot;</span>,<span class="string">&quot;rb&quot;</span>);</span><br><span class="line">fread(p, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> person), <span class="number">2</span>, fp);</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %d %f\n&quot;</span>, p[i].name, p[i].age, p[i].weight);</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><p>用下面的字典参数也可以定义结构类型，字典的关键字为结构中字段名，值为字段的类型描述，但是由于字典的关键字是没有顺序的，因此字段的顺序需要在类型描述中给出，类型描述是一个组元，它的第二个值给出字段的字节为单位的偏移量，例如age字段的偏移量为25个字节：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.dtype(&#123;<span class="string">&quot;name&quot;</span>:(<span class="string">&#x27;S25&#x27;</span>,<span class="number">0</span>),<span class="string">&quot;age&quot;</span>:(np.uint8,<span class="number">25</span>)&#125;)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>结果显示：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dtype([(&#x27;name&#x27;, &#x27;S25&#x27;), (&#x27;age&#x27;, &#x27;u1&#x27;)])</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Numpy】numpy的广播机制</title>
      <link href="/archives/53345.html"/>
      <url>/archives/53345.html</url>
      
        <content type="html"><![CDATA[<h2 id="广播的引出"><a href="#广播的引出" class="headerlink" title="广播的引出"></a>广播的引出</h2><p> numpy两个数组的相加、相减以及相乘都是对应元素之间的操作。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line">y = np.array([[<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>]])</span><br><span class="line"><span class="built_in">print</span>(x*y)  <span class="comment">#numpy当中的数组相乘是对应元素的乘积，与线性代数当中的矩阵相乘不一样</span></span><br><span class="line"></span><br><span class="line">输入结果如下：</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[ 2  2  9]</span></span><br><span class="line"><span class="string"> [ 2  4 12]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p> 当两个数组的形状并不相同的时候，我们可以通过扩展数组的方法来实现相加、相减、相乘等操作，这种机制叫做广播（broadcasting）。</p><p> 比如，一个二维数组减去列平均值，来对数组的每一列进行距平化处理：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.random.randn(<span class="number">4</span>,<span class="number">3</span>)  <span class="comment">#shape(4,3)</span></span><br><span class="line">arr_mean = arr.mean(<span class="number">0</span>)      <span class="comment">#shape(3,)</span></span><br><span class="line">demeaned = arr -arr_mean</span><br></pre></td></tr></table></figure><p> 很明显上式arr和arr_mean维度并不形同，但是它们可以进行相减操作，这就是通过广播机制来实现的。</p><h2 id="广播的原则"><a href="#广播的原则" class="headerlink" title="广播的原则"></a>广播的原则</h2><p> 广播的原则：如果两个数组的后缘维度（trailing dimension，即从末尾开始算起的维度）的轴长度相符，或其中的一方的长度为1，则认为它们是广播兼容的。广播会在缺失和（或）长度为1的维度上进行。</p><p> 这句话乃是理解广播的核心。广播主要发生在两种情况，一种是两个数组的维数不相等，但是它们的后缘维度的轴长相符，另外一种是有一方的长度为1。</p><h3 id="数组维度不同，后缘维度的轴长相符"><a href="#数组维度不同，后缘维度的轴长相符" class="headerlink" title="数组维度不同，后缘维度的轴长相符"></a>数组维度不同，后缘维度的轴长相符</h3><p> 我们来看一个例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]])  <span class="comment">#arr1.shape = (4,3)</span></span><br><span class="line">arr2 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])    <span class="comment">#arr2.shape = (3,)</span></span><br><span class="line">arr_sum = arr1 + arr2</span><br><span class="line"><span class="built_in">print</span>(arr_sum)</span><br><span class="line"></span><br><span class="line">输入结果如下:</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[1 2 3]</span></span><br><span class="line"><span class="string"> [2 3 4]</span></span><br><span class="line"><span class="string">[3 4 5]</span></span><br><span class="line"><span class="string">[4 5 6]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p> 上例中arr1的shape为（4,3），arr2的shape为（3，）。可以说前者是二维的，而后者是一维的。但是它们的后缘维度相等，arr1的第二维长度为3，和arr2的维度相同。arr1和arr2的shape并不一样，但是它们可以执行相加操作，这就是通过广播完成的，在这个例子当中是将arr2沿着0轴进行扩展。</p><p> 上面程序当中的广播如下图所示：</p><p><a href="https://images2018.cnblogs.com/blog/890640/201805/890640-20180510210455168-1460657897.png"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glxquzveglj30dv076dgy.jpg" alt="image"></a></p><p>同样的例子还有：</p><p><a href="https://images2018.cnblogs.com/blog/890640/201805/890640-20180510210455959-133658483.png"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glxquw4bumj30ci081ta2.jpg" alt="image"></a></p><p> 从上面的图可以看到，（3,4,2）和（4,2）的维度是不相同的，前者为3维，后者为2维。但是它们后缘维度的轴长相同，都为（4,2），所以可以沿着0轴进行广播。</p><p> 同样，还有一些例子：（4,2,3）和（2,3）是兼容的，（4,2,3）还和（3）是兼容的，后者需要在两个轴上面进行扩展。</p><h3 id="数组维度相同，其中有个轴为1"><a href="#数组维度相同，其中有个轴为1" class="headerlink" title="数组维度相同，其中有个轴为1"></a>数组维度相同，其中有个轴为1</h3><p> 我们来看下面的例子：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],[<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]])  <span class="comment">#arr1.shape = (4,3)</span></span><br><span class="line">arr2 = np.array([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>]])    <span class="comment">#arr2.shape = (4, 1)</span></span><br><span class="line"></span><br><span class="line">arr_sum = arr1 + arr2</span><br><span class="line"><span class="built_in">print</span>(arr_sum)</span><br><span class="line"></span><br><span class="line">输出结果如下：</span><br><span class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">3</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">7</span> <span class="number">7</span>]]</span><br></pre></td></tr></table></figure><p>  arr1的shape为（4,3），arr2的shape为（4,1），它们都是二维的，但是第二个数组在1轴上的长度为1，所以，可以在1轴上面进行广播，如下图所示：</p><p> <a href="https://images2018.cnblogs.com/blog/890640/201805/890640-20180510210457745-2014752656.png"><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glxqv095gwj30dw07f75a.jpg" alt="image"></a> 在这种情况下，两个数组的维度要保证相等，其中有一个轴的长度为1，这样就会沿着长度为1的轴进行扩展。这样的例子还有：（4,6）和（1,6） 。（3,5,6）和（1,5,6）、（3,1,6）、（3,5,1），后面三个分别会沿着0轴，1轴，2轴进行广播。</p><p> 后话：还有上面两种结合的情况，如（3,5,6）和（1,6）是可以相加的。在TensorFlow当中计算张量的时候也是用广播机制，并且和numpy的广播机制是一样的。</p>]]></content>
      
      
      <categories>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Numpy】np.c_和np.r_的用法</title>
      <link href="/archives/61240.html"/>
      <url>/archives/61240.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>np.r_是按列连接两个矩阵，就是把两矩阵上下相加，要求列数相等。</strong></p><p><strong>np.c_是按行连接两个矩阵，就是把两矩阵左右相加，要求行数相等。</strong></p></blockquote><span id="more"></span><p>Demo:</p><p>1.numpy.c_:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x:&#x27;</span>,x, x.shape)</span><br><span class="line"></span><br><span class="line">y = np.arange(<span class="number">10</span>,<span class="number">22</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y:&#x27;</span>,y, y.shape)</span><br><span class="line"></span><br><span class="line">z = np.c_[x,y]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;z:&#x27;</span>,z, z.shape)</span><br></pre></td></tr></table></figure><p>result:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x: [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]] (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">y: [[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>]</span><br><span class="line"> [<span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span>]] (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">z: [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span>]] (<span class="number">3</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><p>2.numpy.r_用法:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;x:&#x27;</span>,x, x.shape)</span><br><span class="line"></span><br><span class="line">y = np.arange(<span class="number">10</span>,<span class="number">22</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;y:&#x27;</span>,y, y.shape)</span><br><span class="line"></span><br><span class="line">z = np.r_[x,y]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;z:&#x27;</span>,z, z.shape)</span><br></pre></td></tr></table></figure><p>result:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x: [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]] (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">y: [[<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>]</span><br><span class="line"> [<span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span>]] (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">z: [[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>]</span><br><span class="line"> [ <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span>]</span><br><span class="line"> [<span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span>]</span><br><span class="line"> [<span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span>]] (<span class="number">6</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Numpy】 meshgrid()函数</title>
      <link href="/archives/46758.html"/>
      <url>/archives/46758.html</url>
      
        <content type="html"><![CDATA[<p>np.mesharid()函数通常用来生成二维数据网格，例如一张灰度图片中长为x轴，宽为y轴，图中每一个像素点。</p><p>可以接受两个一维数组生成两个二维矩阵。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.mesharid(np.arange(<span class="number">4</span>),np.arange(<span class="number">4</span>)) </span><br></pre></td></tr></table></figure><blockquote><p>根据传入的两个一维数组参数生成两个数组元素的列表。</p><p>如果第一个参数是xarray，维度是xdimesion，</p><p>第二个参数是yarray，维度是ydimesion。</p><p>那么生成的第一个二维数组是以xarray为行，共ydimesion行的向量；而第二个二维数组是以yarray的转置为列，共xdimesion列的向量。</p></blockquote><p>直观的感受：x-y坐标系中，x可取（1，2，3） y可取（4，5）</p><p>共有6个点    （1，4）（1，5）（2，4）（2，5）（3，4）（3，5）</p><p>np.mesharid()函数就是生成类似的数据网格</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhrguqrl1j31fg08ewfd.jpg" alt="image-20201209180432323"></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhrjzdsrej31f80d8dh5.jpg" alt=""></p><p>==测试代码：==</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># np建立一个等差数列</span></span><br><span class="line">x = np.linspace(<span class="number">0</span>,<span class="number">30</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;x的维度:<span class="subst">&#123;x.ndim&#125;</span>,shape:<span class="subst">&#123;x.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">y = np.linspace(<span class="number">0</span>,<span class="number">20</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;y的维度:<span class="subst">&#123;y.ndim&#125;</span>,shape:<span class="subst">&#123;y.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line">xx,yy = np.meshgrid(x, y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;xv的维度:<span class="subst">&#123;xx.ndim&#125;</span>,shape:<span class="subst">&#123;xx.shape&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;yv的维度:<span class="subst">&#123;yy.ndim&#125;</span>,shape:<span class="subst">&#123;yy.shape&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(xx, yy,<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>result:</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glhrq4qr4wj31fk0podio.jpg" alt="image-20201209181329819"></p>]]></content>
      
      
      <categories>
          
          <category> Numpy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的几种IDEA使用技巧</title>
      <link href="/archives/20585.html"/>
      <url>/archives/20585.html</url>
      
        <content type="html"><![CDATA[<p>1、在 IDEA 中，当我们编辑代码时，点击查看了调用类实现逻辑，然后可以使用后退快捷键，快速回到刚才待编辑的代码处。</p><span id="more"></span><p><strong>前进/后退快捷键如下：</strong></p><ul><li><strong>Windows:Ctrl + Alt + Left/Right（方向键）</strong></li><li><strong>Mac: ⌘ + ⌥ + ← / →(方向键)</strong></li><li><img src="https://mmbiz.qpic.cn/mmbiz_gif/LEFcpfxrbq6GN932uicD7rU53aSNMjWtuLiaxAlaJichVebmZDqlLROsuwQ4D1T0j1oSibicic8tHBpHJrUyl8PknqWQ/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></li></ul><p>2、IDEA 也提供类似的功能查看历史文件,并且在弹出窗口内可以使用关键键快速查找。</p><p>快捷键如下：</p><ul><li><strong>Windows：ctrl + E</strong></li><li><strong>Mac：⌘ +E</strong></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/LEFcpfxrbq6GN932uicD7rU53aSNMjWtuCnbOzFs3NIDIFsmJrqlltib7dtL2N1DJXOtic0lJX9SoK5g80iaSAn64Q/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p><p>另外 IDEA 中还有可以查看最近修改代码的位置，直接点击快速跳转。</p><p>快捷键如下：</p><ul><li><strong>Windows：ctrl + shift + E</strong></li><li><strong>Mac：⌘ + ⇧  +E</strong></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/LEFcpfxrbq6GN932uicD7rU53aSNMjWtuor9jqnMEuiaLFgNWNjl3KDVCNemefhfccc2OxaD5LftibSGMTNcOME3Q/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p><p>小技巧：设置一个选项，限制标签页（Edit Tabs）数量。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/idea%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A71.png" alt="image-20210523164525810"></p><p>3、<strong>自动补全代码</strong></p><p>使用这个快捷键，可以自动补全代码末尾的分号，括号对等等，可以让我们少打很多字符。另外这个快捷键还会自动格式化完成的代码。</p><p>快捷键：</p><ul><li><strong>Windows：ctrl + shift + Enter（回车键）</strong></li><li><strong>Mac：⌘ + ⇧  +⏎</strong> </li></ul><p><strong>自动补全分号</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/LEFcpfxrbq6GN932uicD7rU53aSNMjWtuYQmGQSupqCXDb4VY9I131KuLsgUEZWricMCUicWEic41bedDlvZpIxeAg/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p><p><strong>自动补全括号对</strong></p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/LEFcpfxrbq6GN932uicD7rU53aSNMjWtuYQmGQSupqCXDb4VY9I131KuLsgUEZWricMCUicWEic41bedDlvZpIxeAg/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p><p>4、<strong>快速抽取变量</strong></p><p>有时候新建了一个对象，忘记了创建了变量，就很麻烦，需要移动光标到前面，然后声明。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/LEFcpfxrbq6GN932uicD7rU53aSNMjWtutibaGCdiaXWSJLJicNL0N27EJLYcjn2Zc9e6nbYn0VphVfGusBPxvAC8g/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>这种情况下，我们可以使用 IDEA 的重构功能-<strong>Introduce Variable</strong>。</p><p>快捷键如下：</p><ul><li><strong>Windows：ctrl + alt + V</strong></li><li><strong>Mac：⌥ + ⌘  + V</strong></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/LEFcpfxrbq6GN932uicD7rU53aSNMjWtuySPrLev3Pzo5mgJibvbZqWib2gjrqGocN5siaeRUznJoXMlzcZ4r0BSVw/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p><p>除了这种方式之外，最近还学到另外一种方式，使用 IDEA 后缀补全（<strong>Postfix Completion</strong>）。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/LEFcpfxrbq6GN932uicD7rU53aSNMjWtuuSVAYGeicp6FAzFXVvXN7bph0m8BqcibhwCZrYjzNsKBHLQSBy6H2exg/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p><p>5、<strong>重命名</strong></p><p>有时候手误会把边变量名拼写错误，等到自己发现时，这个变量已经被引用了多次，这时再修改，需要把所有引用的地方都修改一遍，这就很麻烦。</p><p>IDEA 重构功能-重命名（<strong>Rename</strong>）,可以修改命名，并且一键替换所有的引用的地方。</p><p>另外函数名，类名修改都可以使用这个快捷键。</p><p>快捷键如下：</p><ul><li><strong>Windows：shift + F6</strong></li><li><strong>Mac： ⇧  + F6</strong></li></ul><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/LEFcpfxrbq6GN932uicD7rU53aSNMjWtunTWLPs6Ho1ZqhO5vWOmChkqFyZC4oeGV2tibPcmOULNbnib3eoXXttYQ/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea常见使用快捷键</title>
      <link href="/archives/32273.html"/>
      <url>/archives/32273.html</url>
      
        <content type="html"><![CDATA[<p>从Eclipse到IDEA，开发工具的发展促进了编程开发的效率，今天我就来说一下IDEA中使用的常用快捷键以及常用功能使用。</p><span id="more"></span><h3 id="一-常用快捷键（这些我们经常用）"><a href="#一-常用快捷键（这些我们经常用）" class="headerlink" title="一.常用快捷键（这些我们经常用）"></a>一.常用快捷键（这些我们经常用）</h3><p><strong><em>\</em>Alt + Enter**</strong>  引入类</p><p><img src="https://img-blog.csdn.net/2018083013423161?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzajQ0Mjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><strong>Ctrl + O</strong> 查看我们继承的类或者接口中的方法，以及我们要实现的方法</p><p><img src="https://img-blog.csdn.net/2018083013480181?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzajQ0Mjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h3 id="Ctrl-Alt-b"><a href="#Ctrl-Alt-b" class="headerlink" title="\Ctrl + Alt + b**"></a><strong><em>\</em>Ctrl + Alt + b**</strong></h3><p>查看接口实现类中方法（就是我们使用接口编程时，在调用实现类方法处直接Ctrl+鼠标左键方法，只能进入到接口中定义的方法处，但是使用该快捷键则直接到实现类的该方法中了）</p><p><img src="https://img-blog.csdn.net/20180830140045983?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzajQ0Mjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><strong>Alt + Insert</strong>   set/get; 构造方法; toString; 重写方法。。。 </p><p><img src="https://img-blog.csdn.net/20180830140511806?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzajQ0Mjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><strong>Ctrl+Alt+T</strong> 将代码包在一个块中，例如try/catch ;synchronized等</p><p><img src="https://img-blog.csdn.net/20180830141554164?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzajQ0Mjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><strong>还有一些快速打印语句</strong>：</p><p><img src="https://img-blog.csdn.net/20180830141905188?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lzajQ0Mjg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><strong>Ctrl+E</strong>，最近使用的文件</p><p><strong>Ctrl+Shift+E</strong>，最近更改的文件</p><p><strong>Ctrl+F12</strong>，可以显示当前文件的结构</p><p><strong>Ctrl+N</strong>，可以快速打开类</p><p><strong>Ctrl+P</strong>，可以显示参数信息</p><p><strong>Ctrl+Alt+O</strong>，优化导入的类和包</p><p><strong>Alt+Shift+C</strong>，最近的更改</p><p>【调试部分、编译】</p><p>​    <strong>Ctrl+F2</strong>，停止<br>​         <strong>Alt+Shift+F9</strong>，选择 Debug<br>​        <strong>Alt+Shift+F10</strong>，选择 Run<br>​        <strong>Ctrl+Shift+F9</strong>，编译<br>​        <strong>Ctrl+Shift+F10</strong>，运行<br>​        <strong>Ctrl+Shift+F8</strong>，查看断点<br>​        Shift+F7，智能步入<br>​        Shift+F8，步出<br>​     <strong>Alt+Shift+F8</strong>，强制步过<br>​     <strong>Alt+Shift+F7</strong>，强制步入</p><p>Alt+F9，运行至光标处<br><strong>Ctrl+Alt+F9</strong>，强制运行至光标处<br>F9，恢复程序<br>Alt+F10，定位到断点<br>Ctrl+F8，切换行断点<br>Ctrl+F9，生成项目</p><p>【重构】<br>Ctrl+Alt+Shift+T，弹出重构菜单<br>Shift+F6，重命名<br>F6，移动<br>F5，复制<br>Alt+Delete，安全删除<br>Ctrl+Alt+N，内联<br>【查找】<br>Ctrl+F，查找<br>Ctrl+R，替换<br>F3，查找下一个<br>Shift+F3，查找上一个<br>Ctrl+Shift+F，在路径中查找<br>Ctrl+Shift+R，在路径中替换<br>Ctrl+Shift+S，搜索结构<br>Ctrl+Shift+M，替换结构<br>Alt+F7，查找用法<br>Ctrl+Alt+F7，显示用法<br>Ctrl+F7，在文件中查找用法<br>Ctrl+Shift+F7，在文件中高亮显示用法</p>]]></content>
      
      
      <categories>
          
          <category> Idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java上传图片至阿里云oss服务器</title>
      <link href="/archives/7937.html"/>
      <url>/archives/7937.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、阿里云oss设置"><a href="#一、阿里云oss设置" class="headerlink" title="一、阿里云oss设置"></a>一、阿里云oss设置</h2><p>在上传图片之前需要简单设置下阿里云oss服务器的相关配置</p><span id="more"></span><p>进入oss终端页面：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss01.png" alt="image-20210529231650235"></p><p>点击右下角的访问控制新增用户用于获取新增accesskeyid:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss02.png" alt="image-20210529233457791"></p><p>点击左侧的用户新增：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss03.png" alt="image-20210529233547705"></p><p>点击创建用户新增用户：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss05.png" alt="image-20210529233701374"></p><p>点击创建AccessKey即可创建新key，此时会出现用于授权登录的keyecrets</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss06.png" alt="image-20210529233924094"></p><p>此时最关键的一步，我们需要创建我们需要的Bucket数据存储仓库，可以自定义显示名称，具体操作步骤详细见官网：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss07.png" alt="image-20210529234229356"></p><p>此后需要给我们当前的用户授权，不然无法正常进行文件上传读写，点击用户，选择刚刚新增的用户，添加权限。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss08.png" alt="image-20210529234533175"></p><p>下面下载官网软件，登录:输入刚刚保存的key与keyecrets选择刚刚新增的bucket实例，选择合适的地址。即可登录成功</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss09.png" alt="image-20210529234729864"></p><p>亲测有效，我的已经成功登录啦，前后花了不到1个小时，有兴趣的话可以研究下。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E9%98%BF%E9%87%8C%E4%BA%91oss10.png" alt="image-20210529235055855"></p><p>此页面即为登录成功页面，可以选择本地上传，下面我们教大家一种新方式，使用java实现图片上传</p><h2 id="二、java上传图片至阿里云oss服务器"><a href="#二、java上传图片至阿里云oss服务器" class="headerlink" title="二、java上传图片至阿里云oss服务器"></a>二、java上传图片至阿里云oss服务器</h2><p>下面贴出关键代码：具体修改根据自己实际情况：</p><p><strong>1.引入必须的库</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--OSS--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">2.4</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.3</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.jdom&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jdom&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;<span class="number">1.1</span><span class="number">.3</span>&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>2.配置文件新增</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">aliyun:</span><br><span class="line">  oss:</span><br><span class="line">    file:</span><br><span class="line">      endPoint: <span class="string">&quot;http://oss-cn-beijing.aliyuncs.com&quot;</span>  <span class="comment">// 一般不用改，选择自己的地址即可</span></span><br><span class="line">      keyid: <span class="string">&quot;保存的key&quot;</span></span><br><span class="line">      keyecrets: <span class="string">&quot;保存的secret&quot;</span></span><br><span class="line">     #bucket可以在控制台创建，也可以使用java代码创建</span><br><span class="line">      bucketname: <span class="string">&quot;实例名称&quot;</span></span><br></pre></td></tr></table></figure><p><strong>3.java关键代码</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/29 21:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssConstant</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.endPoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String oss_file_endpoint;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keyid&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String oss_file_keyid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.keysecret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String oss_file_keysecret;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;aliyun.oss.file.bucketname&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String oss_file_bucketname;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String OSS_END_POINT_IM;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String OSS_BUCKET_IM;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String OSS_ACCESS_KEY_ID_IM;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String OSS_ACCESS_KEY_SECRET_IM;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        OSS_END_POINT_IM = oss_file_endpoint;</span><br><span class="line">        OSS_BUCKET_IM = oss_file_bucketname;</span><br><span class="line">        OSS_ACCESS_KEY_ID_IM = oss_file_keyid;</span><br><span class="line">        OSS_ACCESS_KEY_SECRET_IM = oss_file_keysecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.oss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSException;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.CannedAccessControlList;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.CreateBucketRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> com.lhh.constant.OssConstant;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/29 21:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunOSSUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKeyId= OssConstant.OSS_ACCESS_KEY_ID_IM;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String accessKeySecret=OssConstant.OSS_ACCESS_KEY_SECRET_IM;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span>  OssConstant.OSS_END_POINT_IM;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> OssConstant.OSS_BUCKET_IM;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(AliyunOSSUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">OSSUploadFile</span><span class="params">(String filename)</span>&#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> format.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == file)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">OSSClient</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClient</span>(endpoint,accessKeyId,accessKeySecret);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//容器不存在，就创建</span></span><br><span class="line">            <span class="keyword">if</span>(! ossClient.doesBucketExist(bucket))&#123;</span><br><span class="line">                ossClient.createBucket(bucket);</span><br><span class="line">                <span class="type">CreateBucketRequest</span> <span class="variable">createBucketRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateBucketRequest</span>(bucket);</span><br><span class="line">                createBucketRequest.setCannedACL(CannedAccessControlList.Default);</span><br><span class="line">                ossClient.createBucket(createBucketRequest);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileUrl</span> <span class="operator">=</span> dateStr + <span class="string">&quot;/&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().getTime()+<span class="string">&quot;-&quot;</span>+file.getName();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上传文件</span></span><br><span class="line">            <span class="type">PutObjectResult</span> <span class="variable">result</span> <span class="operator">=</span> ossClient.putObject(<span class="keyword">new</span> <span class="title class_">PutObjectRequest</span>(bucket, fileUrl, file));</span><br><span class="line">            <span class="comment">//设置权限 这里是私有权限读写</span></span><br><span class="line">            ossClient.setBucketAcl(bucket,CannedAccessControlList.Default);</span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != result)&#123;</span><br><span class="line">                logger.info(<span class="string">&quot;==========&gt;OSS文件上传成功,OSS地址：&quot;</span>+fileUrl);</span><br><span class="line">                <span class="keyword">return</span> bucket+<span class="string">&quot;/&quot;</span>+fileUrl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (OSSException oe)&#123;</span><br><span class="line">            logger.error(oe.getMessage());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClientException ce)&#123;</span><br><span class="line">            logger.error(ce.getMessage());</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭</span></span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.lhh.oss.AliyunOSSUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/5/29 21:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;test&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(<span class="meta">@RequestParam(&quot;filename&quot;)</span> String filename)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> AliyunOSSUtil.OSSUploadFile(filename);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功上传，具体代码依据自己实际情况。</p><p>此上为全部代码，感兴趣的朋友可以尝试下。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> OSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot解决跨域的三种方式</title>
      <link href="/archives/45037.html"/>
      <url>/archives/45037.html</url>
      
        <content type="html"><![CDATA[<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是全局配置的，网上也大都是这种解决办法，但是很多都是基于旧的spring版本，比如：</p><p><em><a href="https://blog.csdn.net/tiangongkaiwu152368/article/details/81099169">https://blog.csdn.net/tiangongkaiwu152368/article/details/81099169</a></em></p><p>文中WebMvcConfigurerAdapter在spring5.0已经被标记为Deprecated，点开源码可以看到：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An implementation of &#123;<span class="doctag">@link</span> WebMvcConfigurer&#125; with empty methods allowing</span></span><br><span class="line"><span class="comment"> * subclasses to override only the methods they&#x27;re interested in.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Rossen Stoyanchev</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> as of 5.0 &#123;<span class="doctag">@link</span> WebMvcConfigurer&#125; has default methods (made</span></span><br><span class="line"><span class="comment"> * possible by a Java 8 baseline) and can be implemented directly without the</span></span><br><span class="line"><span class="comment"> * need for this adapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>spring5最低支持到jdk1.8，所以注释中明确表明，你可以直接实现WebMvcConfigurer接口，无需再用这个适配器，因为jdk1.8支持接口中存在default-method。</p><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;CorsFilter &quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, PATCH, DELETE, PUT&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;Origin, X-Requested-With, Content-Type, Accept&quot;</span>);</span><br><span class="line">        chain.doFilter(req, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种办法，是基于过滤器的方式，方式简单明了，就是在response中写入这些响应头，好多文章都是第一种和第二种方式都叫你配置，其实这是没有必要的，只需要一种即可。</p><h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsController</span> &#123;</span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &quot;http://localhost:4000&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;goods-url&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Response <span class="title function_">queryGoodsWithGoodsUrl</span><span class="params">(<span class="meta">@RequestParam</span> String goodsUrl)</span> <span class="keyword">throws</span> Exception &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@CrossOrigin 注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.METHOD, ElementType.TYPE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CrossOrigin &#123;&#125;</span><br></pre></td></tr></table></figure><p>从元注解@Target可以看出，注解可以放在method、class等上面，类似RequestMapping，也就是说，整个controller下面的方法可以都受控制，也可以单个方法受控制。</p><p>也可以得知，这个是最小粒度的cors控制办法了，精确到单个请求级别。</p><p>以上三种方法都可以解决问题，最常用的应该是第一种、第二种。</p><p>参考文章：<a href="http://www.telami.cn/2019/springboot-resolve-cors/">http://www.telami.cn/2019/springboot-resolve-cors/</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown  语法</title>
      <link href="/archives/13249.html"/>
      <url>/archives/13249.html</url>
      
        <content type="html"><![CDATA[<h2 id="斜体字"><a href="#斜体字" class="headerlink" title="斜体字"></a>斜体字</h2><blockquote><p> 快捷键  command + i</p><p> ​    语法  <em>斜体字</em></p></blockquote><span id="more"></span><h2 id="粗体文本"><a href="#粗体文本" class="headerlink" title="粗体文本"></a>粗体文本</h2><blockquote><p> 快捷键  command + b</p><p> ​    语法  <strong>粗体字</strong></p></blockquote><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><blockquote><p> 快捷键  command + 1 等</p><p> ​    语法   ### 三级标题</p><p> ​                ####四级标题</p></blockquote><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><blockquote><p> 快捷键  shift + control + ~</p><p> ​    语法  <del>删除线</del></p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><blockquote><p> 快捷键  command + option + -</p><p> ​    语法  —-</p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote><p>快捷键  command + option + q</p><p>​    语法  &gt; 文本</p></blockquote><h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><blockquote><p>快捷键  command + k 按住command点击可跳转</p><p>​    语法  打开<a href="https://www.baidu.com/">百度</a>链接</p></blockquote><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><blockquote><p>快捷键  control + command + i</p></blockquote><h2 id="插入表格快捷键"><a href="#插入表格快捷键" class="headerlink" title="插入表格快捷键"></a>插入表格快捷键</h2><blockquote><p>快捷键  option + command + i</p><p>​    语法  ｜｜方式</p></blockquote><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><blockquote><p>快捷键  option + command + o</p></blockquote><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><blockquote><p>快捷键  option + command + u</p></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote><p>快捷键  command + option + c</p><p>语法  ~~~java</p></blockquote><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><blockquote><p>快捷键 command + shift + h</p><p>语法 ==高亮==</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决系统自动生成.DS_store问题</title>
      <link href="/archives/1897.html"/>
      <url>/archives/1897.html</url>
      
        <content type="html"><![CDATA[<p><strong>.DS_Store (Desktop Services Store)</strong>，是Apple公司的操作系统创建的一个隐藏文件，里面保存着自定义目录的图标和背景图片等元信息，听起来就好像Windows上的desktop.ini。</p><span id="more"></span><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>一般出现如下情况时，在我们的u盘中会出现大量的.DS_Store文件</p><p>1.U盘传输文件夹到windows下，出现一堆.DS_Store</p><p>2.无论使用mac的手动压缩，zip tar等命令压缩方式，打包的程序包，发布到linux出现一堆.DS_Store这种垃圾文件，虽然对操作毫无影响，但是看着很恶心，尤其是对于程序员来说，无法忍受。更不要说系统上线时候了。</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</span><br></pre></td></tr></table></figure><p>重启即可生效</p><p>重新恢复生成</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults delete com.apple.desktopservices DSDontWriteNetworkStores</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决github提交过慢的问题（Mac）</title>
      <link href="/archives/32466.html"/>
      <url>/archives/32466.html</url>
      
        <content type="html"><![CDATA[<p>终端下输入</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping github.com</span><br></pre></td></tr></table></figure><span id="more"></span><p>得到如下内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PING github.com (13.229.188.59): 56 data bytes</span><br><span class="line">64 bytes from 13.229.188.59: icmp_seq=0 ttl=39 time=195.235 ms</span><br><span class="line">64 bytes from 13.229.188.59: icmp_seq=1 ttl=39 time=199.842 ms</span><br><span class="line">64 bytes from 13.229.188.59: icmp_seq=2 ttl=39 time=201.577 ms</span><br></pre></td></tr></table></figure><p>再输入</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p>得到如下内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PING github.global.ssl.fastly.net (108.160.169.54): 56 data bytes</span><br><span class="line">Request timeout for icmp_seq 0</span><br><span class="line">Request timeout for icmp_seq 1</span><br><span class="line">Request timeout for icmp_seq 2</span><br></pre></td></tr></table></figure><p>进入我们的host文件下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>加入如下两行代码：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">13.229.188.59 github.com</span><br><span class="line">108.160.169.54 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p>然后刷新DNS缓存</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure><p>然后发现速度会快很多</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos 常用快捷键</title>
      <link href="/archives/56986.html"/>
      <url>/archives/56986.html</url>
      
        <content type="html"><![CDATA[<h3 id="选取空间截图"><a href="#选取空间截图" class="headerlink" title="选取空间截图"></a>选取空间截图</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shift+command+4</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="全屏截图"><a href="#全屏截图" class="headerlink" title="全屏截图"></a>全屏截图</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shift+command+3</span><br></pre></td></tr></table></figure><h3 id="可以显示隐藏文件，文件夹，再按一次，恢复隐藏"><a href="#可以显示隐藏文件，文件夹，再按一次，恢复隐藏" class="headerlink" title="可以显示隐藏文件，文件夹，再按一次，恢复隐藏"></a>可以显示隐藏文件，文件夹，再按一次，恢复隐藏</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Command+Shift+.</span><br></pre></td></tr></table></figure><h3 id="finder下可以前往任何文件夹，包括隐藏文件夹"><a href="#finder下可以前往任何文件夹，包括隐藏文件夹" class="headerlink" title="finder下可以前往任何文件夹，包括隐藏文件夹"></a>finder下可以前往任何文件夹，包括隐藏文件夹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Command+Shift+G</span><br></pre></td></tr></table></figure><h3 id="复制当前文件路径"><a href="#复制当前文件路径" class="headerlink" title="复制当前文件路径"></a>复制当前文件路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">commend+option+c</span><br></pre></td></tr></table></figure><h3 id="查看文件路径"><a href="#查看文件路径" class="headerlink" title="查看文件路径"></a>查看文件路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">command + i</span><br></pre></td></tr></table></figure><h3 id="解决pycharm打不开的问题"><a href="#解决pycharm打不开的问题" class="headerlink" title="解决pycharm打不开的问题"></a><a href="https://www.cnblogs.com/liuxiaoming123/p/12783121.html">解决pycharm打不开的问题</a></h3><h3 id="vim命令"><a href="#vim命令" class="headerlink" title="vim命令"></a>vim命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">i 开始编辑 </span><br><span class="line">esc 退出编辑 </span><br><span class="line">:w 保存但不退出 </span><br><span class="line">:wq  保存并退出 </span><br><span class="line">:q   退出 </span><br><span class="line">:q!  强制退出，不保存 </span><br><span class="line">:e!  放弃所有修改，从上次保存文件开始再编辑命令历史</span><br></pre></td></tr></table></figure><h3 id="显示隐藏文件"><a href="#显示隐藏文件" class="headerlink" title="显示隐藏文件"></a>显示隐藏文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles YES;KillAll Finder</span><br></pre></td></tr></table></figure><h3 id="关闭隐藏文件"><a href="#关闭隐藏文件" class="headerlink" title="关闭隐藏文件"></a>关闭隐藏文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.Finder AppleShowAllFiles NO;KillAll Finder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【小白】brew命令使用</title>
      <link href="/archives/38833.html"/>
      <url>/archives/38833.html</url>
      
        <content type="html"><![CDATA[<h1 id="一：官网"><a href="#一：官网" class="headerlink" title="一：官网"></a>一：官网</h1><p><a href="https://brew.sh/">HomeBrew</a></p><span id="more"></span><h1 id="二：目录"><a href="#二：目录" class="headerlink" title="二：目录"></a>二：目录</h1><ul><li><p>安装</p></li><li><p>查看帮助信息</p></li><li><p>查看版本</p></li><li><p>更新HomeBrew自己</p></li><li><p>安装软件包</p></li><li><p>查询可更新的包</p></li><li><p>更新包（formula）</p></li><li><p>清理旧版本</p></li><li><p>锁定不想要的包</p></li><li><p>卸载安装包</p></li><li><p>查看包信息</p></li><li><p>查看安装列表</p></li><li><p>查询可用包</p></li><li><p>卸载HomeBrew</p></li></ul><h1 id="三：常用命令"><a href="#三：常用命令" class="headerlink" title="三：常用命令"></a>三：常用命令</h1><ul><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//安装依赖工具</span><br><span class="line">xcode-select --install</span><br><span class="line"></span><br><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看帮助信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew help</span><br></pre></td></tr></table></figure></li><li><p>查看版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew -v</span><br></pre></td></tr></table></figure></li><li><p>更新HomeBrew自己</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure></li><li><p>安装软件包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install [包名]</span><br><span class="line"></span><br><span class="line">//安装git</span><br><span class="line">brew install git</span><br><span class="line"></span><br><span class="line">//安装git-lfs</span><br><span class="line">brew install git-lfs</span><br><span class="line"></span><br><span class="line">//安装wget</span><br><span class="line">brew install wget</span><br><span class="line"></span><br><span class="line">//安装openssl</span><br><span class="line">brew install openssl</span><br></pre></td></tr></table></figure></li><li><p>查询可更新的包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew outdated</span><br></pre></td></tr></table></figure></li><li><p>更新包（formula）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//更新所有</span><br><span class="line">brew upgrade</span><br><span class="line"></span><br><span class="line">//更新指定包</span><br><span class="line">brew upgrade [包名]</span><br></pre></td></tr></table></figure></li><li><p>清理旧版本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//清理所有包的旧版本</span><br><span class="line">brew cleanup </span><br><span class="line"></span><br><span class="line">//清理指定包的旧版本</span><br><span class="line">brew cleanup [包名]</span><br><span class="line"></span><br><span class="line">//查看可清理的旧版本包，不执行实际操作</span><br><span class="line">brew cleanup -n </span><br></pre></td></tr></table></figure></li><li><p>锁定不想要的包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//锁定某个包brew pin $FORMULA  //取消锁定brew unpin $FORMULA     </span><br></pre></td></tr></table></figure></li><li><p>卸载安装包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew uninstall [包名]//例：卸载gitbrew uninstall git</span><br></pre></td></tr></table></figure></li><li><p>查看包信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew info [包名]</span><br></pre></td></tr></table></figure></li><li><p>查看安装列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure></li><li><p>查询可用包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew search [包名]</span><br></pre></td></tr></table></figure></li><li><p>卸载HomeBrew</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd `brew --prefix`rm -rf Cellarbrew prunerm `git ls-files`rm -r Library/Homebrew Library/Aliases Library/Formula Library/Contributionsrm -rf .gitrm -rf ~/Library/Caches/Homebrew</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Brew </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Brew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【小白】 macos常用开发环境配置</title>
      <link href="/archives/30405.html"/>
      <url>/archives/30405.html</url>
      
        <content type="html"><![CDATA[<h2 id="table-自动补全"><a href="#table-自动补全" class="headerlink" title="table 自动补全"></a>table 自动补全</h2><ol><li><p>打开终端，输入nano .inputrc 命令回车，进入编辑状态</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">nano .inputrc</span></span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>粘贴下面的语句到文件中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set completion-ignore-case on</span><br><span class="line">set show-all-if-ambiguous on</span><br><span class="line">TAB: menu-complete</span><br></pre></td></tr></table></figure></li><li><p>保存文件， Control + O 保存， 再按回车</p></li><li><p>Control + X , 退出文本编辑</p></li><li><p>重启终端， 试验Tab键自动补全已经OK啦</p></li></ol><h2 id="新增ll命令"><a href="#新增ll命令" class="headerlink" title="新增ll命令"></a>新增ll命令</h2><p>1.打开配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br></pre></td></tr></table></figure><p>2.i进入编辑模式，esc推出，:wq保存更改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias la=&#x27;ls -A&#x27;</span><br><span class="line">alias l=&#x27;ls -CF</span><br></pre></td></tr></table></figure><p>3.重新加载配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>4.若此时再出现诸如一下问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zsh: command not found: ll</span><br><span class="line">zsh: command not found: la</span><br><span class="line">zsh: command not found: l</span><br></pre></td></tr></table></figure><p>5.打开文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim .zshrc</span><br></pre></td></tr></table></figure><p>6.添加如下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias ll=&#x27;ls -alF&#x27;</span><br><span class="line">alias la=&#x27;ls -A&#x27;</span><br><span class="line">alias l=&#x27;ls -CF&#x27;</span><br></pre></td></tr></table></figure><p>7.保存之后使用source .zshrc</p><h2 id="新增brew命令"><a href="#新增brew命令" class="headerlink" title="新增brew命令"></a>新增brew命令</h2><p>安装时会提示安装git 安装好git后重新启动输入命令运行即可（时间比较久）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://www.mintimate.cn/2020/04/05/Homebrew/">https://www.mintimate.cn/2020/04/05/Homebrew/</a> 博客</p></blockquote><p>​    本地软件库列表：brew ls</p><p>​    查找软件：brew search google（其中google替换为要查找的软件关键字）</p><p>​    查看brew版本：brew -v 更新brew版本：brew update</p><p><strong>现在可以输入命令open ~/.zshrc -e 或者 open ~/.bash_profile -e 整理一下重复的语句(运行 echo $SHELL 可以查看应该打开那一个文件修改)</strong></p><p><img src="C:\Users\24327\Desktop\csdn博客\Library\Application Support\typora-user-images\image-20201205133049764.png" alt="image-20201205133049764" style="zoom: 50%;" /></p><h2 id="新增wget-命令"><a href="#新增wget-命令" class="headerlink" title="新增wget 命令"></a>新增wget 命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install wget</span><br></pre></td></tr></table></figure><h2 id="新增rz-sz命令"><a href="#新增rz-sz命令" class="headerlink" title="新增rz/sz命令"></a>新增rz/sz命令</h2><p>rz 上传功能    sz 下载功能</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install lrzsz</span><br></pre></td></tr></table></figure><h2 id="Mac-提示文件损坏解决方式"><a href="#Mac-提示文件损坏解决方式" class="headerlink" title="Mac 提示文件损坏解决方式"></a>Mac 提示文件损坏解决方式</h2><blockquote><p>第一种常见情况：只需要开启允许“任何来源”即可</p><p>1.在终端控制台中输入：sudo spctl —master-disable，回车,如果你的笔记本设置有开机密码，会提示要你输入密码，输入的整个过程中是看不到密码显示的，不要因为看不到输入的密码而着急，继续输入完密码后按下回车键。</p><p>2.打开系统偏好设置——&gt;安全性与隐私，显示了任何来源，然后点击允许来自任何来源。如果没有【任何来源】的选项，可以再次执行刚才的代码进行尝试。</p><p>3.重新双击安装文件便不会再次提示“文件已损坏”了。</p><p>此时有的小伙伴发现依旧会出现“文件已损坏的提示”，此时就需要使用另外一种方式了</p><p>1.打开终端，输入： sudo xattr -r -d com.apple.quarantine，最后面加上一个空格<br>2.然后在访达-&gt;应用程序中找到你要打开的软件，拖到终端窗口中，回车执行，就可以正常打开文件了</p><p>作者：Sugar_ping<br>链接：<a href="https://www.jianshu.com/p/4ad57723a4fc">https://www.jianshu.com/p/4ad57723a4fc</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h2 id="新增maven"><a href="#新增maven" class="headerlink" title="新增maven"></a>新增maven</h2><ol><li><p>打开配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open ~/.bash_profile</span><br></pre></td></tr></table></figure></li></ol><p>2.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MAVEN_HOME=/Users/light6/JavaFile/apache-maven-3.6.3export MAVEN_HOMEexport PATH=$MAVEN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>3.保存配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure><ol><li><p>创建/修改.zshrc文件<br>如果有.zshrc文件则修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">open ~/.zshrctouch ~/.zshrc# 打开后新增配置MAVEN_HOME=/Users/light6/JavaFile/apache-maven-3.6.3export MAVEN_HOMEexport PATH=$MAVEN_HOME/bin:$PATHsource ~/.bash_profilesource ~/.bash_profile</span><br></pre></td></tr></table></figure></li></ol><p>5.maven修改本地镜像地址</p><blockquote><p>Conf-&gt;settings.xml</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mirrors&gt;&lt;mirror&gt;&lt;id&gt;alimaven&lt;/id&gt;&lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;name&gt;aliyun maven&lt;/name&gt;&lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;&lt;/mirror&gt;&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure><h2 id="新增tomcat环境配置"><a href="#新增tomcat环境配置" class="headerlink" title="新增tomcat环境配置"></a>新增tomcat环境配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim ~/.bash_profile # 新增tomcat bin绝对路径export PATH=$PATH:/usr/local/apache-tomcat-8.5.60/binsource ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h2 id="brew-安装vue"><a href="#brew-安装vue" class="headerlink" title="brew 安装vue"></a>brew 安装vue</h2><blockquote><h1 id="安装cnpm"><a href="#安装cnpm" class="headerlink" title="安装cnpm"></a>安装cnpm</h1><p>npm install -g cnpm —registry=<a href="https://registry.npm.taobao.org">https://registry.npm.taobao.org</a></p><h1 id="安装脚手架"><a href="#安装脚手架" class="headerlink" title="安装脚手架"></a>安装脚手架</h1><p>npm install -g vue-cli</p></blockquote><h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h2><blockquote><p>cnpm install webpack -g</p></blockquote><h2 id="安装vue脚手架"><a href="#安装vue脚手架" class="headerlink" title="安装vue脚手架"></a>安装vue脚手架</h2><blockquote><p>npm install -g vue-cli</p><p>创建首个vue项目</p><p>1.在Mac中创建文件夹，名称自己起，然后在终端打开该目录，也可以用vscode 打开，在终端输入：</p><p>sudo vue init webpack vue_project</p><p>坐等安装完成。</p><p>2.安装成功后切换到在终端中切换到项目根目录</p><p>cd vue_peoject</p><p>3.安装项目依赖，在终端中输入：</p><p>sudo npm install</p><p>4.安装依赖完成后，启动项目，在终端或者vscode终端输入：</p><p>npm run dev</p><p>5.访问<a href="http://localhsot:8080，打开vue项目">http://localhsot:8080，打开vue项目</a></p></blockquote><h2 id="Mac-OS-下-Python3-pip-配置国内源"><a href="#Mac-OS-下-Python3-pip-配置国内源" class="headerlink" title="Mac OS 下 Python3 pip 配置国内源"></a>Mac OS 下 Python3 pip 配置国内源</h2><blockquote><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣 (douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a><br>两种方式使用</p><p>安装时指定</p><p>~ pip install ipython -i <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>如果提示 host 不被信任可以加上参数 –trusted-host</p><p>~ pip install ipython -i <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a> —trusted-host mirrors.aliyun.com</p><p>​                                                                   macOS</p><p>~ mkdir .pip   # 在用户根目录（cd~ / cd）下创建一个.pip目录<br>~ cd pip<br>~ touch pip.conf # 创建一个pip配置文件<br># 写入配置<br>[global]<br>index-url = <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>[install]<br>trusted-host = mirrors.aliyun.com</p></blockquote><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>1.安装完Node.js 及 Git 后，即可使用npm来安装Hexo：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2.创建一个目录用来作为你的blog目录，例如 MyBlog；并在该目录中进行Hexo的初始化</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init MyBlogcd ~/MyBlog/npm install</span><br></pre></td></tr></table></figure><p>新建完成后，得到以下目录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">·|-- _config.yml|-- package.json|-- scaffolds|-- source|   |-- _drafts|   |-- _posts|-- themes</span><br></pre></td></tr></table></figure><p>至此完成了Hexo的安装及初始化,下面进行本地的预览</p><p>3.安装hexo server</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo npm install hexo-server </span><br></pre></td></tr></table></figure><p>4.生成静态页面并打开hexo本地服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate hexo server</span><br></pre></td></tr></table></figure><p>依据命令行提示，打开 <a href="http://localhost:4000即可看到默认主题的默认页面了。">http://localhost:4000即可看到默认主题的默认页面了。</a></p><h3 id="配置git与Github账户关联"><a href="#配置git与Github账户关联" class="headerlink" title="配置git与Github账户关联"></a>配置git与Github账户关联</h3><p>1.打开前面创建的MyBlog目录下的 <strong>_config.yml</strong> 文件，在修改最下方的<strong>deploy</strong>为</p><p><strong>*==注意，冒号后面一定要加空格==</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:  type: git  repo: gihub: https://github.com/[your_account]/[your_accout].github.io.git  branch: master</span><br></pre></td></tr></table></figure><p>2.安装hexo的git部署，在命令行中执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>3.将生成静态页面并部署到github的仓库中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d -g 或者hexo generatehexo deploy</span><br></pre></td></tr></table></figure><p>当提示 <strong> INFO Deploy done: git </strong>即上传成功，这时就可以通过 *<em><a href="http://[your_account].github.io*">http://[your_account].github.io*</a></em> 来访问你的个人站点了。</p><h3 id="hexo基本配置"><a href="#hexo基本配置" class="headerlink" title="hexo基本配置"></a>hexo基本配置</h3><p>以下是hexo配置文件 <strong>_config.yml</strong> 的基本内容及基本设置，更多个性化设置请参考<a href="https://hexo.io/zh-cn/docs/index.html">官方文档</a>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">Hexo Configuration<span class="comment">## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site  ##页面信息title: Who&#x27;s Blog  ##标题，即浏览器标签栏显示的内容subtitle: Why so serious?  ##副标题description:        ##描述，简介author: Charles Wei  ##作者language: zh-CN  ##语言timezone: Asia/Shanghai  ##时区# URL## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;url: http://wwww.charleswei.me  ##域名，后面自定义域名后，写在这里，用 .github.io的话，这里用默认的不用改root: /permalink: :year/:month/:day/:title/permalink_defaults:# Directory  ##文件目录，可不改source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writing  ##静态页面生成属性，可不改new_post_name: :year-:month-:day-:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight:   enable: true   line_number: true   auto_detect: false   tab_replace:# Category &amp; Tag ##标签，可不改default_category: uncategorizedcategory_map:tag_map:# Date / Time format  ##时间格式，可不改## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination ##每页显示文章数，按需改## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions ##主题设置## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: indigo# Deployment  ##git部署关联## Docs: https://hexo.io/docs/deployment.htmldeploy:   type: git   repo: github: https://github.com/glassweichao/glassweichao.github.io.git  branch: master</span></span></span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>Hexo具有高定制的主题效果，你可以从Hexo的<a href="https://hexo.io/themes/">主题库</a>中选择合适的主题，也可以自己制作。<br>以我现在使用的<a href="https://github.com/yscoder/hexo-theme-indigo">indigo</a>主题为例。首先将主题库clone到MyBlog目录下的themes目录：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:yscoder/hexo-theme-indigo.git themes/indigo1</span><br></pre></td></tr></table></figure><p>安装less，主题使用less作为css预处理工具：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-less --save1</span><br></pre></td></tr></table></figure><p>安装feed,用于生吃RSS：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save1</span><br></pre></td></tr></table></figure><p>安装json-content，用于生成静态站点数据，提供搜索功能的数据源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-json-content --save1</span><br></pre></td></tr></table></figure><p>开启标签页：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags1</span><br></pre></td></tr></table></figure><p>修改<code>MyBlog/source/tags/index.md</code>的源数据：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout: tagsnoDate: truecomments: false---1234</span><br></pre></td></tr></table></figure><p>修改hexo配置文件<code>_config.yml</code>中的主题标签：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: indigo1</span><br></pre></td></tr></table></figure><p>最后修改主题配置文件<code>MyBlog/themes/indigo/_config.yml</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加新菜单项遵循以下规则# menu:#   link: fontawesome图标，省略前缀，本主题前缀为 icon-，必须#   text: About 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写#   url: /about 链接，绝对或相对路径，必须。#   target: _blank 是否跳出，省略则在当前页面打开menu:   home:     text: 主页    url: /   archives:     url: /archives   tags:     url: /tags   github:     url: https://github.com/glassweichao     target: _blank   link:     text: 测试     url: /404rss: /atom.xml#你的头像,替换掉 indigo/source/img/logo.jpg 即可urlavatar: /img/logo.jpg# Contenttags:   title: 标签#是否开启分享share: true#是否开启搜索search: true#是否大屏幕下文章页隐藏导航hideMenu: true#是否开启toc#toc: false  关闭toctoc:   list_number: true # 是否显示数字排序#浏览器标签栏小图标favicon: /favicon.ico1234567891011121314151617181920212223242526272829303132333435363738</span><br></pre></td></tr></table></figure><p>最后生成部署，来看看效果吧</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo cleanhexo d -g</span><br></pre></td></tr></table></figure><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><p>1.brew安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><p>2.安装包安装</p><h2 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h2><p>官网下载 （<a href="https://repo.anaconda.com/archive/Anaconda3-2020.11-MacOSX-x86_64.pkg）">https://repo.anaconda.com/archive/Anaconda3-2020.11-MacOSX-x86_64.pkg）</a></p><p>创建虚拟环境</p><blockquote><p>conda create —name DeepLearning python=3  #指定执行版本为python3</p><p>conda activate DeepLearning</p><p>pip3 install numpy</p><p>pip3 install pandas</p><p>pip3 install matplotlib</p><p>pip3 install Scikit-Learn</p><p>pip3 install torch torchvision torchaudio #pytorch 安装</p><p>conda info —envs #查看已经安装的环境</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 优化浅析</title>
      <link href="/archives/45590.html"/>
      <url>/archives/45590.html</url>
      
        <content type="html"><![CDATA[<p>数据库优化从4个方向去优化<br>1、sql和索引，写出健壮的sql，索引不是越多越好<br>2、数据表结构（存储引擎，字段大小，字段类型，索引，第三规范）<br>3、系统配置（打开文件系统次数，文件安全性）<br>4、硬件（更合适的cup,更大的内存，更快的io，cup并不是越大越好）</p><span id="more"></span><blockquote><p>show variables like ‘slow_query_log’  查询慢查询日志<br>set globel slow_query_log_file = ‘/home/mysql/sql_log/mysql-slow.log’  设置慢查询日志的路径<br>set global log_queries_not_using_indexes = on;    设置慢查询日志是否记录未添加索引的字段<br>set global long_query_time = 1    设置记录慢查询日志时间<br>mysqldumpslow -t 3 url | more</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis-genrator使用</title>
      <link href="/archives/20821.html"/>
      <url>/archives/20821.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-mybatis-generator文件新增"><a href="#1-mybatis-generator文件新增" class="headerlink" title="1.mybatis=generator文件新增"></a>1.mybatis=generator文件新增</h4><p>在项目路径下新建如下xml文件：名称随便定义</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator01.png" alt="image-20210426140410304"></p><p>内容添加如下：具体需要该内容如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql 连接数据库jar 这里选择自己本地位置;</span></span><br><span class="line"><span class="comment">    如果不知道maven本地仓库地址，可以使用EveryThing工具全局搜索mysql-connector-java，找到jar包位置；</span></span><br><span class="line"><span class="comment">    也可以手动下载一个jar放在指定位置，进行引用。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;C:\\Users\\lhh\\.m2\\repository\\mysql\\mysql-connector-java\\8.0.11\\mysql-connector-java-8.0.11.jar&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;testTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释,true：是,false:否 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/shijiazhuang?serverTimezone=UTC<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span> <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;xxxx&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和</span></span><br><span class="line"><span class="comment">           NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定javaBean生成的位置</span></span><br><span class="line"><span class="comment">            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；</span></span><br><span class="line"><span class="comment">            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.nuist.tw.rainfall.bean&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false；如果多个数据库改为true分目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  指定mapper映射文件生成的位置</span></span><br><span class="line"><span class="comment">           targetPackage、targetProject同javaModelGenerator中作用一样--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定mapper接口生成的位置</span></span><br><span class="line"><span class="comment">         targetPackage、targetProject同javaModelGenerator中作用一样</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.nuist.tw.rainfall.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定数据库表</span></span><br><span class="line"><span class="comment">        domainObjectName：生成的domain类的名字,当表名和domain类的名字有差异时一定要设置，如果不设置，直接使用表名作为domain类的名字；</span></span><br><span class="line"><span class="comment">        可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;zone_stat_ref_backup&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要修改的地方：</p><p><strong>1：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator02.png" alt="image-20210426140756613"></p><p><strong>2：</strong><br><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator03.png" alt="image-20210426140935628"></p><p><strong>3：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator04.png" alt="image-20210426141048497"></p><p><strong>4：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator05.png" alt="image-20210426141149622"></p><h4 id="2-poom-xml新增依赖"><a href="#2-poom-xml新增依赖" class="headerlink" title="2.poom.xml新增依赖"></a>2.poom.xml新增依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis代码生成插件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>Generate MyBatis Artifacts<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-idea新增maven执行程序"><a href="#3-idea新增maven执行程序" class="headerlink" title="3.idea新增maven执行程序"></a><strong>3.idea新增maven执行程序</strong></h3><h4 id="3-1"><a href="#3-1" class="headerlink" title="3.1:"></a>3.1:</h4><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator06.png" alt="image-20210426142455587"></p><h4 id="3-2-新增maven执行依赖"><a href="#3-2-新增maven执行依赖" class="headerlink" title="3.2 新增maven执行依赖"></a>3.2 新增maven执行依赖</h4><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator07.png" alt="image-20210426142610092"></p><h4 id="3-3-新增maven执行脚本"><a href="#3-3-新增maven执行脚本" class="headerlink" title="3.3: 新增maven执行脚本"></a>3.3: 新增maven执行脚本<img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator08.png" alt="image-20210426142758300"></h4><h4 id="3-4-选择本地maven配置"><a href="#3-4-选择本地maven配置" class="headerlink" title="3.4 选择本地maven配置"></a>3.4 选择本地maven配置</h4><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/mybatis-generator09.png" alt="image-20210426142849860"></p><p>添加完毕，直接运行即可</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改善github访问速度的几种方式</title>
      <link href="/archives/38968.html"/>
      <url>/archives/38968.html</url>
      
        <content type="html"><![CDATA[<p>改善github访问速度的几种方式：</p><span id="more"></span><h2 id="1-GitHub-镜像访问"><a href="#1-GitHub-镜像访问" class="headerlink" title="1. GitHub 镜像访问"></a><strong>1. GitHub 镜像访问</strong></h2><p>这里提供两个最常用的镜像地址：</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//github.com.cnpmjs.org">https://github.com.cnpmjs.org</a></li><li><a href="https://link.zhihu.com/?target=https%3A//hub.fastgit.org">https://hub.fastgit.org</a></li></ul><p>也就是说上面的镜像就是一个克隆版的 GitHub，你可以访问上面的镜像网站，网站的内容跟 GitHub 是完整同步的镜像，然后在这个网站里面进行下载克隆等操作。</p><h2 id="2-GitHub-文件加速"><a href="#2-GitHub-文件加速" class="headerlink" title="2. GitHub 文件加速"></a><strong>2. GitHub 文件加速</strong></h2><p>利用 Cloudflare Workers 对 github release 、archive 以及项目文件进行加速，部署无需服务器且自带CDN.</p><ul><li><a href="https://link.zhihu.com/?target=https%3A//gh.api.99988866.xyz">https://gh.api.99988866.xyz</a></li><li><a href="https://link.zhihu.com/?target=https%3A//g.ioiox.com">https://g.ioiox.com</a></li></ul><p>以上网站为演示站点，如无法打开可以查看开源项目：gh-proxy-GitHub(<a href="https://link.zhihu.com/?target=https%3A//hunsh.net/archives/23/">https://hunsh.net/archives/23/</a>) 文件加速自行部署。</p><h2 id="3-Github-加速下载"><a href="#3-Github-加速下载" class="headerlink" title="3. Github 加速下载"></a><strong>3. Github 加速下载</strong></h2><p>只需要复制当前 GitHub 地址粘贴到输入框中就可以代理加速下载！</p><p>地址：<a href="https://link.zhihu.com/?target=http%3A//toolwa.com/github/">http://toolwa.com/github/</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F01.png" alt="image-20210427044306625"></p><h2 id="4-加速你的-Github"><a href="#4-加速你的-Github" class="headerlink" title="4. 加速你的 Github"></a><strong>4. 加速你的 Github</strong></h2><p><a href="https://link.zhihu.com/?target=https%3A//github.zhlh6.cn">https://github.zhlh6.cn</a></p><p>输入 Github 仓库地址，使用生成的地址进行 git ssh 等操作</p><h2 id="5-谷歌浏览器-GitHub-加速插件-推荐"><a href="#5-谷歌浏览器-GitHub-加速插件-推荐" class="headerlink" title="5. 谷歌浏览器 GitHub 加速插件(推荐)"></a><strong>5. 谷歌浏览器 GitHub 加速插件(推荐)</strong></h2><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E8%AE%BF%E9%97%AE%E5%8A%A0%E9%80%9F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F02.png" alt="image-20210427044539819"></p><h2 id="6-GitHub-raw-加速"><a href="#6-GitHub-raw-加速" class="headerlink" title="6. GitHub raw 加速"></a><strong>6. GitHub raw 加速</strong></h2><p>GitHub raw 域名并非 <a href="https://link.zhihu.com/?target=http%3A//github.com">http://github.com</a> 而是 <a href="https://link.zhihu.com/?target=http%3A//raw.githubusercontent.com">http://raw.githubusercontent.com</a>，上方的 GitHub 加速如果不能加速这个域名，那么可以使用 Static CDN 提供的反代服务。</p><p>将 <a href="https://link.zhihu.com/?target=http%3A//raw.githubusercontent.com">http://raw.githubusercontent.com</a> 替换为 <a href="https://link.zhihu.com/?target=http%3A//raw.staticdn.net">http://raw.staticdn.net</a> 即可加速。</p><h2 id="7-GitHub-Jsdelivr"><a href="#7-GitHub-Jsdelivr" class="headerlink" title="7. GitHub + Jsdelivr"></a><strong>7. GitHub + Jsdelivr</strong></h2><p>jsdelivr 唯一美中不足的就是它不能获取 exe 文件以及 Release 处附加的 exe 和 dmg 文件。</p><p>也就是说如果 exe 文件是附加在 Release 处但是没有在 code 里面的话是无法获取的。所以只能当作静态文件 cdn 用途，而不能作为 Release 加速下载的用途。</p><h2 id="8-通过-Gitee-中转-fork-仓库下载"><a href="#8-通过-Gitee-中转-fork-仓库下载" class="headerlink" title="8. 通过 Gitee 中转 fork 仓库下载"></a><strong>8. 通过 Gitee 中转 fork 仓库下载</strong></h2><p>网上有很多相关的教程，这里简要的说明下操作。</p><p>访问 gitee 网站：<a href="https://link.zhihu.com/?target=https%3A//gitee.com/">https://gitee.com/</a> 并登录，在顶部选择“从 GitHub/GitLab 导入仓库” 如下：</p><p>等待导入操作完成，然后在导入的仓库中下载浏览对应的该 GitHub 仓库代码，你也可以点击仓库顶部的“刷新”按钮进行 Github 代码仓库的同步。</p><h2 id="9-通过修改-HOSTS-文件进行加速"><a href="#9-通过修改-HOSTS-文件进行加速" class="headerlink" title="9. 通过修改 HOSTS 文件进行加速"></a><strong>9. 通过修改 HOSTS 文件进行加速</strong></h2><p>手动把cdn和ip地址绑定。</p><p><a href="https://blog.csdn.net/qq_38140292/article/details/114104854">【github】提升github访问速度_最爱吃大米的博客-CSDN博客_github hosts加速</a></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git提交到多个远程仓库</title>
      <link href="/archives/42168.html"/>
      <url>/archives/42168.html</url>
      
        <content type="html"><![CDATA[<p>使用gitee与github的仓库地址来进行简单的演示</p><ul><li><code>gitee</code>：git@gitee.com:liuhuanhuan963019/xxxx.git</li><li><code>github</code>： git@github.com:liuhuanhuan963019/xxxx.git</li></ul><span id="more"></span><p>查看本地仓库地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">origin  https://github.com/Esri/java-maven-starter-project.git (fetch)</span><br><span class="line">origin  https://github.com/Esri/java-maven-starter-project.git (push)</span><br></pre></td></tr></table></figure><p>新增gitee仓库地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote set-url --add origin https://gitee.com/liuhuanhuan963019/java-maven-starter-project.git</span><br></pre></td></tr></table></figure><p><strong>再通过<code>git remote -v</code>查看远程版本库信息</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">origin  https://github.com/Esri/java-maven-starter-project.git (fetch)</span><br><span class="line">origin  https://github.com/Esri/java-maven-starter-project.git (push)</span><br><span class="line">origin  https://gitee.com/liuhuanhuan963019/java-maven-starter-project.git (push)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git push origin --all</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【小白】 git常用命令汇总</title>
      <link href="/archives/43066.html"/>
      <url>/archives/43066.html</url>
      
        <content type="html"><![CDATA[<p>配置gi t</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;username&quot;</span><br><span class="line">git config --global user.email &quot;username@example.com&quot;</span><br></pre></td></tr></table></figure><span id="more"></span><p>忽略文件：</p><p>扩展名为.pyc的文件是根据.py文件自动生成的，因此我们无需让Git跟踪它们。这些文件存 储在目录<strong>pycache</strong>中。为让Git忽略这个目录，创建一个名为.gitignore的特殊文件（这个文件 名以句点打头，且没有扩展名），</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.gitignore</span><br></pre></td></tr></table></figure><p>这让Git忽略目录<strong>pycache</strong>中的所有文件。使用文件.gitignore可避免项目混乱，开发起来 更容易。</p><p>初始化仓库：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>查看当前项目状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>将文件加入到仓库中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p>执行提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><p>查看提交历史</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>第二次提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git commit -am &quot;commit&quot;</span><br><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure><p>撤销修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git status  #查看下此时git状态git checkout让你能够恢复到以前的任何提交。命令git checkout .放弃自最后一次提交后所做的所有修改，将项目恢复到最后一次提交的状态git checkout .git status</span><br></pre></td></tr></table></figure><p>检查以前的提交</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git log --pretty=onelinegit checkout be017b</span><br></pre></td></tr></table></figure><p>切换分支 前的代码最好全部提交，不要作任何更改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout mastergit statusgit log --pretty=onelinegit reset --hard be017bgit statusgit log --pretty=oneline</span><br></pre></td></tr></table></figure><p>删除仓库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git statusrm -rf .gitgit statusgit init git statusgit initgit add.git commit -m &quot;&quot;git status</span><br></pre></td></tr></table></figure><p>分支操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch 查看当前所在分支git branch -a 查看项目所有分支git branch -r 查看项目远程分支git chectout -b dev 创建本地分支并切换到新创建的分支git push origin HEAD -U 将新创建的分支信息推送到githubgit branch -d 分支名称删除本地的指定分支git push orign --delete dev 删除远程分支</span><br></pre></td></tr></table></figure><p>用户信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name 查看本地名称git config user.email 查看本地emailgit config -a 查看本地所有配置#查看当前用户配置git config --global --list #查看系统用户配置git config --system --list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Typora】github-与PicGO搭建图床</title>
      <link href="/archives/60878.html"/>
      <url>/archives/60878.html</url>
      
        <content type="html"><![CDATA[<p>Markdown使用过程中最让人头疼的恐怕就是插入图片了，添加图片的方法可查看 <a href="https://www.jianshu.com/p/280c6a6f2594">简书-Markdown添加图片的三种方式</a>。简单总结，常用插入图片方法主要分为插入本地图片、插入网络图片两种。</p><span id="more"></span><h3 id="一、PicGo下载"><a href="#一、PicGo下载" class="headerlink" title="一、PicGo下载"></a>一、PicGo下载</h3><p><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.4">链接地址：</a></p><p>如果觉得下载慢的话，本文提供了百度云下载：</p><p>链接: <a href="https://pan.baidu.com/s/1r0s_0jNjBcJiw047WzLAmQ">https://pan.baidu.com/s/1r0s_0jNjBcJiw047WzLAmQ</a>  密码: hhq7</p><h3 id="二、新建github-仓库"><a href="#二、新建github-仓库" class="headerlink" title="二、新建github 仓库"></a>二、新建github 仓库</h3><p>​        <img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Typora%E3%80%91github%E4%B8%8Epicgo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE01.png" alt="【Typora】github与picgo图床设置01"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Typora%E3%80%91github%E4%B8%8Epicgo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE02.png" alt="【Typora】github与picgo图床设置02"></p><h3 id="三、github-token生成"><a href="#三、github-token生成" class="headerlink" title="三、github token生成"></a>三、github token生成</h3><p><code>生成一个token，让PicGo可以操作你的仓库</code></p><ul><li>方法1（直接访问tokens界面），<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> ，点击<code>Generate new token</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E4%B8%8Epicgo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE03.jpg" alt="【Typora】github与picgo图床设置03"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E4%B8%8Epicgo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE04.jpg" alt="【Typora】github与picgo图床设置04"></p><p>勾选<code>repo</code>后，滑到页面最下端，单击 <code>Generate token</code> 绿色按钮，生成token。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E4%B8%8Epicgo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE05.jpg" alt="【Typora】github与picgo图床设置05"></p><p><strong>注意，生成的token只会显示一次，建议另存为文本文件妥善保存。如果忘记了，只能重新生成新的token，每次新生成的token与之前都不同。</strong></p><ul><li><p>方法2 点击主页右上角的<code>Settings</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E4%B8%8Epicgo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE06.jpg" alt="【Typora】github与picgo图床设置06"></p></li></ul><p>后续操作与步骤一差不多</p><h3 id="四、PicGo配置"><a href="#四、PicGo配置" class="headerlink" title="四、PicGo配置"></a>四、PicGo配置</h3><p><strong><em>图床配置</em></strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E4%B8%8Epicgo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE07.jpg" alt="【Typora】github与picgo图床设置07"></p><ul><li>设定仓库名：“GitHub用户名/仓库名”</li><li>设定分支名：“master”</li><li>设定Token：”上一步在github中生成的token）”</li><li>指定存储路径：会按照填写的路径在GitHub仓库下建立文件夹，填写 “img/” 即可 （填不填都行）</li><li>设定自定义域名：“<a href="https://github.com/(用户名)/(仓库名)/master”（填不填都行）">https://github.com/(用户名)/(仓库名)/master”（填不填都行）</a></li></ul><h3 id="五、自定义配置"><a href="#五、自定义配置" class="headerlink" title="五、自定义配置"></a>五、自定义配置</h3><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E4%B8%8Epicgo%E5%9B%BE%E5%BA%8A%E8%AE%BE%E7%BD%AE08.jpg" alt="【Typora】github与picgo图床设置08"></p><p>使用GitHub仓库作为图床，存在的问题是国内访问github的速度很慢，可以利用 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.jsdelivr.com%2F">jsDelivr CDN</a> 来加速访问。jsDelivr 是一个免费开源的 CDN 解决方案，该平台是首个打通中国大陆与海外的免费CDN服务，拥有中国政府颁发的 ICP 许可证，无须担心中国防火墙问题而影响使用。使用jsDelivr加速访问，需要将自定义域名设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名/</code>。</p><p>通过此方式可以成功访问。</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【小白】 git本地代码上传到github</title>
      <link href="/archives/37038.html"/>
      <url>/archives/37038.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://git-scm.com/download/win">下载git</a></p><p><a href="https://github.com/join?source=header-home">注册github账户</a></p><span id="more"></span><h3 id="1-在github上创建项⽬"><a href="#1-在github上创建项⽬" class="headerlink" title="1.在github上创建项⽬"></a>1.在github上创建项⽬</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6vxki6zj30ms0csgzt.jpg" alt="image-20201208090803623" style="zoom:50%;" /></p><blockquote><p>填好后点 Create repository 按钮提交</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6w275wgj30ky0g2thz.jpg" alt="image-20201208090839504" style="zoom:50%;" /></p><p>提交成功如下图：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6wfzzi4j30mw0dw74w.jpg" alt="image-20201208090908481" style="zoom:50%;" /></p><h3 id="2-把本地代码提交到git"><a href="#2-把本地代码提交到git" class="headerlink" title="2.把本地代码提交到git"></a>2.把本地代码提交到git</h3><blockquote><p><strong>进⼊到：本地⽬录代码⽂件⽬录</strong></p><p>单击 右键 打开git bush 类似于Win的cmd</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6wiuqckj30ju0gewmt.jpg" alt="image-20201208091412803" style="zoom:50%;" /></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6wn03q6j30mo0gcjvp.jpg" alt="image-20201208091425553" style="zoom:50%;" /></p><p>下边操作之前需要设置⽤户</p><p>⾸先,你需要执⾏下⾯两条命令,作为git的基础配置,作⽤是告诉git你是谁,你输⼊的信息将出现在你创建的提 交中.</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --GLOBAL user.NAME &quot;你的名字或昵称&quot;</span><br><span class="line">git config --GLOBAL user.EMAIL &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后执⾏:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git ADD .</span><br><span class="line">git commit -m &quot;first commit&quot;（first commit 本次提交的内容）</span><br><span class="line">git remote ADD origin https://github.com/852172891/test3.git （地址换成你</span><br><span class="line">git push -u origin MASTER（这⼀句执⾏的时候 可能需要输⼊你的 git 账号 和密码</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6wqji2sj30mo0m21kx.jpg" alt="image-20201208091640521" style="zoom:50%;" /></p><p>输⼊密码后，提交成功，到github上刷新⼀下，本地的⽂件已经上传到github上了</p><h3 id="3-项目地址"><a href="#3-项目地址" class="headerlink" title="3.项目地址"></a>3.项目地址</h3><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6wsmstij30k40i67ek.jpg" alt="image-20201208091730178" style="zoom:50%;" /></p><h3 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a>4.常见问题</h3><h4 id="4-1Permanently-added-the-RSA-host-key-for-IP-address-‘13-250-177-223’-to-t-he-list-of-known-hosts"><a href="#4-1Permanently-added-the-RSA-host-key-for-IP-address-‘13-250-177-223’-to-t-he-list-of-known-hosts" class="headerlink" title="4.1Permanently added the RSA host key for IP address ‘13.250.177.223’ to t he list of known hosts?"></a>4.1Permanently added the RSA host key for IP address ‘13.250.177.223’ to t he list of known hosts?</h4><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6ww10i2j30mq05y11w.jpg" alt="image-20201208091813211" style="zoom:50%;" /></p><p>步骤:1 可以⽤ ssh -T <a href="mailto:git@github.com去测试">git@github.com去测试⼀下</a></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6wypyuvj30mq05sn52.jpg" alt="image-20201208091841090" style="zoom:50%;" /></p><p>图上可以明显看出缺少了公钥</p><ol><li><p>在下载好的Git中的bin⽬录下打开bash.exe输⼊命令ssh-keygen -t rsa-C “username” (注：username为你git上的⽤户名)，如果执⾏成    功。返回：</p><p>Generating public/private rsa key pair.</p><p>Enter file in which to save the key</p></li></ol><p>(/Users/username/.ssh/id_rsa):    //这⾥的username是电脑上的⽤户名 这个地址也是⽂件的存储地址，然后我们按回⻋.</p><p>如果你以前有存储地址会返回/Users/yourusername/.ssh/id_rsa already exists.Overwrite (y/n)? 直接输⼊y回⻋。如果以前没有储存地址就会出现</p><p>​        Enter passphrase(empty for no passphrase);也直接回⻋，两种情况回⻋后都会出现 Enter same passphrase again 然后接着回⻋会显示⼀⻓串内容其中</p><p>​    还有⼀些..o.. o oo .oS. 之类的代码，这说明SSH key就已经⽣成了。⽂件⽬录就是：username/.ssh/id_rsa.pub.</p><p>​    <img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6x21r25j30mu086q3i.jpg" alt="image-20201208092240295" style="zoom:50%;" /></p><ol><li><p>然后找到系统⾃动在.ssh⽂件夹下⽣成两个⽂件，id_rsa和id_rsa.pub，⽤记事本打开id_rsa.pub将全部的内容复制。</p></li><li><p>打开<a href="https://github.com/，登陆你的账户，进⼊设置（Settings）找到">https://github.com/，登陆你的账户，进⼊设置（Settings）找到</a></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6x4do8bj30jg0e648f.jpg" alt="image-20201208092336801" style="zoom:50%;" /></p></li><li><p>然后将你复制的内容粘贴到key中</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg6x785wjj30mc0aatdo.jpg" alt="image-20201208092353244" style="zoom:50%;" /></p></li><li><p>再点击Add SSH Key            </p></li><li><p>仍然在bash.exe中输⼊<a href="mailto:ssh-Tgit@github.com然后会跳出">ssh -T git@github.com然后会跳出⼀堆内容你</a>只需输⼊yes回⻋就完事了，然后他会提示你成功了</p><h4 id="4-2-rejected-master-gt-master-fetch-first"><a href="#4-2-rejected-master-gt-master-fetch-first" class="headerlink" title="4.2 ! [rejected] master -&gt; master (fetch first)"></a>4.2 ! [rejected] master -&gt; master (fetch first)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push -f origin master 暴⼒解决</span><br><span class="line">https://blog.csdn.net/weixin_44118318/article/details/85030461(转载)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【小白】完整教程-idea使用git进行项目管理</title>
      <link href="/archives/23807.html"/>
      <url>/archives/23807.html</url>
      
        <content type="html"><![CDATA[<h2 id="Github如何删除项目"><a href="#Github如何删除项目" class="headerlink" title="Github如何删除项目"></a>Github如何删除项目</h2><p><a href="https://jingyan.baidu.com/article/86112f13aba9c7273797871a.html">https://jingyan.baidu.com/article/86112f13aba9c7273797871a.html</a></p><span id="more"></span><h2 id="上传本地项目到gitHub上："><a href="#上传本地项目到gitHub上：" class="headerlink" title="上传本地项目到gitHub上："></a>上传本地项目到gitHub上：</h2><ol><li><p>详细见：<a href="https://www.cnblogs.com/gougouyangzi/articles/9429280.html">https://www.cnblogs.com/gougouyangzi/articles/9429280.html</a></p></li><li><p>idea本地创建一个项目后</p></li><li><p>下载安装git</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8887dqmj30cw03it8q.jpg" alt="img"></p><ol><li><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8cq1tfzj30d706djrl.jpg" alt="img"></p></li><li><p>在IDEA中设置Git:</p></li></ol><p>在File—&gt;Setting-&gt;Version Control—&gt;Git—&gt;Path to Git executable选择你的git安装后的git.exe文件，然后点击Test，测试是否设置成功</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8861u78j30d707f0te.jpg" alt="img"></p><p>要是在bin目录下没找到此exe，不妨看看cmd目录下面有没有，也就是c://~install/cmd/git.exe;</p><ol><li>在IDEA中设置GitHub，File—&gt;Setting-&gt;Version Control—&gt;GibHub</li></ol><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg885dts2j30d707c3yv.jpg" alt="img"></p><p>登录后：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg884kwwhj30d707lglx.jpg" alt="img"></p><p>login后会自动发送一封邮件过来</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg887auh9j307v03k3ym.jpg" alt="img"></p><p>点击邮件中的第一个链接</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88953oij30d701ngll.jpg" alt="img"></p><p>会根据用户名和密码生成一个token</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg888os3xj30d702x0sp.jpg" alt="img"></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8d8x064j30d703wdg0.jpg" alt="img"></p><p>可以根据这个token去登录idea中的gitHub</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8iagaquj30qe0feth4.jpg" alt="image-20201208101859609" style="zoom:50%;" /></p><ol><li>创建本地仓库，VCS—&gt;Import into Version Control—&gt;Create Git Repository…</li></ol><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88kk3a0j30ci06raas.jpg" alt="img"></p><p>在弹框中选中项目所在的位置，点击OK，若选中其他位置，则git—&gt;add不可点选，不知为何）</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8e9vz98j30c60cdgmc.jpg" alt="img"></p><p>效果：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8ecrl70j308b08kmxo.jpg" alt="img"></p><p>此时项目文件全部变成红色</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8esj1b4j30qe0b47jv.jpg" alt="image-20201208101931988" style="zoom:50%;" /></p><ol><li><p>上传项目到本地仓库，项目右键选择Git—&gt;add，此时项目文件变成绿色，此时文件只是处于暂存区，并没有真正进入到版本库中</p><p>(本步骤是接着第6步骤的，把代码add到暂存区当中)</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8iyil3uj30qe0oi4qp.jpg" alt="image-20201208101958599" style="zoom:50%;" /></p><p>效果：</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88jjjr0j30ad0agwew.jpg" alt="img"></p><p>8.项目右键Git—&gt; Commit Directory，在弹窗中输入Commit Message，点击commit，此时项目文件从暂存区真正进入版本库中，项目文件变成白色</p><p>commit会报错，是创建项目的时候多了一个文件，删除再次提交就不会有error了</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8ja1751j30qe0lqttl.jpg" alt="image-20201208102031248" style="zoom:50%;" /></p><p>在idea中删除不掉，就要到项目所在的地方去删除了</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg886ea2wj30cv03pq35.jpg" alt="img"></p><p>9.上传项目到GitHub中，VCS—&gt;Import into Version Control—&gt;Share Project on GitHub，在弹框中输入仓库名和描述，点击Share，即可是上传，中间会弹窗输入GitHub的用户名和密码（已输入过用户名和密码并记住的不会再次弹框输入），上传成功后IDEA右下角会给出提示</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88il8scj30b0094t9a.jpg" alt="img"></p><p>出现下面情况是登录失效导致的，重新登录就行了</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8gb4k3xj30eg0i4aj9.jpg" alt="image-20201208102106821" style="zoom:50%;" /></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg889l5b3j30d705ugls.jpg" alt="img" style="zoom:50%;" /></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88a27nbj309b07gt8v.jpg" alt="img"></p><p>好像并没有share成功，只是在gitHub上完成可创建项目名，实际上并么有内容</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88aokwxj3081036gln.jpg" alt="img"></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88bluv7j30d706mjrr.jpg" alt="img"></p><p>解决方法：<a href="https://blog.csdn.net/guyuealian/article/details/51558560">https://blog.csdn.net/guyuealian/article/details/51558560</a></p><p>就是第5步骤链接账号的时候，不应该选</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88lgd81j30d707j0sz.jpg" alt="img"></p><p>再次share,由于刚才已经创建了一个同名的文件，所以可以将github上的那个删除掉，或者这个重新命名即可</p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88cezxhj3099098q36.jpg" alt="img"></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8opcy4dj30ia0g4gpi.jpg" alt="image-20201208102556448" style="zoom:50%;" /></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8otm4i5j30fu05o78l.jpg" alt="image-20201208102608959" style="zoom:50%;" /></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg8ovz46bj30qe0fcjze.jpg" alt="image-20201208102618274" style="zoom:50%;" /></p><p>10，push到远程：</p><p>新增文件（红色），右键—&gt;Git—&gt;add，将新增的文件加入本地仓库，此时文件变绿色</p><p>　　修改文件（蓝色）</p><p>　　在项目右键—&gt;Git—&gt;Commit Directory，查看有变动的文件并输入Commit Message，点击Commit and Push…</p><p>　　提交后会进行语法检查，若存在错误或警告会给出确认提示，点击Commit，弹出Push框，点击Push，上传GitHub成功（因为此时是你自己的项目，</p><p>所以有权限提交，一般git到别人的项目，应当叫别人给与权限你才能提交）</p><p><strong>注意：中间可能会出现这个问题</strong></p><p>push faildsrc: Could not read from remote repository.</p><p>解决方法：<a href="https://www.jianshu.com/p/8f80878925fd">https://www.jianshu.com/p/8f80878925fd</a></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88k0cz0j30d70600t8.jpg" alt="img"></p><p>选择要上传的git仓库：</p><p><strong><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88cx74mj30d705z74j.jpg" alt="img"></strong></p><p><img src="https://tva1.sinaimg.cn/large/0081Kckwgy1glg88ddtofj307t023a9y.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pytorch】六个学习率调整策略</title>
      <link href="/archives/37064.html"/>
      <url>/archives/37064.html</url>
      
        <content type="html"><![CDATA[<p>PyTorch学习率调整策略通过torch.optim.lr_scheduler接口实现。PyTorch提供的学习率调整策略分为三大类，分别是</p><blockquote><p>a. 有序调整：等间隔调整(Step)，按需调整学习率(MultiStep)，指数衰减调整(Exponential)和 余弦退火              CosineAnnealing。<br>   b. 自适应调整：自适应调整学习率 ReduceLROnPlateau。<br>      c. 自定义调整：自定义调整学习率 LambdaLR。</p></blockquote><span id="more"></span><h2 id="1-等间隔调整学习率-StepLR"><a href="#1-等间隔调整学习率-StepLR" class="headerlink" title="1 等间隔调整学习率 StepLR"></a>1 等间隔调整学习率 StepLR</h2><p>等间隔调整学习率，调整倍数为 gamma 倍，调整间隔为 step_size。间隔单位是step。需要注意的是， step 通常是指 epoch，不要弄成 iteration 了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.optim.lr_scheduler.StepLR(optimizer, step_size, gamma=<span class="number">0.1</span>, last_epoch=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><blockquote><p>step_size(int)- 学习率下降间隔数，若为 30，则会在 30、 60、 90…个 step 时，将学习率调整为 lr*gamma。</p><p>gamma(float)- 学习率调整倍数，默认为 0.1 倍，即下降 10 倍。</p><p>last_epoch(int)- 上一个 epoch 数，这个变量用来指示学习率是否需要调整。当last_epoch 符合设定的间隔时，就会对学习率进行调整。当为-1 时，学习率设置为初始值。</p></blockquote><h2 id="2-按需调整学习率-MultiStepLR"><a href="#2-按需调整学习率-MultiStepLR" class="headerlink" title="2 按需调整学习率 MultiStepLR"></a>2 按需调整学习率 MultiStepLR</h2><p>按设定的间隔调整学习率。这个方法适合后期调试使用，观察 loss 曲线，为每个实验定制学习率调整时机。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.optim.lr_scheduler.MultiStepLR(optimizer, milestones, gamma=<span class="number">0.1</span>, last_epoch=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><blockquote><p>milestones(list)- 一个 list，每一个元素代表何时调整学习率， list 元素必须是递增的。如 milestones=[30,80,120]<br>   gamma(float)- 学习率调整倍数，默认为 0.1 倍，即下降 10 倍。</p></blockquote><h2 id="3-指数衰减调整学习率-ExponentialLR"><a href="#3-指数衰减调整学习率-ExponentialLR" class="headerlink" title="3 指数衰减调整学习率 ExponentialLR"></a>3 指数衰减调整学习率 ExponentialLR</h2><p>按指数衰减调整学习率，调整公式:</p><script type="math/tex; mode=display">lr=lr∗gamma∗∗epoch</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.optim.lr_scheduler.ExponentialLR(optimizer, gamma, last_epoch=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><blockquote><p>gamma- 学习率调整倍数的底，指数为 epoch，即 gamma**epoch</p></blockquote><h2 id="4-余弦退火调整学习率-CosineAnnealingLR"><a href="#4-余弦退火调整学习率-CosineAnnealingLR" class="headerlink" title="4 余弦退火调整学习率 CosineAnnealingLR"></a>4 余弦退火调整学习率 CosineAnnealingLR</h2><p>以余弦函数为周期，并在每个周期最大值时重新设置学习率。以初始学习率为最大学习率，以 $2 ∗ T m a x$ 2*Tmax2∗Tmax 为周期，在一个周期内先下降，后上升。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max, eta_min=<span class="number">0</span>, last_epoch=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><blockquote><p>T_max(int)- 一次学习率周期的迭代次数，即 T_max 个 epoch 之后重新设置学习率。<br>      eta_min(float)- 最小学习率，即在一个周期中，学习率最小会下降到 eta_min，默认值为 0。</p></blockquote><h2 id="5-自适应调整学习率-ReduceLROnPlateau"><a href="#5-自适应调整学习率-ReduceLROnPlateau" class="headerlink" title="5 自适应调整学习率 ReduceLROnPlateau"></a>5 自适应调整学习率 ReduceLROnPlateau</h2><p>当某指标不再变化（下降或升高），调整学习率，这是非常实用的学习率调整策略。<br>例如，当验证集的 loss 不再下降时，进行学习率调整；或者监测验证集的 accuracy，当accuracy 不再上升时，则调整学习率。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode=<span class="string">&#x27;min&#x27;</span>, factor=<span class="number">0.1</span>, patience=<span class="number">10</span>, verbose=<span class="literal">False</span>, threshold=<span class="number">0.0001</span>, threshold_mode=<span class="string">&#x27;rel&#x27;</span>, cooldown=<span class="number">0</span>, min_lr=<span class="number">0</span>, eps=<span class="number">1e-08</span>)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><blockquote><p>mode(str)- 模式选择，有 min 和 max 两种模式， min 表示当指标不再降低(如监测loss)， max 表示当指标不再升高(如监测 accuracy)。<br>factor(float)- 学习率调整倍数(等同于其它方法的 gamma)，即学习率更新为 lr = lr <em> factor<br>patience(int)- 忍受该指标多少个 step 不变化，当忍无可忍时，调整学习率。<br>verbose(bool)- 是否打印学习率信息， print(‘Epoch {:5d}: reducing learning rate of group {} to {:.4e}.’.format(epoch, i, new_lr))<br>threshold_mode(str)- 选择判断指标是否达最优的模式，有两种模式， rel 和 abs。<br>当 threshold_mode == rel，并且 mode == max 时， dynamic_threshold = best </em> ( 1 +threshold )；<br>当 threshold_mode == rel，并且 mode == min 时， dynamic_threshold = best * ( 1 -threshold )；<br>当 threshold_mode == abs，并且 mode== max 时， dynamic_threshold = best + threshold ；<br>当 threshold_mode == rel，并且 mode == max 时， dynamic_threshold = best - threshold；<br>threshold(float)- 配合 threshold_mode 使用。<br>cooldown(int)- “冷却时间“，当调整学习率之后，让学习率调整策略冷静一下，让模型再训练一段时间，再重启监测模式。<br>min_lr(float or list)- 学习率下限，可为 float，或者 list，当有多个参数组时，可用 list 进行设置。<br>eps(float)- 学习率衰减的最小值，当学习率变化小于 eps 时，则不调整学习率。</p></blockquote><h2 id="6-自定义调整学习率-LambdaLR"><a href="#6-自定义调整学习率-LambdaLR" class="headerlink" title="6 自定义调整学习率 LambdaLR"></a>6 自定义调整学习率 LambdaLR</h2><p>为不同参数组设定不同学习率调整策略。调整规则为，<img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20210317215333748.png" alt="image-20210317215333748"></p><p>fine-tune 中十分有用，我们不仅可为不同的层设定不同的学习率，还可以为其设定不同的学习率调整策略。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.optim.lr_scheduler.LambdaLR(optimizer, lr_lambda, last_epoch=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>参数：</strong></p><blockquote><p>lr_lambda(function or list)- 一个计算学习率调整倍数的函数，输入通常为 step，当有多个参数组时，设为 list。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pytorch】unsqueeze()与squeeze()详解</title>
      <link href="/archives/38768.html"/>
      <url>/archives/38768.html</url>
      
        <content type="html"><![CDATA[<p>squeeze()主要用于对数据的维度进行压缩或者解压的</p><p><a href="https://pytorch.org/docs/stable/generated/torch.squeeze.html?highlight=squeeze#torch.squeeze">官方文档</a></p><span id="more"></span><h2 id="torch-squeeze"><a href="#torch-squeeze" class="headerlink" title="torch.squeeze()"></a>torch.squeeze()</h2><blockquote><p>对数据的维度进行压缩</p><p>使用方式：torch.squeeze(input, dim=None, out=None)</p><p>将输入张量形状中的1 去除并返回。 如果输入是形如(A×1×B×1×C×1×D)，那么输出形状就为： (A×B×C×D)</p><p>当给定dim时，那么挤压操作只在给定维度上。例如，输入形状为: (A×1×B), <code>squeeze(input, 0)</code> 将会保持张量不变，只有用 <code>squeeze(input, 1)</code>，形状会变成 (A×B)。</p></blockquote><p>注意：</p><p>输入的张量和返回的张量共用一段内存空间，改变了其中一个，其余的都会被改变</p><p>参数：</p><ul><li><code>input (Tensor)</code> – 输入张量</li><li><code>dim (int, optional)</code> – 如果给定，则input只会在给定维度挤压</li><li><code>out (Tensor, optional)</code> – 输出张量</li></ul><p><strong>多维张量本质上就是一个变换，如果维度是 1 ，那么，1 仅仅起到扩充维度的作用，而没有其他用途，因而，在进行降维操作时，为了加快计算，是可以去掉这些 1 的维度。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = torch.zeros(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(m.size())</span><br><span class="line"><span class="comment"># print torch.Size([2, 1, 2, 1, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认删除维度为1的维数</span></span><br><span class="line">n = torch.squeeze(m)</span><br><span class="line"><span class="built_in">print</span>(n.size())</span><br><span class="line"><span class="comment"># print torch.Size([2, 2, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当给定dim参数值的时候，那么挤压操作只会给定在指定的维度上</span></span><br><span class="line">m = torch.zeros(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">n = torch.squeeze(m,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(n.size())</span><br><span class="line"><span class="comment"># print torch.Size([2, 1, 2, 1, 2])</span></span><br><span class="line"></span><br><span class="line">n = torch.squeeze(m,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(n.size())</span><br><span class="line"><span class="comment">#print torch.Size([2, 2, 1, 2])</span></span><br><span class="line"></span><br><span class="line">n = torch.squeeze(m, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(n.size())</span><br><span class="line"><span class="comment">#print torch.Size([2, 1, 2, 1, 2])</span></span><br><span class="line"></span><br><span class="line">n = torch.squeeze(m, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(n.size())</span><br><span class="line"><span class="comment">#print torch.Size([2, 1, 2, 2])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">p = torch.zeros(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="comment"># tensor([[[0.]],</span></span><br><span class="line"><span class="comment">#         [[0.]]])</span></span><br><span class="line"><span class="built_in">print</span>(p.numpy())</span><br><span class="line"><span class="comment"># [[[0.]]</span></span><br><span class="line"><span class="comment">#  [[0.]]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.size())</span><br><span class="line"><span class="comment"># torch.Size([2, 1, 1])</span></span><br><span class="line"></span><br><span class="line">q = torch.squeeze(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"><span class="comment"># tensor([0., 0.])</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.numpy())</span><br><span class="line"><span class="comment"># [0. 0.]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q.size())</span><br><span class="line"><span class="comment"># torch.Size([2])</span></span><br></pre></td></tr></table></figure><p>==总结：==这个函数主要对数据的维度进行压缩，去掉维数为1的的维度，比如是一行或者一列这种，一个一行三列（1,3）的数去掉第一个维数为一的维度之后就变成（3）行。squeeze(a)就是将a中所有为1的维度删掉。不为1的维度没有影响。a.squeeze(N) 就是去掉a中指定的维数为一的维度。还有一种形式就是b=torch.squeeze(a，N) a中去掉指定的定的维数为一的维度。</p><h2 id="torch-unsqueeze"><a href="#torch-unsqueeze" class="headerlink" title="torch.unsqueeze()"></a>torch.unsqueeze()</h2><blockquote><p>torch.unsqueeze(input, dim, out=None)</p><ul><li><p><strong>作用</strong>：扩展维度</p><p>​            返回一个新的张量，对输入的既定位置插入维度 1</p></li><li><p><strong>注意：</strong> 返回张量与输入张量共享内存，所以改变其中一个的内容会改变另一个。</p></li></ul><blockquote><p>如果dim为负，则将会被转化dim+input.dim()+1</p><ul><li><strong>参数:</strong></li><li><code>tensor (Tensor)</code> – 输入张量</li><li><code>dim (int)</code> – 插入维度的索引</li><li><code>out (Tensor, optional)</code> – 结果张量</li></ul></blockquote></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line">x = torch.Tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])  <span class="comment"># torch.Tensor是默认的tensor类型（torch.FlaotTensor）的简称。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># tensor([1., 2., 3., 4.])</span></span><br><span class="line"><span class="built_in">print</span>(x.size())  <span class="comment"># torch.Size([4])</span></span><br><span class="line"><span class="built_in">print</span>(x.dim())  <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(x.numpy())  <span class="comment"># [1. 2. 3. 4.]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, <span class="number">0</span>))  <span class="comment"># tensor([[1., 2., 3., 4.]])</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, <span class="number">0</span>).size())  <span class="comment"># torch.Size([1, 4])</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, <span class="number">0</span>).dim())  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, <span class="number">0</span>).numpy())  <span class="comment"># [[1. 2. 3. 4.]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># tensor([[1.],</span></span><br><span class="line"><span class="comment">#         [2.],</span></span><br><span class="line"><span class="comment">#         [3.],</span></span><br><span class="line"><span class="comment">#         [4.]])</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, <span class="number">1</span>).size())  <span class="comment"># torch.Size([4, 1])</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, <span class="number">1</span>).dim())  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, -<span class="number">1</span>))</span><br><span class="line"><span class="comment"># tensor([[1.],</span></span><br><span class="line"><span class="comment">#         [2.],</span></span><br><span class="line"><span class="comment">#         [3.],</span></span><br><span class="line"><span class="comment">#         [4.]])</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, -<span class="number">1</span>).size())  <span class="comment"># torch.Size([4, 1])</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, -<span class="number">1</span>).dim())  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, -<span class="number">2</span>))  <span class="comment"># tensor([[1., 2., 3., 4.]])</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, -<span class="number">2</span>).size())  <span class="comment"># torch.Size([1, 4])</span></span><br><span class="line"><span class="built_in">print</span>(torch.unsqueeze(x, -<span class="number">2</span>).dim())  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>==总结：==给指定位置加上维数为一的维度，比如原本有个三行的数据（3），在0的位置加了一维就变成一行三列（1,3）。a.unsqueeze(N) 就是在a中指定位置N加上一个维数为1的维度。</p><p>参考:<a href="https://zhuanlan.zhihu.com/p/86763381">https://zhuanlan.zhihu.com/p/86763381</a></p>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pytorch】torch.stack()的使用</title>
      <link href="/archives/34140.html"/>
      <url>/archives/34140.html</url>
      
        <content type="html"><![CDATA[<p>在<code>pytorch</code>中，常见的拼接函数主要是两个，分别是：</p><ol><li><code>stack()</code></li><li><code>cat()</code></li></ol><span id="more"></span><p>实际使用中，这两个函数互相辅助：关于<code>cat()</code>参考<a href="https://blog.csdn.net/xinjieyuan/article/details/105208352">torch.cat()</a>，但是本文主要说<code>stack()</code>。</p><p><strong>函数的意义</strong>：使用<code>stack</code>可以保留两个信息：[1. 序列] 和 [2. 张量矩阵] 信息，属于【<strong>扩张</strong>再拼接】的函数；可以认为把一个个矩阵按时间序列压紧成一个矩阵。 常出现在自然语言处理（<code>NLP</code>）和图像卷积神经网络(<code>CV</code>)中。</p><h3 id="1-stack"><a href="#1-stack" class="headerlink" title="1. stack()"></a>1. <code>stack()</code></h3><p>官方解释：沿着一个新维度对输入张量序列进行连接。 序列中所有的张量都应该为相同形状。</p><p>浅显说法：把多个2维的张量凑成一个3维的张量；多个3维的凑成一个4维的张量…以此类推，也就是在<strong>增加新的维度进行堆叠</strong>。</p><h5 id="outputs-torch-stack-inputs-dim-0-→-Tensor"><a href="#outputs-torch-stack-inputs-dim-0-→-Tensor" class="headerlink" title="outputs = torch.stack(inputs, dim=0) → Tensor"></a><code>outputs = torch.stack(inputs, dim=0) → Tensor</code></h5><p><strong>参数</strong></p><ul><li>inputs : 待连接的张量序列。<br>注：<code>python</code>的序列数据只有<code>list</code>和<code>tuple</code>。</li><li>dim : 新的维度， 必须在<code>0</code>到<code>len(outputs)</code>之间。<br>注：<code>len(outputs)</code>是生成数据的维度大小，也就是<code>outputs</code>的维度值。</li></ul><h3 id="2-重点"><a href="#2-重点" class="headerlink" title="2. 重点"></a>2. 重点</h3><ol><li>函数中的输入<code>inputs</code>只允许是序列；且序列内部的张量元素，必须<code>shape</code>相等</li></ol><p>——举例：<code>[tensor_1, tensor_2,..]</code>或者<code>(tensor_1, tensor_2,..)</code>，且必须<code>tensor_1.shape == tensor_2.shape</code></p><ol><li><code>dim</code>是选择生成的维度，必须满足<code>0&lt;=dim&lt;len(outputs)</code>；<code>len(outputs)</code>是输出后的<code>tensor</code>的维度大小</li></ol><p>不懂的看例子，再回过头看就懂了。</p><h3 id="3-例子"><a href="#3-例子" class="headerlink" title="3. 例子"></a>3. 例子</h3><p>1.准备2个<code>tensor</code>数据，每个的<code>shape</code>都是<code>[3,3]</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设是时间步T1</span></span><br><span class="line">T1 = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]])</span><br><span class="line"><span class="comment"># 假设是时间步T2</span></span><br><span class="line">T2 = torch.tensor([[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">        [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>],</span><br><span class="line">        [<span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span>]])</span><br></pre></td></tr></table></figure><p>2.测试stack函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(torch.stack((T1,T2),dim=<span class="number">0</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(torch.stack((T1,T2),dim=<span class="number">1</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(torch.stack((T1,T2),dim=<span class="number">2</span>).shape)</span><br><span class="line"><span class="built_in">print</span>(torch.stack((T1,T2),dim=<span class="number">3</span>).shape)</span><br><span class="line"><span class="comment"># outputs:</span></span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])</span><br><span class="line">torch.Size([<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">torch.Size([<span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>])</span><br><span class="line"><span class="string">&#x27;选择的dim&gt;len(outputs)，所以报错&#x27;</span></span><br><span class="line">IndexError: Dimension out of <span class="built_in">range</span> (expected to be <span class="keyword">in</span> <span class="built_in">range</span> of [-<span class="number">3</span>, <span class="number">2</span>], but got <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>可以复制代码运行试试：拼接后的<code>tensor</code>形状，会根据不同的<code>dim</code>发生变化。</p><div class="table-container"><table><thead><tr><th>dim</th><th>shape</th></tr></thead><tbody><tr><td>0</td><td>[2, 3, 3]</td></tr><tr><td>1</td><td>[3, 2, 3]</td></tr><tr><td>2</td><td>[3, 3, 2]</td></tr><tr><td>3</td><td><strong>溢出报错</strong></td></tr></tbody></table></div><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><ol><li>函数作用：<br>函数<code>stack()</code>对<strong>序列数据</strong>内部的张量进行扩维拼接，指定维度由程序员选择、大小是生成后数据的维度区间。</li><li>存在意义：<br>在自然语言处理和卷及神经网络中， <strong>通常为了保留–[序列(先后)信息] 和 [张量的矩阵信息]</strong> 才会使用<code>stack</code>。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pytorch】torch.normal()使用</title>
      <link href="/archives/17735.html"/>
      <url>/archives/17735.html</url>
      
        <content type="html"><![CDATA[<h3 id="torch-normal"><a href="#torch-normal" class="headerlink" title="torch.normal()"></a>torch.normal()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">torch.normal(means, std, out=None)</span><br></pre></td></tr></table></figure><span id="more"></span><p>返回一个张量，包含从给定参数<code>means</code>,<code>std</code>的离散正态分布中抽取随机数。 均值<code>means</code>是一个张量，包含每个输出元素相关的正态分布的均值。 <code>std</code>是一个张量，包含每个输出元素相关的正态分布的标准差。 均值和标准差的形状不须匹配，但每个张量的元素个数须相同。</p><p>参数:</p><ul><li>means (Tensor) – 均值</li><li>std (Tensor) – 标准差</li><li>out (Tensor) – 可选的输出张量</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.normal(means=torch.arange(<span class="number">1</span>, <span class="number">11</span>), std=torch.arange(<span class="number">1</span>, <span class="number">0</span>, -<span class="number">0.1</span>))</span><br><span class="line"> </span><br><span class="line"><span class="number">1.5104</span></span><br><span class="line"><span class="number">1.6955</span></span><br><span class="line"><span class="number">2.4895</span></span><br><span class="line"><span class="number">4.9185</span></span><br><span class="line"><span class="number">4.9895</span></span><br><span class="line"><span class="number">6.9155</span></span><br><span class="line"><span class="number">7.3683</span></span><br><span class="line"><span class="number">8.1836</span></span><br><span class="line"><span class="number">8.7164</span></span><br><span class="line"><span class="number">9.8916</span></span><br><span class="line">[torch.FloatTensor of size <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.normal(mean=<span class="number">0.0</span>, std, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>与上面函数类似，所有抽取的样本共享均值。</p><p>参数:</p><ul><li>means (Tensor,optional) – 所有分布均值</li><li>std (Tensor) – 每个元素的标准差</li><li>out (Tensor) – 可选的输出张量</li></ul><p>例子:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.normal(mean=<span class="number">0.5</span>, std=torch.arange(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line">  <span class="number">0.5723</span></span><br><span class="line">  <span class="number">0.0871</span></span><br><span class="line">-<span class="number">0.3783</span></span><br><span class="line">-<span class="number">2.5689</span></span><br><span class="line"><span class="number">10.7893</span></span><br><span class="line">[torch.FloatTensor of size <span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.normal(means, std=<span class="number">1.0</span>, out=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>与上面函数类似，所有抽取的样本共享标准差。</p><p>参数:</p><ul><li>means (Tensor) – 每个元素的均值</li><li>std (float, optional) – 所有分布的标准差</li><li>out (Tensor) – 可选的输出张量</li></ul><p>例子:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.normal(means=torch.arange(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line"> </span><br><span class="line"> <span class="number">1.1681</span></span><br><span class="line"> <span class="number">2.8884</span></span><br><span class="line"> <span class="number">3.7718</span></span><br><span class="line"> <span class="number">2.5616</span></span><br><span class="line"> <span class="number">4.2500</span></span><br><span class="line">[torch.FloatTensor of size <span class="number">5</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Pytorch】pytorch安装</title>
      <link href="/archives/41412.html"/>
      <url>/archives/41412.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装anaconda"><a href="#一、安装anaconda" class="headerlink" title="一、安装anaconda"></a>一、安装anaconda</h2><p>网址：<a href="https://www.anaconda.com/products/individual">https://www.anaconda.com/products/individual</a></p><span id="more"></span><p>网页翻到最下面，选择下载Windows 32位/64位版本，傻瓜式安装，记得勾选【Add to Path】 可以将anaconda的环境安装到系统中去</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91Pytorch%E5%AE%89%E8%A3%8501.png" alt="image-20210226184530041"></p><h2 id="二、Anaconda创建虚拟环境"><a href="#二、Anaconda创建虚拟环境" class="headerlink" title="二、Anaconda创建虚拟环境"></a>二、Anaconda创建虚拟环境</h2><p><strong>1 、</strong>从开始菜单中打开Anaconda Navigator，单机进入Environments选项卡，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8502.png" alt="image-20210226185001846"></p><p><strong>2、</strong>在Environments选项卡中，单击左下方的Create按钮，创建虚拟环境，如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20210226185132837.png" alt="image-20210226185132837"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8504.png" alt="image-20210226185258488"><code>此时在Environments选项卡中，已经出现刚刚创建的虚拟环境【注】才创建的虚拟环境只包含最基本的库</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8505.png" alt="image-20210226185650716"></p><h2 id="三、安装Pycharm-创建工程"><a href="#三、安装Pycharm-创建工程" class="headerlink" title="三、安装Pycharm,创建工程"></a>三、安装Pycharm,创建工程</h2><p>网址：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a></p><p>1、单击download进入下载页面</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8506.png" alt="image-20210226185905498"></p><p>此时，有两种版本选择，嫌麻烦就用社区版，但是功能较少，专业版需要自己找破解，或者用校园邮箱申请一年免费，一年后再次审查通过还可以继续用</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8507.png" alt="image-20210226185939074"></p><p><strong>2、打开PyCharm，单击New project</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8508.png" alt="image-20210226190033081"></p><p><strong>3、PyCharm创建Conda工程</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8509.png" alt="image-20210226190145258"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8510.png" alt="image-20210226190227936"></p><p>4、在Anaconda安装文件夹下找到envs文件夹，里面存储的都是你创建的虚拟环境，然后选择刚刚创建的虚拟环境文件下的python.exe，点击OK</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8511.png" alt="image-20210226190301076"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8512.png" alt="image-20210226190328238"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8546.png" alt="image-20210226190350296"></p><p>5、创建完成后自动进入如下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8513.png" alt="image-20210226190429918"></p><h2 id="四、CUDA安装"><a href="#四、CUDA安装" class="headerlink" title="四、CUDA安装"></a>四、CUDA安装</h2><p><strong>1、查看CUDA支持版本</strong></p><p>打开NVIDIA控制面板，按照图示顺序查看CUDA所支持的最高版本</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8514.png" alt="image-20210226200016567"></p><p><strong>2、下载CUDA</strong></p><p>打开网址：<a href="https://developer.nvidia.com/cuda-toolkit-archive，选择适合自己电脑的cuda版本，比刚才查看的所支持的CUDA">https://developer.nvidia.com/cuda-toolkit-archive，选择适合自己电脑的cuda版本，比刚才查看的所支持的CUDA</a> 版本低都行</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8515.png" alt="image-20210226233838107"></p><p>此时要根据自己的系统进行选择</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8516.png" alt="image-20210226235343901"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8517.png" alt="image-20210226235440600"></p><p><strong>3、下载cuDNN</strong></p><p>打开网址：<a href="https://developer.nvidia.com/cudnn，点击Download">https://developer.nvidia.com/cudnn，点击Download</a> cuDNN</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8518.png" alt="image-20210227000358285"></p><p>注意，cuDNN下载需要NVIDIA账户，没有则先注册，此步需要耐心，贼卡</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8519.png" alt="image-20210227000437102"></p><p>4、登陆之后，点击Download cuDNN进入的应该是如下界面，先把问卷填了，才能进入下载界面</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8520.png" alt="image-20210227000708677"></p><p>此时终于进入下载界面了，勾选I agree…，然后按照下图操作</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8521.png" alt="image-20210227000739017"></p><p>5、选择适合自己的操作系统版本下载</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8522.png" alt="image-20210227000848436"></p><p><strong>6、安装CUDA</strong></p><p>双击安装包开始安装，此时让你选择的路径并不是安装路径，而是暂时解压出来的文件所需要存放的地方，安装完成后会删除，只要保证选择空间足够大的地方即可，安装路径是默认C盘里，不能修改，此处可以不更改，点击OK即可</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8523.png" alt="image-20210227000933389"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8524.png" alt="image-20210227001012795"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8525.png" alt="image-20210227001038878"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8526.png" alt="image-20210227001105715"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8527.png" alt="image-20210227001140064"></p><p> <code>验证CUDA是否安装成功，打开cmd，输入 nvcc –V，如下返回则说明安装成功</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8528.png" alt="image-20210227001226296"></p><p>解压压缩包，压缩包内文件如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8529.png" alt="image-20210227001333119"></p><p><strong>7、安装cuDNN</strong></p><p>打开cuda安装文件夹，默认的强制安装路径为：</p><p>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\版本号</p><p>打开安装路径如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8530.png" alt="image-20210227001422354"></p><p>将解压的cuDNN压缩包内的三个文件夹复制到CUDA安装目录下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8531.png" alt="image-20210227001503720"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8532.png" alt="image-20210227001527682"></p><p>验证cuDNN是否安装完成，打开cmd，输入</p><p>   <code>cd C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.0\extras\demo_suite</code></p><p>然后执行命令：</p><p>   <code>bandwidthTest.exe</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8533.png" alt="image-20210227001624983"></p><p>然后再执行命令：</p><p> <code>deviceQuery.exe</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8534.png" alt="image-20210227001657605"></p><p><strong>8、下载PyTorch安装文件</strong></p><p>打开网址：<a href="https://download.pytorch.org/whl/torch_stable.html，界面如下：">https://download.pytorch.org/whl/torch_stable.html，界面如下：</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8535.png" alt="image-20210227001753290"></p><p>每个文件命名都是有规律的：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8536.png" alt="image-20210227001822167"></p><p>使用快捷键Ctrl+F，搜索我们需要安装的版本文件下载</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8540.png" alt="image-20210227001851897"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8539.png" alt="image-20210227001909013"></p><h2 id="五、安装pytorch"><a href="#五、安装pytorch" class="headerlink" title="五、安装pytorch"></a>五、安装pytorch</h2><p>1、打开PyCharm，进入刚刚创建的工程里，打开Terminal窗口：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8541.png" alt="image-20210227002109768"></p><p>2、在PyCharm的Terminal窗口中键入cd 命令，切换目录到PyTorch安装包所在的地址，然后分别执行pip install命令安装两个文件，先安装torch，再安装torchvision，期间会一起下载所需要的依赖包</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8542.png" alt="image-20210227002141655"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8543.png" alt="image-20210227002200869"></p><p>3、现在验证是否安装成功，在main.py里写入以下代码并运行：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8544.png" alt="image-20210227002226122"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Pytorch%E3%80%91pytorch%E5%AE%89%E8%A3%8545.png" alt="image-20210227002303019"></p><blockquote><p>以上方式针对的是windows10操作系统，大家可以根据大家各自的操作系统选择，安装cuda或者不安装cuda</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac设置redis开机启动</title>
      <link href="/archives/32806.html"/>
      <url>/archives/32806.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-创建-plist配置文件"><a href="#1-创建-plist配置文件" class="headerlink" title="1.创建.plist配置文件"></a>1.创建.plist配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /Library/LaunchDaemons/io.redis.redis-server.plist</span><br></pre></td></tr></table></figure><span id="more"></span><p>按 <code>i</code>进入编辑模式</p><p>拷贝如下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span><br><span class="line">&lt;plist version=&quot;1.0&quot;&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;Label&lt;/key&gt;</span><br><span class="line">    &lt;string&gt;io.redis.redis-server&lt;/string&gt;</span><br><span class="line">    &lt;key&gt;ProgramArguments&lt;/key&gt;</span><br><span class="line">    &lt;array&gt;</span><br><span class="line">        &lt;string&gt;/usr/local/bin/redis-server&lt;/string&gt;</span><br><span class="line">        &lt;string&gt;/usr/local/redis-5.0.5/redis.conf&lt;/string&gt;</span><br><span class="line">    &lt;/array&gt;</span><br><span class="line">    &lt;key&gt;RunAtLoad&lt;/key&gt;</span><br><span class="line">    &lt;true/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br></pre></td></tr></table></figure><p>其中<code>redis-server</code>路径与<code>redis.conf</code>路径根据实际情况修改</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">which redis-server   # 查看redis-server路径</span><br></pre></td></tr></table></figure><p> 建议使用brew安装redis，便于管理</p><p>保存并退出：<code>esc</code>+<code>:+wq</code></p><h3 id="2-使用launchctl将配置加入launchd"><a href="#2-使用launchctl将配置加入launchd" class="headerlink" title="2.使用launchctl将配置加入launchd"></a>2.使用launchctl将配置加入launchd</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo launchctl load /Library/LaunchDaemons/io.redis.redis-server.plist</span><br></pre></td></tr></table></figure><p>此时Mac开机或重启都会自动启动redis</p><h3 id="3-使用launchctl手动启动-关闭redis"><a href="#3-使用launchctl手动启动-关闭redis" class="headerlink" title="3.使用launchctl手动启动/关闭redis"></a>3.使用launchctl手动启动/关闭redis</h3><p>启动redis</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo launchctl start io.redis.redis-server</span><br></pre></td></tr></table></figure><p>关闭redis</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo launchctl stop io.redis.redis-server</span><br></pre></td></tr></table></figure><p>可对上述命令进行简化（通过设置别名的方式）<br>切换到用户目录<code>cd</code><br>编辑环境变量配置<code>vim .bash_profile</code><br>将别名设置粘贴到配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alias redisstart=&#x27;sudo launchctl start io.redis.redis-server&#x27;</span><br><span class="line">alias redisstop=&#x27;sudo launchctl stop io.redis.redis-server&#x27;</span><br></pre></td></tr></table></figure><p>退出并保存<code>esc</code> - <code>:</code> - <code>wq</code><br>最后使用source命令使别名生效<code>source .bash_profile</code>，如果提示无此文件可使用下面几种方式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br><span class="line">source ./.bash_profile</span><br></pre></td></tr></table></figure><p>参考文档：<a href="https://www.jianshu.com/p/afb1b1796cc6">https://www.jianshu.com/p/afb1b1796cc6</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 401 Unauthorized问题解决方案</title>
      <link href="/archives/5740.html"/>
      <url>/archives/5740.html</url>
      
        <content type="html"><![CDATA[<p><strong>使用浏览器访问接口，自动跳转到的页面</strong></p><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api(&quot;用户信息管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;Integer, UserEntity&gt; users = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Integer, UserEntity&gt;();</span><br><span class="line">    &#123;</span><br><span class="line">        users.put(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">UserEntity</span>(<span class="number">1</span>, <span class="string">&quot;admin&quot;</span>, <span class="string">&quot;admin123&quot;</span>, <span class="string">&quot;15888888888&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取用户列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> AjaxResult <span class="title function_">userList</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;UserEntity&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;UserEntity&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> AjaxResult.success(userList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用浏览器访问接口，自动跳转到的页面</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;timestamp&quot;</span>: <span class="string">&quot;2021-07-19T19:50:05.607+0000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">401</span>,</span><br><span class="line">    <span class="string">&quot;error&quot;</span>: <span class="string">&quot;Unauthorized&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Unauthorized&quot;</span>,</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/test/list&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用浏览器访问接口，自动跳转到的页面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot401%E9%97%AE%E9%A2%98.png" alt="image-20210720042117171"></p><p>最终找到问题所在，是导入了<code>Spring-security</code>包的问题</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们使用了Spring-security 之后，Spring Security默认对所有路径进行权限认证，并且提供默认的登陆页面。如果系统最终没有使用到Spring Security，将该依赖移除即可解决问题；如果系统确实需要使用Spring Security，那么可以自定义路径鉴权方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        httpSecurity.authorizeRequest()              </span><br><span class="line">            <span class="comment">// 直接放行</span></span><br><span class="line">            .antMatchers(<span class="string">&quot;/auth/**&quot;</span>, <span class="string">&quot;/error/**&quot;</span>, <span class="string">&quot;/dev/**&quot;</span>).permitAll()</span><br><span class="line">            <span class="comment">// 权限认证</span></span><br><span class="line">            .anyRequest().authenticated();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Spring Security默认的configure(HttpSecurity httpSecurity)实际上等同于如下配置：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    httpSecurity.authorizeRequest()</span><br><span class="line">        <span class="comment">// 对所有http请求进行权限认证</span></span><br><span class="line">        .anyRequest().authenticated().and()</span><br><span class="line">        <span class="comment">// 支持基于表单的登陆</span></span><br><span class="line">        .formLogin().and()</span><br><span class="line">        <span class="comment">// 支持基于Basic方式的认证</span></span><br><span class="line">        .httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，由于没有重载configure(AuthenticationManagerBuilder)，所有系统没有用户存储支撑认证过程，所以系统相当于没有用户，所以没有人可以认证成功。</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot搭建多模块项目</title>
      <link href="/archives/43507.html"/>
      <url>/archives/43507.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-项目结构"><a href="#一-项目结构" class="headerlink" title="一.项目结构"></a>一.项目结构</h2><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE01.png" alt="image-20210719235053608"></p><p><strong>本文所有代码源码在本章末尾给出，读者可自取。</strong></p><h2 id="二-创建过程"><a href="#二-创建过程" class="headerlink" title="二.创建过程"></a>二.创建过程</h2><p>先创建一个<code>父项目工程</code>，然后删除多余文件后，在父工程中新增<code>子模块</code></p><h3 id="1-创建父工程"><a href="#1-创建父工程" class="headerlink" title="1.创建父工程"></a>1.创建父工程</h3><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE02.png" alt="image-20210719235433951" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE03.png" alt="image-20210719235649050" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE04.png" alt="image-20210719235745691" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE05.png" alt="image-20210719235824925" style="zoom: 67%;" /></p><p>完成一个父工程的创建！！！</p><p>注意记得删除父项目中pom.xml文件中parent属性 删除如下内容</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.5</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure><h3 id="2-创建子模块"><a href="#2-创建子模块" class="headerlink" title="2.创建子模块"></a>2.创建子模块</h3><p>删除父工程中的多余信息，只保留对应的(.idea文件夹 , 和项目 pom 文件, 以及一个 *.iml 文件 )</p><p><strong>同时需要修改父工程中的打包方式为<code>pom</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE06.png" alt="image-20210720000251249" style="zoom:67%;" /></p><p>选中项目右击新建<code>module</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE07.png" alt="image-20210720015005040" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE08.png" alt="image-20210720015041964" style="zoom:67%;" /></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE09.png" alt="image-20210720015136810"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE10.png" alt="image-20210720015207020"></p><p>此时一个单独的module就创建好啦，删除一些我们不必要的文件，我们去修改当前admin  module中的<code>pom</code>文件中的<code>parent</code>标签中的内容为</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  //此时的id为父工程pom中的id</span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nuist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>   //父工程中的groupid</span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>//父工程中的version</span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新增打包方式为jar</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父项目的pom.xml中新增子module,声明子module,相关配置如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">&lt;<span class="keyword">module</span>&gt;admin&lt;/<span class="keyword">module</span>&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure><p>修改后的父pom文件如下（我新增了相关依赖包）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nuist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 依赖声明 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- SpringBoot的依赖配置--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.13.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--阿里数据库连接池 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--io常用工具类 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons.io.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--文件上传工具类 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons.fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- excel工具 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;poi.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后的 子模块的 pom 文件大致如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--此处声明父模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nuist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring-boot-devtools --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span> <span class="comment">&lt;!-- 表示依赖不会传递 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下创建其他几个相关模块，<code>common,framework,quartz,system</code>等相关模块，模块较多，仅演示一个模块的创建操作：</p><p>右击新建 common  module:</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20210720021056582.png" alt="image-20210720021056582"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE11.png" alt="image-20210720021450395"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE12.png" alt=""></p><p>之后点击确定，finish即可。此时我们的common 也新建好了。我们可以进行相关配置啦！！！</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE13.png" alt="image-20210720021707383"></p><p>下面我们依旧删除common module中对应的多余的文件 如下指出的内容，删除这些多余的文件，保留<code>common.iml</code>文件</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE14.png" alt="image-20210720021831706"></p><p>在common模块中进行相关配置，删除pom.xml中的parent,改为如下内容</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nuist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在父工程中新增，如下内容</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>之后所有的模块在创建的时候需要修改本模块的parent改为具体的父工程的配置，然后在父工程中加入该模块</strong></p><p>删除common 模块中的<code>resource</code>文件夹和<code>test</code>文件夹以及<code>CommonApplication</code>文件,因为我们整个项目仅需要一个启动类接口，即在<code>admin</code> 模块中，删除其他模块的启动类</p><p>删除framework模块中的<code>resource</code>文件夹和<code>test</code>文件夹以及<code>CommonApplication</code>文件,因为我们整个项目仅需要一个启动类接口</p><p>删除system模块中的<code>resource</code>文件夹和<code>test</code>文件夹以及<code>CommonApplication</code>文件,因为我们整个项目仅需要一个启动类接口</p><p>删除quartz模块中的<code>resource</code>文件夹和<code>test</code>文件夹以及<code>CommonApplication</code>文件,因为我们整个项目仅需要一个启动类接口.</p><p>具体新增后的目录如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE15.png" alt="image-20210720023230722"></p><p>​    如果需要在模块中引入其他模块代码，举例如在admin模块中引入其他模块，我们可以通过如下方式，引入：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入定时任务模块--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nuist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--引入公用工具类模块--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nuist<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时我们已经搭建好多模块项目，我们来写一个测试案例代码，读取数据库中的文件</p><h3 id="3-代码测试运行"><a href="#3-代码测试运行" class="headerlink" title="3.代码测试运行"></a>3.代码测试运行</h3><p>SysUser.java 实体</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuist.system.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"><span class="keyword">import</span> com.nuist.common.BaseEntity;</span><br><span class="line"><span class="keyword">import</span> com.nuist.common.annotation.Excel;</span><br><span class="line"><span class="keyword">import</span> com.nuist.common.annotation.Excels;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.ToStringBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.builder.ToStringStyle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户对象 sys_user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUser</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户ID */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;用户序号&quot;, cellType = Excel.ColumnType.NUMERIC, prompt = &quot;用户编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 部门ID */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;部门编号&quot;, type = Excel.Type.IMPORT)</span></span><br><span class="line">    <span class="keyword">private</span> Long deptId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户账号 */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;登录名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户昵称 */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;用户名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户邮箱 */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;用户邮箱&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 手机号码 */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;手机号码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phonenumber;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户性别 */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;用户性别&quot;, readConverterExp = &quot;0=男,1=女,2=未知&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户头像 */</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 密码 */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 盐加密 */</span></span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 帐号状态（0正常 1停用） */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;帐号状态&quot;, readConverterExp = &quot;0=正常,1=停用&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 删除标志（0代表存在 2代表删除） */</span></span><br><span class="line">    <span class="keyword">private</span> String delFlag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 最后登录IP */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;最后登录IP&quot;, type = Excel.Type.EXPORT)</span></span><br><span class="line">    <span class="keyword">private</span> String loginIp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 最后登录时间 */</span></span><br><span class="line">    <span class="meta">@Excel(name = &quot;最后登录时间&quot;, width = 30, dateFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;, type = Excel.Type.EXPORT)</span></span><br><span class="line">    <span class="keyword">private</span> Date loginDate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 部门对象 */</span></span><br><span class="line">    <span class="meta">@Excels(&#123;</span></span><br><span class="line"><span class="meta">        @Excel(name = &quot;部门名称&quot;, targetAttr = &quot;deptName&quot;, type = Excel.Type.EXPORT),</span></span><br><span class="line"><span class="meta">        @Excel(name = &quot;部门负责人&quot;, targetAttr = &quot;leader&quot;, type = Excel.Type.EXPORT)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="keyword">private</span> SysDept dept;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 角色对象 */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SysRole&gt; roles;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 角色组 */</span></span><br><span class="line">    <span class="keyword">private</span> Long[] roleIds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 岗位组 */</span></span><br><span class="line">    <span class="keyword">private</span> Long[] postIds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysUser</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SysUser</span><span class="params">(Long userId)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getUserId</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserId</span><span class="params">(Long userId)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAdmin</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> isAdmin(<span class="built_in">this</span>.userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAdmin</span><span class="params">(Long userId)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> userId != <span class="literal">null</span> &amp;&amp; <span class="number">1L</span> == userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getDeptId</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> deptId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDeptId</span><span class="params">(Long deptId)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.deptId = deptId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Size(min = 0, max = 30, message = &quot;用户昵称长度不能超过30个字符&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNickName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNickName</span><span class="params">(String nickName)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.nickName = nickName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户账号不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 0, max = 30, message = &quot;用户账号长度不能超过30个字符&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserName</span><span class="params">(String userName)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="meta">@Size(min = 0, max = 50, message = &quot;邮箱长度不能超过50个字符&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Size(min = 0, max = 11, message = &quot;手机号码长度不能超过11个字符&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhonenumber</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> phonenumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhonenumber</span><span class="params">(String phonenumber)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.phonenumber = phonenumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAvatar</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAvatar</span><span class="params">(String avatar)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.avatar = avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="meta">@JsonProperty</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSalt</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> salt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalt</span><span class="params">(String salt)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.salt = salt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStatus</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(String status)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDelFlag</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> delFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDelFlag</span><span class="params">(String delFlag)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.delFlag = delFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLoginIp</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> loginIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginIp</span><span class="params">(String loginIp)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.loginIp = loginIp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getLoginDate</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> loginDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginDate</span><span class="params">(Date loginDate)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.loginDate = loginDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SysDept <span class="title function_">getDept</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDept</span><span class="params">(SysDept dept)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;SysRole&gt; <span class="title function_">getRoles</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoles</span><span class="params">(List&lt;SysRole&gt; roles)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long[] getRoleIds()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> roleIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoleIds</span><span class="params">(Long[] roleIds)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.roleIds = roleIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long[] getPostIds()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> postIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPostIds</span><span class="params">(Long[] postIds)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.postIds = postIds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ToStringBuilder</span>(<span class="built_in">this</span>,ToStringStyle.MULTI_LINE_STYLE)</span><br><span class="line">            .append(<span class="string">&quot;userId&quot;</span>, getUserId())</span><br><span class="line">            .append(<span class="string">&quot;deptId&quot;</span>, getDeptId())</span><br><span class="line">            .append(<span class="string">&quot;userName&quot;</span>, getUserName())</span><br><span class="line">            .append(<span class="string">&quot;nickName&quot;</span>, getNickName())</span><br><span class="line">            .append(<span class="string">&quot;email&quot;</span>, getEmail())</span><br><span class="line">            .append(<span class="string">&quot;phonenumber&quot;</span>, getPhonenumber())</span><br><span class="line">            .append(<span class="string">&quot;sex&quot;</span>, getSex())</span><br><span class="line">            .append(<span class="string">&quot;avatar&quot;</span>, getAvatar())</span><br><span class="line">            .append(<span class="string">&quot;password&quot;</span>, getPassword())</span><br><span class="line">            .append(<span class="string">&quot;salt&quot;</span>, getSalt())</span><br><span class="line">            .append(<span class="string">&quot;status&quot;</span>, getStatus())</span><br><span class="line">            .append(<span class="string">&quot;delFlag&quot;</span>, getDelFlag())</span><br><span class="line">            .append(<span class="string">&quot;loginIp&quot;</span>, getLoginIp())</span><br><span class="line">            .append(<span class="string">&quot;loginDate&quot;</span>, getLoginDate())</span><br><span class="line">            .append(<span class="string">&quot;createBy&quot;</span>, getCreateBy())</span><br><span class="line">            .append(<span class="string">&quot;createTime&quot;</span>, getCreateTime())</span><br><span class="line">            .append(<span class="string">&quot;updateBy&quot;</span>, getUpdateBy())</span><br><span class="line">            .append(<span class="string">&quot;updateTime&quot;</span>, getUpdateTime())</span><br><span class="line">            .append(<span class="string">&quot;remark&quot;</span>, getRemark())</span><br><span class="line">            .append(<span class="string">&quot;dept&quot;</span>, getDept())</span><br><span class="line">            .toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SysUserMapper   </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuist.system.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuist.system.entity.SysUser;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户表 数据层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SysUserMapper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件分页查询用户列表</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sysUser 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息集合信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SysUser&gt; <span class="title function_">selectUserList</span><span class="params">(SysUser sysUser)</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SysUserRoleService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuist.system.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuist.system.entity.SysUser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liuhuanhuan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/7/16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 用户 业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ISysUserService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件分页查询用户列表</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息集合信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SysUser&gt; <span class="title function_">selectUserList</span><span class="params">(SysUser user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SysUserRoleServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuist.system.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuist.common.annotation.DataScope;</span><br><span class="line"><span class="keyword">import</span> com.nuist.system.entity.SysUser;</span><br><span class="line"><span class="keyword">import</span> com.nuist.system.mapper.SysUserMapper;</span><br><span class="line"><span class="keyword">import</span> com.nuist.system.service.ISysUserService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ISysUserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(SysUserServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据条件分页查询用户列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户信息集合信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DataScope(deptAlias = &quot;d&quot;, userAlias = &quot;u&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SysUser&gt; <span class="title function_">selectUserList</span><span class="params">(SysUser user)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.selectUserList(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestContoller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nuist.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.nuist.common.controller.BaseController;</span><br><span class="line"><span class="keyword">import</span> com.nuist.common.core.TableDataInfo;</span><br><span class="line"><span class="keyword">import</span> com.nuist.system.entity.SysUser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> com.nuist.system.service.ISysUserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ISysUserService sysUserService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PreAuthorize(&quot;@ss.hasPermi(&#x27;system:user:list&#x27;)&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> TableDataInfo <span class="title function_">list</span><span class="params">(SysUser user)</span></span><br><span class="line">    &#123;</span><br><span class="line">        startPage();</span><br><span class="line">        List&lt;SysUser&gt; list = sysUserService.selectUserList(user);</span><br><span class="line">        <span class="keyword">return</span> getDataTable(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/SpringBoot%E6%90%AD%E5%BB%BA%E5%A4%9A%E6%A8%A1%E5%9D%97%E9%A1%B9%E7%9B%AE16.png" alt="image-20210720040958130"></p><p>即可测试成功！！！！</p><p>源代码地址：<a href="https://gitee.com/liuhuanhuan963019/spring-boot-module-demo.git">https://gitee.com/liuhuanhuan963019/spring-boot-module-demo.git</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode快捷键</title>
      <link href="/archives/51895.html"/>
      <url>/archives/51895.html</url>
      
        <content type="html"><![CDATA[<p>ctrl + p   允许通过键入其名称导航到任何文件或符号</p><span id="more"></span><p>ctrl+shift+tab    将循环浏览最后一组打开的文件</p><p>ctrl+shift+p    将直接带到编辑器命令</p><p>ctrl+shift+0    将允许导航到文件中的特定符好</p><p>ctrl+G    将跳转到特定行</p><p>ctrl+shift+p  打开控制面板</p><p>ctrl+b 显示隐藏侧边栏</p><p>ctrl+p 浏览文件</p><p>ctrl+shift+f 查找</p><p>ctrl+w 关闭文件</p>]]></content>
      
      
      <categories>
          
          <category> VScode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mogodb安装(Windows版)</title>
      <link href="/archives/47283.html"/>
      <url>/archives/47283.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、windows安装"><a href="#一、windows安装" class="headerlink" title="一、windows安装"></a>一、windows安装</h2><h3 id="1-官网下载"><a href="#1-官网下载" class="headerlink" title="1.官网下载"></a>1.官网下载</h3><span id="more"></span><p><a href="https://www.mongodb.com/try/download/community">MongoDB </a>    默认是安装的最新的版本，我比较佛系，只是用来学习的，感觉没啥太大区别，就选择了默认的方式。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/MongoDB%E5%AE%89%E8%A3%8501.png" alt="image-20210430224731190" style="zoom:50%;" /></p><p>windows版本下载的是msi文件，默认的可视化安装界面。如下图</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/MongoDB%E5%AE%89%E8%A3%8502.png" alt="image-20210430224846514"></p><p>双击开始安装，直接下一步：选择custom自定义安装</p><p>点击ok，然后点击next 点击之后 新版的Mongodb会主动在安装目录下创建log和data文件，这相比较早期版本有了改善 ，早期需要自己手动创建 <strong>但我们仍然需要在data下创建db文件夹  笔者的在C:\MongoDB\data\db（记住一定要再建个db文件夹）</strong></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/MongoDB03.png" alt="image-20210508072843189"></p><p>在安装界面取消如下下载方式，由于墙的原因，下载时间很久不建议下载</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/MongoDB04.png" alt="img"></p><p> <strong>最后安装成功会弹出一个警告框，选中 Ignore 就好</strong></p><p>到此为止，MongoDB客户端已经安装完成。</p><p><code>最后很重要的一步</code>：</p><p> <strong>由于我们已经创建了C:\MongoDB\data\db文件夹 这里就不需要再创建 否者还要创建</strong></p><p>然后在cmd进入C:\MongoDB\bin目录下（在windows资源管理器中shift+右键打开powershell也行）然后执行mongod -dbpath C:\MongoDB\data\db 命令  如下图（这条命令是开启服务，它会一直运行。</p><p>cmd输入如下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod -dbpath C:\MongoDB\data\db</span><br></pre></td></tr></table></figure><p>结果如下图所示 （此时表示开启了mongodb服务，如果想要一直使用的话，此页面不可关闭）</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/MongoDB06.png" alt="image-20210508073324117"></p><p>新建新命令页，输入<code>mongo</code> 如下图所示，此时全部的mongoDB已全部安装完毕。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/MongoDB05.png" alt="image-20210508073546061"></p><h2 id="二、macos安装"><a href="#二、macos安装" class="headerlink" title="二、macos安装"></a>二、macos安装</h2><p>MongoDB 提供了 OSX 平台上 64 位的安装包，你可以在官网下载安装包。</p><p>下载地址：<a href="https://www.mongodb.com/download-center#community">https://www.mongodb.com/download-center#community</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%20MongoDB06.jpg" alt="img"></p><p>一般是默认下载最新版本。</p><p>接下来进入终端：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">进入 /usr/local</span></span><br><span class="line">cd /usr/local</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">下载</span></span><br><span class="line">sudo curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">解压</span></span><br><span class="line">sudo tar -zxvf mongodb-osx-ssl-x86_64-4.0.9.tgz</span><br><span class="line"><span class="meta"># </span><span class="language-bash">重命名为 mongodb 目录</span></span><br><span class="line"></span><br><span class="line">sudo mv mongodb-osx-x86_64-4.0.9/ mongodb</span><br></pre></td></tr></table></figure><p>安装完成后，我们可以把 MongoDB 的二进制命令文件目录（安装目录/bin）添加到 PATH 路径中：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH=/usr/local/mongodb/bin:$PATH</span><br></pre></td></tr></table></figure><p>创建日志及数据存放的目录：</p><ul><li><p>数据存放路径：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /usr/local/var/mongodb</span><br></pre></td></tr></table></figure></li><li><p>日志文件路径：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /usr/local/var/log/mongodb</span><br></pre></td></tr></table></figure></li></ul><p>接下来要确保当前用户对以上两个目录有读写的权限：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chown runoob /usr/local/var/mongodb</span><br><span class="line">sudo chown runoob /usr/local/var/log/mongodb</span><br></pre></td></tr></table></figure><p>以上 <strong>runoob</strong> 是我电脑上对用户，你这边需要根据你当前对用户名来修改。</p><p>接下来我们使用以下命令在后台启动 mongodb：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod --dbpath /usr/local/var/mongodb --logpath /usr/local/var/log/mongodb/mongo.log --fork</span><br></pre></td></tr></table></figure><ul><li><strong>—dbpath</strong> 设置数据存放目录</li><li><strong>—logpath</strong> 设置日志存放目录</li><li><strong>—fork</strong> 在后台运行</li></ul><p>如果不想在后端运行，而是在控制台上查看运行过程可以直接设置配置文件启动：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mongod --config /usr/local/etc/mongod.conf</span><br></pre></td></tr></table></figure><p>查看 mongod 服务是否启动：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux | grep -v grep | grep mongod</span><br></pre></td></tr></table></figure><p>使用以上命令如果看到有 mongod 的记录表示运行成功。</p><p>启动后我们可以使用 <strong>mongo</strong> 命令打开一个终端：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> cd /usr/local/mongodb/bin </span><br><span class="line"> ./mongo</span><br><span class="line"> MongoDB shell version v4.0.9</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class="line">Implicit session: session &#123; &quot;id&quot; : UUID(&quot;3c12bf4f-695c-48b2-b160-8420110ccdcf&quot;) &#125;</span><br><span class="line">MongoDB server version: 4.0.9</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h3 id="使用-brew-安装"><a href="#使用-brew-安装" class="headerlink" title="使用 brew 安装"></a>使用 brew 安装</h3><p>此外你还可以使用 OSX 的 brew 来安装 mongodb：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew tap mongodb/brew</span><br><span class="line">brew install mongodb-community@4.4</span><br></pre></td></tr></table></figure><p><strong>@</strong> 符号后面的 <strong>4.4</strong> 是最新版本号。</p><p>安装信息：</p><ul><li>配置文件：<strong>/usr/local/etc/mongod.conf</strong></li><li>日志文件路径：<strong>/usr/local/var/log/mongodb</strong></li><li>数据存放路径：<strong>/usr/local/var/mongodb</strong></li></ul><h3 id="运行-MongoDB"><a href="#运行-MongoDB" class="headerlink" title="运行 MongoDB"></a>运行 MongoDB</h3><p>我们可以使用 brew 命令或 mongod 命令来启动服务。</p><p>brew 启动:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew services start mongodb-community@4.4</span><br></pre></td></tr></table></figure><p>brew 停止：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew services stop mongodb-community@4.4</span><br></pre></td></tr></table></figure><p>mongod 命令后台进程方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --config /usr/local/etc/mongod.conf --fork</span><br></pre></td></tr></table></figure><p>这种方式启动要关闭可以进入 mongo shell 控制台来实现：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.adminCommand(&#123; &quot;shutdown&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2143.replace.favo.xrcch.com  Dns劫持解决方案</title>
      <link href="/archives/5846.html"/>
      <url>/archives/5846.html</url>
      
        <content type="html"><![CDATA[<p><strong>DNS劫持具体过程：</strong></p><span id="more"></span><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当你访问 http://[2143.replace.favo.xrcch.com](https://link.zhihu.com/?target=http%3A//2143.replace.favo.xrcch.com) 时，浏览器会自动去尝试http://[2143.replace.favo.xrcch.com](https://link.zhihu.com/?target=http%3A//2143.replace.favo.xrcch.com)/index.html这个URL。返回了一个页面，页面是空白的，并包含了一段代码，这段代码会将页面跳转到另一个地址：[http://baidu.scj.xrcch.com/th.](https://link.zhihu.com/?target=http%3A//baidu.scj.xrcch.com/th.html)</span><br><span class="line"></span><br><span class="line">这个页面也是空白的，同样包含一段代码，这段代码从如下地址中随机挑选一个，并把页面跳转过去。</span><br><span class="line"></span><br><span class="line">最后看起来的结果就是，你访问到了百度。</span><br><span class="line"></span><br><span class="line">其实tn后面的东西标记了这个请求的来源，百度会把一部分广告费分给tn后面对应的账号，因为你是被tn拉过来访问百度的。</span><br></pre></td></tr></table></figure></blockquote><p><strong>DNS劫持具体原因：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">被DNS劫持了。</span><br><span class="line"></span><br><span class="line">这样就可以通过访问一个特定的网站，给对方增加流量。他们就可以赚钱了。</span><br><span class="line"></span><br><span class="line">请检查多种浏览器是否都出现这种情况？如果是，那就说明要么您的路由器把黑了，要么就是宽带运营商动了手脚。如果只是谷歌浏览器出现这个情况，那么先考虑您的浏览器是官方的，还是别人修改过的。如果是修改过的，那么就有可能把修改者植入了相关劫持功能。</span><br><span class="line">如果是官方的，那么请关闭所有扩展工具，并一个一个测试它们，这样就知道哪个扩展工具在进行劫持操作。</span><br></pre></td></tr></table></figure></blockquote><p><strong>解决方案</strong>：</p><p><strong>方法一：</strong></p><p>1、同时按住“win+i”打开设置页面，选择“网络和Internet”；</p><p>2、在设置页面中，切换至“以太网”选项卡，并点击右侧页面的“更改适配器选项”；</p><p>3、在网络页面中，右键正在使用中的网络接口，选择“属性”；</p><p>4、在属性页面中，选择“Internet协议版本4(TCP/IPv4)”并点击“属性”；</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/dns%E5%9F%9F%E5%90%8D%E5%8A%AB%E6%8C%81.png" alt="image-20210301195143744"></p><p>5、在属性页面中，可以看到设置是自动获取IP地址，选择使用下面的IP地址，输入地址，最后点击确定即可；</p><p>首选DNS服务器：114.114.114.114；</p><p>备用 DNS 服务器：114.114.115.115点击确认</p><p>（有时需要关闭dns首选，开启自动获取）</p><p>6、这时再刷新一下DNS缓存，同时按下“Win+R”打开运行窗口，输入“cmd”；</p><p>7、在命令窗口中，输入“ipconfig /flushdns”并回车运行即可。</p><p>8、ipconfig /flushdns 即可</p><p><strong>方法二：</strong></p><p>打开<a href="http://www.xitongtiandi.net/zhuanti/48200.html">腾讯电脑管家</a>或者360管家，或者火绒安全</p><p>打开DNS选优进行检测</p><p>受到DNS攻击或威胁，选择一键修复或者还原最初DNS</p><p>以上就是全部内容，记得开启防火墙哦!!!</p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hugo搭建个人博客（Windows版）</title>
      <link href="/archives/17604.html"/>
      <url>/archives/17604.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载hugo"><a href="#一、下载hugo" class="headerlink" title="一、下载hugo"></a>一、下载hugo</h2><p><a href="https://blog.csdn.net/codingriver/article/details/107718847">Hugo官网</a><br><a href="https://github.com/gohugoio/hugo">github</a><br>下载：<a href="https://github.com/gohugoio/hugo/releases">下载Hugo</a></p><span id="more"></span><p>这里下载的是<code>hugo_0.85.0_Windows-64bit.zip</code><br>解压后就一个exe文件<br>放在文件夹<code>D:\hugo\bin</code>中，然后添加到环境变量中<br>执行 <code>hugo -version</code></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A201.png" alt="image-20210725094313962"></p><h2 id="二、创建项目"><a href="#二、创建项目" class="headerlink" title="二、创建项目"></a>二、创建项目</h2><p>进入指定目录之后，执行如下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo new site myblog</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hugo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A202.png" alt="image-20210725094639161"></p><h2 id="三、添加主题"><a href="#三、添加主题" class="headerlink" title="三、添加主题"></a>三、添加主题</h2><p><a href="https://www.gohugo.org/theme/">官网地址：</a></p><p>选择自己喜欢的背景主题进行git clone 下载</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hugo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA03.png" alt="image-20210725095146858"></p><p>在当前项目目录内打开<code>config.toml</code>配置文件，在最后添加一行<code>theme = &quot;uno&quot;</code>  名称为刚刚我们拷贝的项目名称</p><h2 id="四、运行项目"><a href="#四、运行项目" class="headerlink" title="四、运行项目"></a>四、运行项目</h2><p>在项目根目录执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo server -D</span><br></pre></td></tr></table></figure><p>运行结果如下，表示我们项目运行成功。</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A206.png" alt="image-20210725095819041"></p><p>浏览器输入<code>localhost:1313</code> ,即可看到如下内容</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A205.png" alt="image-20210725095746514"></p><h2 id="五、使用教程"><a href="#五、使用教程" class="headerlink" title="五、使用教程"></a>五、使用教程</h2><p> 使用教程<a href="https://www.flysnow.org/2018/07/29/from-hexo-to-hugo.html">https://www.flysnow.org/2018/07/29/from-hexo-to-hugo.html</a><br>        使用教程 <a href="https://blog.csdn.net/weixin_30952535/article/details/97155453">https://blog.csdn.net/weixin_30952535/article/details/97155453</a><br>        主題説明 <a href="https://github.com/JokerQyou/maupassant-hugo/blob/master/README_zh.md">https://github.com/JokerQyou/maupassant-hugo/blob/master/README_zh.md</a><br>        主題説明 <a href="https://github.com/flysnow-org/maupassant-hugo">https://github.com/flysnow-org/maupassant-hugo</a><br>        參考文章 <a href="https://blog.csdn.net/codingriver/article/details/107718847">https://blog.csdn.net/codingriver/article/details/107718847</a></p>]]></content>
      
      
      <categories>
          
          <category> Hugo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hugo搭建个人博客（Linux版）</title>
      <link href="/archives/8446.html"/>
      <url>/archives/8446.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。</p><span id="more"></span><h2 id="二、安装Hugo"><a href="#二、安装Hugo" class="headerlink" title="二、安装Hugo"></a>二、安装Hugo</h2><p>到 <a href="https://github.com/gohugoio/hugo/releases">https://github.com/gohugoio/hugo/releases</a> 查看与CPU对应的版本下载</p><p>复制如下命令安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/gohugoio/hugo/releases/download/v0.80.0/hugo_0.80.0_Linux-64bit.deb</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/image-20210724211738928.png" alt="image-20210724211738928" style="zoom:50%;" /></p><p> 进行下载，下载完后安装：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i hugo_0.80.0_Linux-64bit.deb </span><br></pre></td></tr></table></figure><p>此时使用dpkg可能提示该命令不可用，我们手动安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install dpkg</span><br></pre></td></tr></table></figure><p>出现如下即表示安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hugo(linux)01.png" alt="image-20210724212506841" style="zoom:50%;" /></p><p>然后再重新执行，安装完毕之后，我们查看下版本号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hugo(linux)02.png" alt="image-20210724212614216" style="zoom:50%;" /></p><p>出现如上即表示安装成功。</p><h2 id="三、使用Hugo生成博客"><a href="#三、使用Hugo生成博客" class="headerlink" title="三、使用Hugo生成博客"></a>三、使用Hugo生成博客</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo new site hugo</span><br></pre></td></tr></table></figure><p>后面的名称随便自己定义<code>hugo</code>为博客名称</p><h2 id="四、下载设置主题"><a href="#四、下载设置主题" class="headerlink" title="四、下载设置主题"></a>四、下载设置主题</h2><p>主题官网：<a href="https://themes.gohugo.io">https://themes.gohugo.io</a> ，找到想要的主题，点击去，复制下载命令，下载到 <code>myblog</code> 目录下的 <code>themes</code> 目录下，</p><p>例如，在 <code>themes</code> 目录下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/kakawait/hugo-tranquilpeak-theme.git</span><br></pre></td></tr></table></figure><p>然后进入到hugox项目工程主目录，启动项目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hugo server -t hugo-tranquilpeak-theme --buildDrafts</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hugo%20(linux" alt="image-20210725010544093">.png)</p><p>出现如上页面表示安装成功，此时我们可以通过域名:1313进行访问。</p>]]></content>
      
      
      <categories>
          
          <category> Hugo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hugo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue中引入echarts与百度地图组件结合</title>
      <link href="/archives/58764.html"/>
      <url>/archives/58764.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、新建一个vue工程"><a href="#一、新建一个vue工程" class="headerlink" title="一、新建一个vue工程"></a>一、新建一个vue工程</h2><p><code>提醒</code>: 先确保本地有vue相关环境,然后使用webStorm或者VSCode新建vue项目工程</p><span id="more"></span><p>创建完成后，结构大致如下：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gshnt8a9hwj30e20g4dh5.jpg" alt="image-20210715152018587" style="zoom:50%;" /></p><p><strong>然后右击命令行打开</strong>，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p>启动服务</p><p>打开命令行地址页面如下：即加载成功 （我的是自己新增的组件，大家出现vue大图标的时候，表示已经可以加载成功了）</p><p>此页面也为本文所指导内容</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gshnylhp5nj31jp0u0aur.jpg" alt="image-20210715152530621" style="zoom:50%;" /></p><p><strong>本文共享代码仓库，文末给出</strong></p><h2 id="二、引入Echarts"><a href="#二、引入Echarts" class="headerlink" title="二、引入Echarts"></a>二、引入Echarts</h2><p>找到新创建项目的<code>main.js</code>,新增如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">import * as echarts from &#x27;echarts&#x27;  //引入echarts基础库</span><br><span class="line">import &#x27;echarts-gl&#x27;;      //引入echarts地图库</span><br><span class="line"></span><br><span class="line">require(&#x27;echarts/extension/bmap/bmap&#x27;);</span><br><span class="line"></span><br><span class="line">//定义全局挂载</span><br><span class="line">Vue.prototype.$echarts = echarts</span><br></pre></td></tr></table></figure><p>引入完毕，重新执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="三、引入百度地图"><a href="#三、引入百度地图" class="headerlink" title="三、引入百度地图"></a>三、引入百度地图</h2><p>在<code>assets</code>中新增目录取名<code>js</code>,新建js文件命名为<code>map.js</code></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gsho4sazvhj30eg06c3yn.jpg" alt="image-20210715153127704" style="zoom:50%;" /></p><p>Map.js中内容如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;echarts/extension/bmap/bmap&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">loadBMap</span>(<span class="params">ak</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">BMap</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">            <span class="title function_">resolve</span>(<span class="title class_">BMap</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">onBMapCallback</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">            <span class="title function_">resolve</span>(<span class="title class_">BMap</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">        script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">      <span class="comment">// 百度地图地址</span></span><br><span class="line">        script.<span class="property">src</span> =</span><br><span class="line">            <span class="string">&#x27;http://api.map.baidu.com/api?v=2.0&amp;ak=&#x27;</span>+ ak +<span class="string">&#x27;&amp;__ec_v__=20190126&amp;callback=onBMapCallback&#x27;</span></span><br><span class="line">        script.<span class="property">onerror</span> = reject</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、新增vue初始化页面"><a href="#四、新增vue初始化页面" class="headerlink" title="四、新增vue初始化页面"></a>四、新增vue初始化页面</h2><p>新增vue文件取名<code>BinMap.vue</code></p><p>具体代码如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">// 定义显示echarts容器</span><br><span class="line">  &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  //引入百度地图js文件</span><br><span class="line">import &#123; loadBMap &#125; from &#x27;../assets/js/map.js&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;BinMap&quot;,</span><br><span class="line">  data: function ()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.$nextTick(()=&gt;&#123;</span><br><span class="line">      // 初始化地图对象</span><br><span class="line">      loadBMap(&quot;57UKDCaftQhrdfWGrGUGbRGMAgjYFnOu&quot;).then(() =&gt; &#123;</span><br><span class="line">        // 实例化对象</span><br><span class="line">        let myChart = this.$echarts.init(document.querySelector(&quot;.main&quot;));</span><br><span class="line"></span><br><span class="line">        //定义color bar</span><br><span class="line">        let COLORS = [&quot;#070093&quot;, &quot;#1c3fbf&quot;, &quot;#1482e5&quot;, &quot;#70b4eb&quot;, &quot;#b4e0f3&quot;, &quot;#ffffff&quot;];</span><br><span class="line"></span><br><span class="line">        let lngExtent = [39.5, 40.6];</span><br><span class="line">        let latExtent = [115.9, 116.8];</span><br><span class="line">        let cellCount = [50, 50];</span><br><span class="line"></span><br><span class="line">        let cellSizeCoord = [</span><br><span class="line">          (lngExtent[1] - lngExtent[0]) / cellCount[0],</span><br><span class="line">          (latExtent[1] - latExtent[0]) / cellCount[1]</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        //定义数据 由于数据过大，保存文件存储，感兴趣可以百度echarts官网查看</span><br><span class="line">        var data = []</span><br><span class="line"></span><br><span class="line">        function renderItem(params, api) &#123;</span><br><span class="line">          var lngIndex = api.value(0);</span><br><span class="line">          var latIndex = api.value(1);</span><br><span class="line">          var pointLeftTop = getCoord(params, api, lngIndex, latIndex);</span><br><span class="line">          var pointRightBottom = getCoord(params, api, lngIndex + 1, latIndex + 1);</span><br><span class="line"></span><br><span class="line">          return &#123;</span><br><span class="line">            type: &#x27;rect&#x27;,</span><br><span class="line">            shape: &#123;</span><br><span class="line">              x: pointLeftTop[0],</span><br><span class="line">              y: pointLeftTop[1],</span><br><span class="line">              width: pointRightBottom[0] - pointLeftTop[0],</span><br><span class="line">              height: pointRightBottom[1] - pointLeftTop[1]</span><br><span class="line">            &#125;,</span><br><span class="line">            style: api.style(&#123;</span><br><span class="line">              stroke: &#x27;rgba(0,0,0,0.1)&#x27;</span><br><span class="line">            &#125;),</span><br><span class="line">            styleEmphasis: api.styleEmphasis()</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        function getCoord(params, api, lngIndex, latIndex) &#123;</span><br><span class="line">          var coords = params.context.coords || (params.context.coords = []);</span><br><span class="line">          var key = lngIndex + &#x27;-&#x27; + latIndex;</span><br><span class="line"></span><br><span class="line">          // bmap returns point in integer, which makes cell width unstable.</span><br><span class="line">          // So we have to use right bottom point.</span><br><span class="line">          return coords[key] || (coords[key] = api.coord([</span><br><span class="line">            +(latExtent[0] + lngIndex * cellSizeCoord[0]).toFixed(6),</span><br><span class="line">            +(lngExtent[0] + latIndex * cellSizeCoord[1]).toFixed(6)</span><br><span class="line">          ]));</span><br><span class="line">        &#125;</span><br><span class="line">        let option = &#123;</span><br><span class="line">          tooltip: &#123;&#125;,</span><br><span class="line">          visualMap: &#123;</span><br><span class="line">            type: &#x27;piecewise&#x27;,</span><br><span class="line">            inverse: true,</span><br><span class="line">            top: 10,</span><br><span class="line">            left: 10,</span><br><span class="line">            pieces: [&#123;</span><br><span class="line">              value: 0, color: COLORS[0]</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: 1, color: COLORS[1]</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: 2, color: COLORS[2]</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: 3, color: COLORS[3]</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: 4, color: COLORS[4]</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              value: 5, color: COLORS[5]</span><br><span class="line">            &#125;],</span><br><span class="line">            borderColor: &#x27;#ccc&#x27;,</span><br><span class="line">            borderWidth: 2,</span><br><span class="line">            backgroundColor: &#x27;#eee&#x27;,</span><br><span class="line">            dimension: 2,</span><br><span class="line">            inRange: &#123;</span><br><span class="line">              color: COLORS,</span><br><span class="line">              opacity: 0.7</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          series: [</span><br><span class="line">            &#123;</span><br><span class="line">              type: &#x27;custom&#x27;,</span><br><span class="line">              coordinateSystem: &#x27;bmap&#x27;,</span><br><span class="line">              renderItem: renderItem,</span><br><span class="line">              animation: false,</span><br><span class="line">              emphasis: &#123;</span><br><span class="line">                itemStyle: &#123;</span><br><span class="line">                  color: &#x27;yellow&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              encode: &#123;</span><br><span class="line">                tooltip: 2</span><br><span class="line">              &#125;,</span><br><span class="line">              data: data</span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">          bmap: &#123;</span><br><span class="line">            center: [116.46, 39.92],</span><br><span class="line">            zoom: 11.8,</span><br><span class="line">            roam: true,</span><br><span class="line">            mapStyle: &#123;</span><br><span class="line">              styleJson: [&#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;water&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#d1d1d1&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;land&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#f3f3f3&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;railway&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;visibility&#x27;: &#x27;off&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;highway&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#999999&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;highway&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;labels&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;visibility&#x27;: &#x27;off&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;arterial&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;geometry&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#fefefe&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;arterial&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;geometry.fill&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#fefefe&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;poi&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;visibility&#x27;: &#x27;off&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;green&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;visibility&#x27;: &#x27;off&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;subway&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;visibility&#x27;: &#x27;off&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;manmade&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#d1d1d1&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;local&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#d1d1d1&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;arterial&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;labels&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;visibility&#x27;: &#x27;off&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;boundary&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#fefefe&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;building&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;all&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;#d1d1d1&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;, &#123;</span><br><span class="line">                &#x27;featureType&#x27;: &#x27;label&#x27;,</span><br><span class="line">                &#x27;elementType&#x27;: &#x27;labels.text.fill&#x27;,</span><br><span class="line">                &#x27;stylers&#x27;: &#123;</span><br><span class="line">                  &#x27;color&#x27;: &#x27;rgba(0,0,0,0)&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        myChart.setOption(option)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">  width: 1500px;</span><br><span class="line">  height: 1500px;</span><br><span class="line">  margin: 0px auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="五、百度地图授权"><a href="#五、百度地图授权" class="headerlink" title="五、百度地图授权"></a>五、百度地图授权</h2><p>1.注册并登录百度地图开放平台（<a href="http://lbsyun.baidu.com/）。">http://lbsyun.baidu.com/）。</a></p><p>2.如所示，点击【控制台】按钮。</p><p>3.点击应用管理，我的应用，创建新的引用即可</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gshoeopajsj325h0u043c.jpg" alt="image-20210715153941661" style="zoom:50%;" /></p><p>源码地址：<a href="https://gitee.com/liuhuanhuan963019/vue_echarts.git">https://gitee.com/liuhuanhuan963019/vue_echarts.git</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目部署到服务器</title>
      <link href="/archives/4434.html"/>
      <url>/archives/4434.html</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>vue项目的创建请自行百度，vue部署到服务器一般需要一些容器来安装，本文采用Nginx的方式</p><p>Nginx的具体安装方式参考：<a href="https://blog.csdn.net/qq_38140292/article/details/118915952?spm=1001.2014.3001.5501">(35条消息) 阿里云ECS服务器安装Nginx_最爱吃大米的博客-CSDN博客</a></p><span id="more"></span><h3 id="1-vue项目打包"><a href="#1-vue项目打包" class="headerlink" title="1.vue项目打包"></a>1.vue项目打包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>具体方式参照自己的package.json文件方式</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="image-20210719222918376"></p><p>等待片刻。。。。。。。</p><p>打包完成，此时会在你的项目根目录下生成一个dist文件</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/vue%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A802.png" alt="image-20210719223305051"></p><h3 id="2-上传文件到服务器"><a href="#2-上传文件到服务器" class="headerlink" title="2.上传文件到服务器"></a>2.上传文件到服务器</h3><p>使用 <code>xftp工具</code> 或者 <code>rz</code>命令进行上传</p><h3 id="3-启动项目"><a href="#3-启动项目" class="headerlink" title="3.启动项目"></a>3.启动项目</h3><p>由于项目是基于nginx部署，此时vue项目访问相关配置需要与Nginx方式相同。</p><p>重新启动Nginx,即可访问<code>xxxxx/index</code></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue】vue基础知识一（本地数据操作）</title>
      <link href="/archives/62539.html"/>
      <url>/archives/62539.html</url>
      
        <content type="html"><![CDATA[<p>javaScript  框架</p><p>简化Dom的操作</p><p>响应式数据驱动</p><span id="more"></span><p>简单的vue程序：</p><p>1.导入开发版本的vue.is</p><p>2.创建vue实例对象，设置el属性和data属性</p><p>3.使用简介的模版语法把数据渲染到页面上</p><p>vue实例可以使用双标签挂载，不能使用HTML和BODy来进行</p><p><strong>v-text .    设置标签的文本值  (覆盖标签中全部的内容el只会替换相应的值)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;message+&#x27;!&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的  &#123;&#123;Student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">message</span>:<span class="string">&quot;hello world&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title class_">Student</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">name</span>:<span class="string">&quot;二狗子&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">age</span>:<span class="number">12</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">score</span>:[<span class="number">12</span>,<span class="number">32</span>,<span class="number">4</span>,<span class="number">32</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>v-html (1.内容中有html结构会被解析成标签 2.设置元素的innerHTML)</strong></p><p>注：解析文本使用 v-text .   解析hml使用v-html</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;context&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;context&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">           context:&quot;&lt;a href=&#x27;http://www.baidu.com&#x27;&gt;我的一个小demo&lt;a&gt;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>v-on(1.为元素绑定事件，2.事件名不需要写on,3.指令可以简写@ 4.绑定的方法定义在methods属性中5.方法内部可以通过this关键字访问定义data中的数据)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;点我&quot; v-on:click=&quot;clickIt&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;点我2&quot; @click=&quot;clickIt&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;点我3&quot; @dblclick=&quot;clickIt&quot;&gt;</span><br><span class="line">    &lt;h2 @click=&quot;changeLOve&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            message:&quot;我爱你&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            clickIt:function () &#123;</span><br><span class="line">                alert(&quot;王彩云，我爱你！！！&quot;);</span><br><span class="line">            &#125;,</span><br><span class="line">            changeLOve:function () &#123;</span><br><span class="line">                this.message = &quot;永远&quot;;</span><br><span class="line">                console.log(this.message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>计数器（创建实例v-on事件和方法绑定，实时更改数据）</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;number&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">number</span>:<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">sub</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">number</span>&lt;<span class="number">0</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="string">&quot;已经是最小的啦！！&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">number</span>--;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">add</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">number</span>&gt;=<span class="number">10</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="title function_">alert</span>(<span class="string">&quot;已经是最大的啦！！&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">number</span>++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>v-show(1.根据元素的真假切换元素的显示状态 2.原理是修改元素的display实现元素的隐藏)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;切换显示&quot; @click=&quot;changeIsShow&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;年龄增加&quot; @click=&quot;addAge&quot;&gt;</span><br><span class="line">    &lt;img v-show=&quot;isShow&quot; src=&quot;IMG_6626.JPG&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;img v-show=&quot;age&gt;=25&quot; src=&quot;IMG_6626.JPG&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            isShow:false,</span><br><span class="line">            age:20</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            changeIsShow:function () &#123;</span><br><span class="line">                this.isShow = !this.isShow;</span><br><span class="line">                console.log(isShow);</span><br><span class="line">            &#125;,</span><br><span class="line">            addAge:function () &#123;</span><br><span class="line">                this.age++;</span><br><span class="line">                console.log(this.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>v-if(1.根据表达式的真假切换元素的显示状态 2.本质是操作dom 3.表达式的值是true时，元素存在于dom树中，为否是从dom树中移除)</strong></p><p><strong>注：v-show和v-if的区别：</strong></p><p><strong>v-show：只是改变了display属性的操作</strong></p><p><strong>v-if：改变的是dom数</strong></p><p><strong>实际情况 频繁切换的使用v-show</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;切换显示&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleisShow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>我爱你呀<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>我爱你呀 v-show显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;temperature&gt;40&quot;</span>&gt;</span>热死算了<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">isShow</span>:<span class="literal">false</span>,      xx  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">temperature</span>:<span class="number">39</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">toggleisShow</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>v-bind (1.为元素绑定属性 2.完整写法v-bind:属性名 3.简写的话可以只写:属性名)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;img v-bind:src=&quot;imgSrc&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;img :src=&quot;imgSrc&quot; alt=&quot;&quot; :title=&quot;imgTItle&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;img :src=&quot;imgSrc&quot; :title=&quot;imgTItle&quot; :class=&quot;isActive?&#x27;active &#x27;:&#x27;&#x27;&quot; @click=&quot;toggleActive&quot;&gt;</span><br><span class="line">    &lt;img :src=&quot;imgSrc&quot; :title=&quot;imgTItle&quot; :class=&quot;&#123;active:isActive&#125;&quot; @click=&quot;toggleActive&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            imgSrc:&quot;http://www.itheima.com/images/logo.png&quot;,</span><br><span class="line">            imgTItle:&quot;我的哈哈&quot;,</span><br><span class="line">            isActive:false</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            toggleActive:function () &#123;</span><br><span class="line">                this.isActive = !this.isActive;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>图片切换（1.用数组来存放元素 2.用v-on来绑定事件 3.用v-bing来修改元素的属性）</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;div class=&quot;center&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;arrayl[index]&quot; alt=&quot;&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;javaScript:void(0)&quot; v-show=&quot;index!=0&quot;</span><br><span class="line">           @click=&quot;prev&quot; class=&quot;left&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;左箭头.jpeg&quot;&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        &lt;a href=&quot;javaScript:void(0)&quot; v-show=&quot;index&lt;arrayl.length-1&quot;</span><br><span class="line">           @click=&quot;back&quot; class=&quot;right&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;右箭头.jpg&quot;&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el:&quot;#app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            arrayl:[</span><br><span class="line">                &quot;IMG_6626.JPG&quot;,</span><br><span class="line">                &quot;IMG_20190213_221749.jpg&quot;,</span><br><span class="line">                &quot;IMG_20190214_171354.JPG&quot;,</span><br><span class="line">                &quot;IMG_20190214_224520.jpg&quot;,</span><br><span class="line">                &quot;IMG_20190214_224523.jpg&quot;,</span><br><span class="line">                &quot;IMG_20190216_185419.jpg&quot;,</span><br><span class="line">            ],</span><br><span class="line">            index:0</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            prev:function () &#123;</span><br><span class="line">                this.index--;</span><br><span class="line">            &#125;,</span><br><span class="line">            back:function () &#123;</span><br><span class="line">                this.index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>v-for(1.根据数据生成列表 2.v-for长和)</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点我➕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;del&quot;</span>&gt;</span>点我➖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in name&quot;</span>&gt;</span>&#123;&#123;item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>    <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-for</span>=<span class="string">&quot;item2 in score&quot;</span>&gt;</span>&#123;&#123;item2&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>&lt;<span class="regexp">/div&gt;&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;&lt;script src=&quot;https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue/dist/vue.<span class="property">js</span><span class="string">&quot;&gt;&lt;/script&gt;&lt;script&gt;   var app = new Vue(&#123;     el:&quot;</span>#app<span class="string">&quot;,     data:&#123;         name:[             &quot;</span>狗子<span class="string">&quot;,             &quot;</span>傻狗<span class="string">&quot;,             &quot;</span>老婆<span class="string">&quot;,             &quot;</span>胖胖<span class="string">&quot;         ],         score:[             21,32,54,743         ]     &#125;,       methods:&#123;         add:function () &#123;            this.score.push(100);         &#125;,           del:function () &#123;                this.score.shift()           &#125;       &#125;   &#125;)&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-on (补充)（1.时间绑定的方法写成函数调用的形式，可以传入自定义参数</strong></p><p><strong>2.定义方法时定义形参数来接受传入的实参</strong></p><p><strong>3.通过.修饰符可以对事件进行限制）</strong></p><p><strong>例如：@keyup.enter</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span>&gt;    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;click me&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;doIt(1,2)&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,        <span class="attr">methods</span>:&#123;            <span class="attr">doIt</span>:<span class="keyword">function</span> (<span class="params">p1,p2</span>) &#123;                <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);                <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);            &#125;,            <span class="attr">sayHi</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;                <span class="title function_">alert</span>(<span class="string">&quot;我好想你！！！&quot;</span>);            &#125;        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>v-model(1.便捷的设置和获取表单元素的值</strong></p><p><strong>2.绑定的数据会和表单元素值相关联</strong></p><p><strong>3. 表单的 数据=绑定的数据)</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;click me&quot; @click=&quot;changeMessage&quot;&gt;    &lt;input type=&quot;text&quot; v-model=&quot;message&quot; @keyup.enter=&quot;getA&quot;&gt;    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;&lt;/div&gt;&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;&lt;script&gt;    var app = new Vue(&#123;        el:&quot;#app&quot;,        data:&#123;            message:&quot;二狗子我好想你啊&quot;        &#125;,        methods:&#123;            getA:function () &#123;                alert(this.message);            &#125;,            changeMessage:function () &#123;                this.message = &quot;我真的好想你啊&quot;            &#125;        &#125;    &#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>记事本实战演练(1.增加 2.删除 3.隐藏 4.清空 )</strong></p><p><strong>注：shift()函数删除的是数组中的第一个元素 使用splice删除指定的某个元素</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!--主题区域--&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>    <span class="comment">&lt;!--输入框--&gt;</span>    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢欢笔记本<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">autofocus</span>=<span class="string">&quot;autofocus&quot;</span>               <span class="attr">placeholder</span>=<span class="string">&quot;请输入&quot;</span> <span class="attr">class</span>=<span class="string">&quot;new-todo&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span>               @<span class="attr">keyup.enter</span>=<span class="string">&quot;add&quot;</span>&gt;</span>        <span class="comment">&lt;!--列表区域--&gt;</span>        <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;list.length!=0&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span>                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;.<span class="tag">&lt;/<span class="name">span</span>&gt;</span>                    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span>                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;destroy&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;del(index)&quot;</span>&gt;</span>del<span class="tag">&lt;/<span class="name">button</span>&gt;</span>                <span class="tag">&lt;/<span class="name">li</span>&gt;</span>            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>        <span class="tag">&lt;/<span class="name">section</span>&gt;</span>        <span class="comment">&lt;!--统计和清空--&gt;</span>        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;list.length!=0&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;todo-count&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;list.length!=0&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;list.length&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>items left             <span class="tag">&lt;/<span class="name">span</span>&gt;</span>            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;clear-completed&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span>        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>    <span class="tag">&lt;/<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span><span class="comment">&lt;!--底部文件--&gt;</span><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,        <span class="attr">data</span>:&#123;            <span class="attr">list</span>:[<span class="string">&quot;语文&quot;</span>,<span class="string">&quot;高数&quot;</span>,<span class="string">&quot;政治&quot;</span>,<span class="string">&quot;外语&quot;</span>],            <span class="attr">inputValue</span>:<span class="string">&quot;你是我的人了&quot;</span>        &#125;,        <span class="attr">methods</span>:&#123;            <span class="attr">add</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;                <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">inputValue</span>);            &#125;,            <span class="attr">del</span>:<span class="keyword">function</span> (<span class="params">index</span>) &#123;                <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">splice</span>(index,<span class="number">1</span>);            &#125;,            <span class="attr">clear</span>:<span class="keyword">function</span> (<span class="params"></span>) &#123;                <span class="variable language_">this</span>.<span class="property">list</span>=[];            &#125;        &#125;    &#125;)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Vue】vue基础知识二（网络数据操作）</title>
      <link href="/archives/29850.html"/>
      <url>/archives/29850.html</url>
      
        <content type="html"><![CDATA[<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a><strong>axios</strong></h3><p><strong>(1.先导入后使用 2.使用get和post即可发送相应的请求</strong></p><p><strong>3.then方法中的回调函数会在请求成功和失败时触发</strong></p><p><strong>4.通过回调函数的形参可以获取响音内容或错误信息)</strong></p><span id="more"></span><p><strong>功能强大的网络请求库</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Script</span> src=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">axios.<span class="title function_">get</span>(地址).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>)&#123;&#125;,<span class="keyword">function</span>(<span class="params">err</span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="axios文档地址："><a href="#axios文档地址：" class="headerlink" title="axios文档地址："></a><strong>axios文档地址：</strong></h3><p><strong><a href="https://github.com/axios/axios">https://github.com/axios/axios</a></strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;get请求&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;post请求&quot;</span> <span class="attr">class</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--在线axios地址--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--    &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.1.0/axios.amd.min.js&quot;&gt;&lt;/script&gt;--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios@0.20.0/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/**</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         * 接口1：随机笑话</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         * 请求地址：https://autumnfish.cn/comment/music?id=186016</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         * 请求方法：get</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         * 请求参数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">         * 相应内容评论</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        * */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.get&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// axios.get(&quot;https://autumnfish.cn/comment/music?id=186016&amp;limit=1&quot;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">             axios.<span class="title function_">get</span>(<span class="string">&quot;https://autumnfish.cn/api/joke/list?num=3&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        * 接口2：用户注册</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        * 请求地址：https://autumnfish.cn/api/user/reg</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        * 请求方法：post</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        * 请求参数：user(用户名，密码)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        * 相应内容（注册成功和失败）</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        * */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.post&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            axios.<span class="title function_">post</span>(<span class="string">&quot;https://autumnfish.cn/api/user/reg&quot;</span>,&#123;<span class="attr">username</span>:<span class="string">&quot;刘欢欢&quot;</span>&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="axios-vue（）"><a href="#axios-vue（）" class="headerlink" title="axios+vue（）"></a>axios+vue（）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">        &lt;!--播放器主题部分--&gt;</span><br><span class="line">        &lt;div class=&quot;play_wrap&quot; id=&quot;app&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;search_bar&quot;&gt;</span><br><span class="line">                &lt;!--搜索歌曲--&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; autocomplete=&quot;off&quot; v-model=&quot;query&quot; placeholder=&quot;请输入歌曲&quot;</span><br><span class="line">                @keyup.enter=&quot;getMusic&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;center_on&quot;&gt;</span><br><span class="line">                &lt;!--搜索歌曲列表--&gt;</span><br><span class="line">                &lt;div class=&quot;song_wrapper&quot;&gt;</span><br><span class="line">                    &lt;ul class=&quot;song_list&quot;&gt;</span><br><span class="line">                        &lt;li v-for=&quot;item in music&quot;&gt;</span><br><span class="line">                            &lt;input type=&quot;button&quot; value=&quot;播放&quot; @click=&quot;playMusic(item.id)&quot;&gt;</span><br><span class="line">                            &lt;b&gt;&#123;&#123;item.name&#125;&#125;&lt;/b&gt;</span><br><span class="line">                            &lt;span v-if=&quot;item.mvid!=0 &quot;&gt;</span><br><span class="line">                                &lt;button @click=&quot;playMv(item.mvid)&quot;&gt;mv&lt;/button&gt;</span><br><span class="line">                            &lt;/span&gt;</span><br><span class="line">                        &lt;/li&gt;</span><br><span class="line">                    &lt;/ul&gt;</span><br><span class="line">&lt;!--                    &lt;button class=&quot;switch_btn&quot;&gt;播放&lt;/button&gt;--&gt;</span><br><span class="line">&lt;!--                    &lt;img src=&quot;./7665665492ce4861d66c4b7df2491779.jpeg&quot; class=&quot;switch_btn&quot; alt=&quot;&quot;&gt;--&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;!--歌曲信息容器--&gt;</span><br><span class="line">                &lt;div class=&quot;player_con&quot; :class=&quot;&#123;playing:isplaying&#125;&quot;&gt;</span><br><span class="line">&lt;!--                    &lt;img src=&quot;./7665665492ce4861d66c4b7df2491779.jpeg&quot; class=&quot;play_bar&quot;&gt;--&gt;</span><br><span class="line">                    &lt;!--黑胶图片--&gt;</span><br><span class="line">&lt;!--                    &lt;img src=&quot;./7665665492ce4861d66c4b7df2491779.jpeg&quot; class=&quot;play_bar&quot;&gt;--&gt;</span><br><span class="line">                    &lt;img :src=&quot;musicCover&quot; class=&quot;cover_autoRotate&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;!--歌曲评论容器--&gt;</span><br><span class="line">                &lt;div class=&quot;comment_wrapper&quot;&gt;</span><br><span class="line">                    &lt;h5 class=&quot;title&quot;&gt;热门留言&lt;/h5&gt;</span><br><span class="line">                    &lt;div class=&quot;comment_list&quot;&gt;</span><br><span class="line">                        &lt;dl v-for=&quot;item in hotComment&quot;&gt;</span><br><span class="line">                            &lt;dt&gt;&lt;img :src=&quot;item.user.avatarUrl&quot; alt=&quot;&quot;&gt;&lt;/dt&gt;</span><br><span class="line">                            &lt;dd class=&quot;name&quot;&gt;&#123;&#123;item.nickname&#125;&#125;&lt;/dd&gt;</span><br><span class="line">                            &lt;dd class=&quot;detail&quot;&gt;&#123;&#123;item.content &#125;&#125;&lt;/dd&gt;</span><br><span class="line">                        &lt;/dl&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;audio_con&quot;&gt;</span><br><span class="line">                &lt;!--v-bind绑定元素：--&gt;</span><br><span class="line">                &lt;audio ref=&quot;audio&quot; @play=&quot;play&quot; @pause=&quot;pause &quot; :src=&quot;musicUrl&quot;  controls autoplay loop class=&quot;myaudio&quot;&gt;&lt;/audio&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;video_con&quot; v-show=&quot;isShow&quot; style=&quot;display: none;&quot;&gt;</span><br><span class="line">                &lt;video :src=&quot;mvUrl&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</span><br><span class="line">                &lt;div class=&quot;mask&quot; @click=&quot;hide&quot;&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--在线axios地址--&gt;</span><br><span class="line">    &lt;!--&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.1.0/axios.amd.min.js&quot;&gt;&lt;/script&gt;--&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/axios@0.20.0/dist/axios.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        /*</span><br><span class="line">        * 请求地址：https://autumnfish.cn/search</span><br><span class="line">        * 请求方式：get</span><br><span class="line">        * 请求参数：keywords</span><br><span class="line">        * 返回参数：歌曲名称搜索</span><br><span class="line">        * */</span><br><span class="line">        var app = new Vue(&#123;</span><br><span class="line">            el:&quot;#app&quot;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                query:&quot;&quot;,</span><br><span class="line">                music:[],</span><br><span class="line">                musicUrl:&quot;&quot;,</span><br><span class="line">                musicCover:&quot;&quot;,</span><br><span class="line">                hotComment:[],</span><br><span class="line">                isplaying:false,</span><br><span class="line">                isShow:false,   //遮罩层显示与否</span><br><span class="line">                mvUrl:&quot;&quot;  //mv地址</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                &lt;!--获取music--&gt;</span><br><span class="line">                getMusic:function () &#123;</span><br><span class="line">                    var that = this;</span><br><span class="line">                    axios.get(&quot;https://autumnfish.cn/search?keywords=&quot;+this.query)</span><br><span class="line">                    .then(function (response) &#123;</span><br><span class="line">                        that.music = response.data.result.songs;</span><br><span class="line">                    &#125;,function (error) &#123;&#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                &lt;!--播放音乐--&gt;</span><br><span class="line">                playMusic:function (id) &#123;</span><br><span class="line">                    var that = this;</span><br><span class="line">                    //获取歌曲地址</span><br><span class="line">                    axios.get(&quot;https://autumnfish.cn/song/url?id=&quot;+id)</span><br><span class="line">                    .then(function (response) &#123;</span><br><span class="line">                        // console.log(response);</span><br><span class="line">                       that.musicUrl = response.data.data[0].url;</span><br><span class="line">                    &#125;,function (error) &#123;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    //歌曲详情获取</span><br><span class="line">                    axios.get(&quot;https://autumnfish.cn/song/detail?ids=&quot;+id)</span><br><span class="line">                    .then(function (response) &#123;</span><br><span class="line">                        that.musicCover = response.data.songs[0].al.picUrl;</span><br><span class="line">                    &#125;,function (error) &#123;&#125;)</span><br><span class="line">                    //歌曲评论获取</span><br><span class="line">                    axios.get(&quot;https://autumnfish.cn/comment/hot?type=0&amp;id=&quot;+id)</span><br><span class="line">                        .then(function (response) &#123;</span><br><span class="line">                            that.hotComment = response.data.hotComments;</span><br><span class="line">                        &#125;,function (error) &#123;&#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                play:function () &#123;</span><br><span class="line">                    this.isplaying=true;</span><br><span class="line">                &#125;,</span><br><span class="line">                pause:function () &#123;</span><br><span class="line">                    this.isplaying=false;</span><br><span class="line">                &#125;,</span><br><span class="line">                &lt;!--播放mv--&gt;</span><br><span class="line">                playMv:function (id) &#123;</span><br><span class="line">                    var that = this;</span><br><span class="line">                    axios.get(&quot;https://autumnfish.cn/mv/url?id=&quot;+id)</span><br><span class="line">                    .then(function (response) &#123;</span><br><span class="line">                        console.log(response);</span><br><span class="line">                        that.isShow = true;</span><br><span class="line">                        that.mvUrl = response.data.data.url;</span><br><span class="line">                    &#125;,function (error) &#123;&#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                hide:function () &#123;</span><br><span class="line">                    this.isShow=false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【设计模式浅谈一】生产者 消费者模式</title>
      <link href="/archives/45724.html"/>
      <url>/archives/45724.html</url>
      
        <content type="html"><![CDATA[<p>本文全部代码实现，如下：</p><span id="more"></span><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> day190109;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class 生产消费者ThreadDemo10 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//生产消费者模式</span></span><br><span class="line">        Queue&lt;Phone&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Phone&gt;();</span><br><span class="line">        <span class="type">Producer</span> <span class="variable">producer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Producer</span>(queue,<span class="number">30</span>);</span><br><span class="line">        <span class="type">Consumers</span> <span class="variable">consumers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumers</span>(queue,<span class="string">&quot;李江萍&quot;</span>);</span><br><span class="line">        <span class="type">Consumers</span> <span class="variable">consumers1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Consumers</span>(queue,<span class="string">&quot;熊天明&quot;</span>);</span><br><span class="line"></span><br><span class="line">        producer.start();</span><br><span class="line">        consumers.start();</span><br><span class="line">        consumers1.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Queue&lt;Phone&gt; queue;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> max;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Queue&lt;Phone&gt; queue, <span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="keyword">synchronized</span> (queue) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (queue.size() == max) &#123; <span class="comment">//如果生产的商品满啦</span></span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       System.out.println(<span class="string">&quot;你好！本地库存产品已满！请通知消费之前来消费&quot;</span>);</span><br><span class="line">                       queue.wait();<span class="comment">//先不忙生产，让消费者先消费</span></span><br><span class="line">                   &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                       e.printStackTrace();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                   <span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(r.nextInt(<span class="number">7</span>), (<span class="type">double</span>) r.nextInt(<span class="number">2000</span>));</span><br><span class="line">                   System.out.println(<span class="string">&quot;甲方已经生产了1个手机：&quot;</span> + p);</span><br><span class="line">                   queue.offer(p);</span><br><span class="line">                   System.out.println(<span class="string">&quot;      生产后现在的库存是：&quot;</span> + queue.size()+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">                   queue.notifyAll();<span class="comment">//通知消费者。可以消费啦</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumers</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Queue&lt;Phone&gt; queue;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumers</span><span class="params">(Queue&lt;Phone&gt; queue, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (queue) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (queue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;说：“你们本地库存产品严重不足”&quot;</span>);</span><br><span class="line">                        queue.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                    System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;说：我要买1个手机：&quot;</span> + p);</span><br><span class="line">                    System.out.println(<span class="string">&quot;      消费后现在的库存是：&quot;</span> + queue.size()+<span class="string">&quot;个&quot;</span>);</span><br><span class="line">                    queue.notifyAll();<span class="comment">//通知生产者可以生产了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  Integer size;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(Integer size, Double price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;手机规格是&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;尺寸是:&quot;</span> + size +</span><br><span class="line">                <span class="string">&quot;, 价格是:&quot;</span> + price +<span class="string">&quot;元&quot;</span>+</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-六-添加百度统计和Google统计</title>
      <link href="/archives/18884.html"/>
      <url>/archives/18884.html</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><p>百度统计和Google统计主要用于分析网站数据：流量、访客量等。</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91hexo-yilia%E6%96%B0%E5%A2%9E%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%92%8C%E8%B0%B7%E6%AD%8C%E7%BB%9F%E8%AE%A1.png" alt="image-20210306125157943"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91hexo+yilia%E6%96%B0%E5%A2%9E%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%92%8C%E8%B0%B7%E6%AD%8C%E7%BB%9F%E8%AE%A102.png" alt="image-20210306125319828"></p><p>需要注册账号，将相应的提示代码加入到博客代码中去</p><ul><li>百度统计网址：<a href="https://tongji.baidu.com/">https://tongji.baidu.com</a></li><li>Google统计网址：<a href="https://analytics.google.com/analytics/web/">https://analytics.google.com/analytics/web/</a></li></ul><h3 id="文件地址"><a href="#文件地址" class="headerlink" title="文件地址"></a><strong>文件地址</strong></h3><p>yilia主题已集成，位置如下，我们只需要在主题的配置文件中进行配置即可。</p><ul><li><code>F:\IdeaProjects\hexo\themes\yilia\layout\_partial\baidu-analytics.ejs</code></li><li><code>F:\IdeaProjects\hexo\themes\yilia\layout\_partial\google-analytics.ejs</code></li></ul><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a><strong>配置</strong></h3><p><code>themes\yilia\_config.yml</code>原内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">baidu_analytics: &#x27;&#x27;</span><br><span class="line">google_analytics: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>括号中填写配置对应的id即可</p><h4 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h4><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91hexo+yilia%E6%96%B0%E5%A2%9E%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%92%8C%E8%B0%B7%E6%AD%8C%E7%BB%9F%E8%AE%A103.png" alt="image-20210306130119050"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91hexo+yilia%E6%96%B0%E5%A2%9E%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%92%8C%E8%B0%B7%E6%AD%8C%E7%BB%9F%E8%AE%A104.png" alt="image-20210306130204927"></p><p>找到对应的配置文件：</p><p><code>F:\IdeaProjects\hexo\themes\yilia\layout\_partial\baidu-analytics.ejs</code></p><p>修改里面的代码为：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&lt;% if (theme.baidu_a)&#123; %&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var _hmt = _hmt || [];</span><br><span class="line">(function() &#123;</span><br><span class="line">  var hm = document.createElement(&quot;script&quot;);</span><br><span class="line">  hm.src = &quot;https://hm.baidu.com/hm.js?此处填写id&quot;;</span><br><span class="line">  var s = document.getElementsByTagName(&quot;script&quot;)[0]; </span><br><span class="line">  s.parentNode.insertBefore(hm, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h4><p><strong>生成代码</strong>：控制台–&gt;（左下角）管理–&gt;管理–&gt;（中间）媒体资源–&gt;（中间）跟踪信息–&gt;跟踪代码</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91hexo+yilia%E6%96%B0%E5%A2%9E%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%92%8C%E8%B0%B7%E6%AD%8C%E7%BB%9F%E8%AE%A106.png" alt="image-20210306130559427"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91hexo+yilia%E6%96%B0%E5%A2%9E%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%92%8C%E8%B0%B7%E6%AD%8C%E7%BB%9F%E8%AE%A107.png" alt="image-20210306130710805"></p><p><code>找到代码，此操作方式与百度的方式相同，不再赘述。</code></p><h4 id="配置id"><a href="#配置id" class="headerlink" title="配置id"></a>配置id</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">baidu_analytics: &#x27;百度统计id&#x27;</span><br><span class="line">google_analytics: &#x27;Google统计id&#x27;</span><br></pre></td></tr></table></figure><p>Google虽然好，但是因为墙的原因，所以有时候可能会出现问题。所以建议还是使用百度账号的使用方式。</p><p>最终效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91hexo+yilia%E6%96%B0%E5%A2%9E%E7%99%BE%E5%BA%A6%E7%BB%9F%E8%AE%A1%E5%92%8C%E8%B0%B7%E6%AD%8C%E7%BB%9F%E8%AE%A108.png" alt="image-20210306131030163"></p><p>欢迎访问我的博客:www.novoice.top</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-五-阿里云域名解析</title>
      <link href="/archives/14014.html"/>
      <url>/archives/14014.html</url>
      
        <content type="html"><![CDATA[<p>hexo 搭建博客的时候，通常我们需要部署到远程服务器中，如果自己没有服务器的话，我们会选择将搭建好的项目，上传到github中，然后用过用户名.github.io来进行访问，今天本文来介绍另外一种方式，通过绑定域名的方式来查看。</p><span id="more"></span><h4 id="一、域名创建"><a href="#一、域名创建" class="headerlink" title="一、域名创建"></a>一、域名创建</h4><p>首先我们需要拥有一个字的域名，可以到阿里云<a href="https://wanwang.aliyun.com/?spm=5176.10695662.1158081.1.12334234jIVGyD">域名</a>去购买，现在的域名的价格相对来说比较便宜，com的会稍微贵点，top的相对来说会比较便宜点。阿里云的域名现在需要进行备案后才可以正常使用，需要至少3个月以上的阿里云服务器实例，这个方式现在来说还是比较坑的。</p><h4 id="二、域名解析"><a href="#二、域名解析" class="headerlink" title="二、域名解析"></a>二、域名解析</h4><p>登录<a href="https://homenew.console.aliyun.com/home/dashboard/ProductAndService">阿里云控制台</a></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%BA%9401.png" alt="【hexo】阿里云域名解析01"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%BA%9402.png" alt="【hexo】阿里云域名解析02"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%BA%9403.png" alt="【hexo】阿里云域名解析03"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%BA%9404.png" alt="【hexo】阿里云域名解析04"></p><p>按照如下方式，即可完成域名的解析，此过程可能存在10分钟左右的延迟。</p><h4 id="三、hexo文件新增"><a href="#三、hexo文件新增" class="headerlink" title="三、hexo文件新增"></a>三、hexo文件新增</h4><p>在配置完域名解析之后，仍然无法访问我们的博客，此时，我们可以在hexo根目录下创建一个文件，名为CNAME，然后再文件中新增域名名称，方式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E4%BA%9405.png" alt="【hexo】阿里云域名解析05"></p><p>在github中按照如下方式创建一个文件，在文件中填写好解析的域名地址，即阿里云中申请的域名地址。配置完，稍等片刻，即可通过解析后的域名访问自己的博客啦。</p><p>欢迎来到我的博客：<a href="novoice.top">novoice.top</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-四-新增RSS订阅</title>
      <link href="/archives/44375.html"/>
      <url>/archives/44375.html</url>
      
        <content type="html"><![CDATA[<p>使用<strong>hexo-generator-feed</strong>插件生成RSS文件<code>atom.xml</code>，实现RSS订阅功能。</p><p>插件github网址：<a href="https://github.com/hexojs/hexo-generator-feed。">https://github.com/hexojs/hexo-generator-feed。</a></p><span id="more"></span><p>参考文章：<a href="https://www.jianshu.com/p/2aaac7a19736，https://wxnacy.com/2018/12/12/hexo-add-rss/。">https://www.jianshu.com/p/2aaac7a19736，https://wxnacy.com/2018/12/12/hexo-add-rss/。</a></p><h3 id="1、首先添加插件，在hexo根目录下执行"><a href="#1、首先添加插件，在hexo根目录下执行" class="headerlink" title="1、首先添加插件，在hexo根目录下执行"></a>1、<strong>首先添加插件，在hexo根目录下执行</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><h3 id="2、配置-config-yml文件，启用插件"><a href="#2、配置-config-yml文件，启用插件" class="headerlink" title="2、配置_config.yml文件，启用插件"></a><strong>2、配置<code>_config.yml</code>文件，启用插件</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">Extensions</span></span><br><span class="line">plugins:</span><br><span class="line">  hexo-generator-feed</span><br><span class="line"><span class="meta">#</span><span class="language-bash">Feed Atom</span></span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br></pre></td></tr></table></figure><h3 id="3、在yilia主题添加RSS订阅配置"><a href="#3、在yilia主题添加RSS订阅配置" class="headerlink" title="3、在yilia主题添加RSS订阅配置"></a><strong>3、在yilia主题添加RSS订阅配置</strong></h3><p>（1）hexo 根目录下_config.yml中新增</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">Extensions</span></span><br><span class="line">plugins:</span><br><span class="line">  hexo-generator-feed</span><br></pre></td></tr></table></figure><p>  (2) hexo 主题目录_config.yml 中新增</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">RSS订阅</span></span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h3 id="4、生成RSS订阅文件"><a href="#4、生成RSS订阅文件" class="headerlink" title="4、生成RSS订阅文件"></a><strong>4、生成RSS订阅文件</strong></h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E5%9B%9B-%E6%96%B0%E5%A2%9ERSS%E8%AE%A2%E9%98%8501.png" alt="【hexo】基础教程-四-新增RSS订阅01"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-三-添加网易云音乐</title>
      <link href="/archives/35091.html"/>
      <url>/archives/35091.html</url>
      
        <content type="html"><![CDATA[<h4 id="1、打开网易云音乐首页，复制选择的背景音乐分享外链"><a href="#1、打开网易云音乐首页，复制选择的背景音乐分享外链" class="headerlink" title="1、打开网易云音乐首页，复制选择的背景音乐分享外链"></a>1、打开网易云音乐首页，复制选择的背景音乐分享外链</h4><p><a href="https://music.163.com/">网易云音乐</a></p><span id="more"></span><p><code>但是有些尴尬的就是，我们目前只能添加一些没设置版权的音乐，有些收费或无版权的音乐是无法添加收听的。</code></p><h4 id="2、搜索任意歌曲后进入详情页面：如下图"><a href="#2、搜索任意歌曲后进入详情页面：如下图" class="headerlink" title="2、搜索任意歌曲后进入详情页面：如下图"></a>2、搜索任意歌曲后进入详情页面：如下图</h4><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B8%89-%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%9001.jpg" alt="【hexo】基础教程-三-添加网易云音乐01"></p><h4 id="3、在详情页面点击生成外链播放器就会见到如下页面："><a href="#3、在详情页面点击生成外链播放器就会见到如下页面：" class="headerlink" title="3、在详情页面点击生成外链播放器就会见到如下页面："></a>3、在详情页面点击生成<a href="https://music.163.com/#/outchain/2/139774/">外链播放器</a>就会见到如下页面：</h4><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B8%89-%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%9002.jpg" alt="【hexo】基础教程-三-添加网易云音乐02"></p><p>可设置音乐播放样式大小（一般设置为默认） </p><p>勾选设置音乐自动播放</p><h4 id="4、复制外链播放器的代码"><a href="#4、复制外链播放器的代码" class="headerlink" title="4、复制外链播放器的代码"></a>4、复制外链播放器的代码</h4><p>在<code>themes/yilia/layout/_partial/left-col.ejs</code>文件<code>nav</code>标签中添加如下代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;iframe frameborder=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> marginwidth=<span class="string">&quot;0&quot;</span> marginheight=<span class="string">&quot;0&quot;</span> width=<span class="number">330</span> height=<span class="number">86</span> src=<span class="string">&quot;//music.163.com/outchain/player?type=2&amp;id=139774&amp;auto=1&amp;height=66&quot;</span>&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>本文修改了一些代码，用于新增一些样式和文字效果</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B8%89-%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%9003.jpg" alt="【hexo】基础教程-三-添加网易云音乐03"></p><h4 id="5、在yilia主题配置文件中添加属性"><a href="#5、在yilia主题配置文件中添加属性" class="headerlink" title="5、在yilia主题配置文件中添加属性"></a>5、在yilia主题配置文件中添加属性</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">网易云音乐插件</span></span><br><span class="line">music:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  # </span><span class="language-bash">播放器尺寸类型(1：长尺寸、2：短尺寸)</span></span><br><span class="line">  type: 1</span><br><span class="line">  id: 139774  # 网易云分享的音乐ID(更换音乐请更改此配置项)</span><br><span class="line">  autoPlay: true  # 是否开启自动播放</span><br><span class="line"><span class="meta">  # </span><span class="language-bash">提示文本(关闭请设置为<span class="literal">false</span>)</span></span><br><span class="line">  text: &#x27;这似乎是首纯音乐，请尽情的欣赏它吧！&#x27;</span><br></pre></td></tr></table></figure><p>效果如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%B8%89-%E6%B7%BB%E5%8A%A0%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%9004.jpg" alt="【hexo】基础教程-三-添加网易云音乐04"></p><p>欢迎访问我的博客：www.novoice.top</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-二-文章新增图片上传</title>
      <link href="/archives/3609.html"/>
      <url>/archives/3609.html</url>
      
        <content type="html"><![CDATA[<p>在博客中插入视频和图片能让人通俗易懂，生动形象。下面我们简答用两种方式介绍下hexo 博客文章中新增图片</p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><strong><em>方法一：</em></strong></h4><p><strong>hexo 添加图片插件：</strong></p><span id="more"></span><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>也可下载官方链接地址：<a href="https://github.com/cnzsb/hexo-asset.git">hexo-asset</a></p><p>此时的下载或不下载取决于自己的<a href="https://hexo.io/themes/">theme</a>主题中所包含的默认的插件是否存在。可以在不安装此插件的前提下执行如下步骤。若不行，在安装此插件后执行如下步骤：</p><p>在hexo主文件夹中<code>_config.yml</code>配置文件中，修改为 <code>post_asset_folder: true</code>， 然后新建一篇文章</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;test&quot;</span><br></pre></td></tr></table></figure><p>这个时候会出现一个<code>test.md</code> 和 <code>test</code>的文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E4%BA%8C-%E6%96%87%E7%AB%A0%E6%96%B0%E5%A2%9E%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A001.jpg" alt="【hexo】基础教程-二-文章新增图片上传01"></p><p>将图片资源放在<code>test</code>中，文章就可以使用相对路径引用图片资源了。格式如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p><strong>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。</strong></p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><p>重新编译后 再启动服务即可。</p><p>效果可查看如下链接：<a href="https://blog.csdn.net/qq_38140292/article/details/118885686?spm=1001.2014.3001.5501">https://blog.csdn.net/qq_38140292/article/details/118885686?spm=1001.2014.3001.5501</a></p><h4 id="方法二：使用cdn来存储图片"><a href="#方法二：使用cdn来存储图片" class="headerlink" title="方法二：使用cdn来存储图片"></a><strong><em>方法二：使用cdn来存储图片</em></strong></h4><p>使用typora编辑md文档，除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。例如在typora中配置图片上传到配置好的github图床中，会生成对应的url地址，将地址直接拿来引用即可。具体配置方案，请参考：<a href="https://blog.csdn.net/qq_38140292/article/details/118885686?spm=1001.2014.3001.5501">https://blog.csdn.net/qq_38140292/article/details/118885686?spm=1001.2014.3001.5501</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】基础教程-一-撰写文章</title>
      <link href="/archives/8613.html"/>
      <url>/archives/8613.html</url>
      
        <content type="html"><![CDATA[<p>在搭建好属于自己的博客网站之后，我们可以尝试着在网站上编写我们的第一篇文章。</p><p><a href="https://hexo.io/zh-cn/docs/writing">hexo官方地址</a></p><span id="more"></span><h2 id="一、创建文章"><a href="#一、创建文章" class="headerlink" title="一、创建文章"></a>一、创建文章</h2><p>打开建立的hexo文件，<code>windows</code>右击git bash，<code>macos/linux</code>终端进入文件位置。输入如下：其中<code>title</code>为文章的标题。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;title&quot;</span><br></pre></td></tr></table></figure><p>输入后，hexo会根据目录下<code>scaffolds/post.md</code>，在<code>source/_posts</code> 文件夹下创建一个文件，名为:<code>title.md</code></p><h2 id="二、撰写文章"><a href="#二、撰写文章" class="headerlink" title="二、撰写文章"></a>二、撰写文章</h2><p>Markdown 文档格式与书写方式，可参考：<a href="/archives/13249.html" title="Markdown-语法">Markdown-语法</a></p><h2 id="三、高级设置"><a href="#三、高级设置" class="headerlink" title="三、高级设置"></a>三、高级设置</h2><p><a href="https://hexo.io/zh-cn/docs/front-matter">官方地址：</a></p><h4 id="（1）模板设置"><a href="#（1）模板设置" class="headerlink" title="（1）模板设置"></a>（1）模板设置</h4><p>当我们使用命令 <code>hexo new &quot;title&quot;</code> 创建文章时，Hexo 会根据 <code>/scaffolds/post.md</code> 对新文章进行初始化。</p><p>j简单来说，<code>/scaffolds/post.md</code> 文档中所规定的格式就是新文章的 <strong>模板</strong>。</p><p>一个简单的示例如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags: </span><br><span class="line">categories: </span><br></pre></td></tr></table></figure><h4 id="（2）头部设置"><a href="#（2）头部设置" class="headerlink" title="（2）头部设置"></a>（2）头部设置</h4><p>在每篇利用 Hexo 创建的文章的开头，都会有对文章进行说明的文字，叫做 <strong>文章头部</strong></p><p>文章的头部除了可以设置文章标题、发布日期等基础信息外，还可以为文章添加标签、分类等</p><p>一个简单的示例如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: Title</span><br><span class="line">date: YYYY-MM-DD HH:MM:SS</span><br><span class="line">tags: [tag1, tag2, ...]</span><br><span class="line">categories: category</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：属性和属性值之间必须有一个空格，否则会解析错误</p><h4 id="（3）首页显示"><a href="#（3）首页显示" class="headerlink" title="（3）首页显示"></a>（3）首页显示</h4><p>在利用 Hexo 框架搭建的博客网站中，首页会显示文章的内容，且默认显示文章的全部内容</p><p>如果当文章太长的时候就会显得十分冗余，所以我们有必要对其进行精简</p><p>这时，我们只需在文章中使用 <code>&lt;!--more--&gt;</code> 标志即可，表示只会显示标志前面的内容</p><h2 id="四、部署发布"><a href="#四、部署发布" class="headerlink" title="四、部署发布"></a>四、部署发布</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g -c</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo+github搭建个人博客</title>
      <link href="/archives/61030.html"/>
      <url>/archives/61030.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><p>使用github pages搭建博客的好处：</p><span id="more"></span><blockquote><ol><li>全是静态文件，访问速度快；</li><li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li><li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li><li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li><li>博客内容可以轻松打包、转移、发布到其它平台；</li></ol></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li><p>注册一个github账号</p></li><li><p>安装node.npm等</p></li><li><p>安装git</p></li></ol><h2 id="二、搭建github仓库"><a href="#二、搭建github仓库" class="headerlink" title="二、搭建github仓库"></a>二、搭建github仓库</h2><h3 id="2-1-创建仓库"><a href="#2-1-创建仓库" class="headerlink" title="2.1 创建仓库"></a>2.1 创建仓库</h3><p>新建一个名为<code>用户名.github.io</code>的仓库，例如，如果你的github用户名是liuhuanhuan963019，那么你就新建<code>liuhuanhuan963019.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="liuhuanhuan963019.github.io">liuhuanhuan963019.github.io</a>，弊端就是，我们只能创建一个这样的仓库。</p><p><strong>warning</strong>:</p><blockquote><p>注册的邮箱需要先去验证</p><p>仓库名称必须是用户名.github.io</p><p>仓库创建会有一定的延迟</p></blockquote><h3 id="2-2-绑定域名"><a href="#2-2-绑定域名" class="headerlink" title="2.2 绑定域名"></a>2.2 绑定域名</h3><p>一般我们是使用<code>用户名.github.io</code>来访问，为了使我们的博客更具特点，我们可以使用绑定域名的方式来操作。</p><p>域名绑定方式请参考博客：<a href="https://novoice.top/2021/02/09/【hexo】基础教程-五-阿里云域名解析/">【Hexo】基础教程(五) 阿里云域名解析 | 最爱吃大米的博客 (novoice.top)</a></p><p>然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名我的是novoice.top,大家依据自己的实际情况进行填写。</p><h3 id="三、配置SSH"><a href="#三、配置SSH" class="headerlink" title="三、配置SSH"></a>三、配置SSH</h3><p>在我们代码提交到github仓库的时候我们，需要一定的权限，此时我们就需要配置我们本地的SSH</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/. ssh #检查本机已存在的ssh密钥</span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot;</span><br></pre></td></tr></table></figure><p>然后一直回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p><p>将刚复制的内容粘贴到key那里，title随便填，保存。</p><p>具体操作方式参见博客：git配置本地ssh参照文章<a href="https://liuhuanhuan.blog.csdn.net/article/details/110730314">(36条消息) Macos git配置本地ssh_最爱吃大米的博客-CSDN博客</a> windows方式相同</p><h2 id="四、hexo写博客"><a href="#四、hexo写博客" class="headerlink" title="四、hexo写博客"></a>四、hexo写博客</h2><h3 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1 简介"></a>4.1 简介</h3><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p><p>官网： <a href="http://hexo.io/">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo">https://github.com/hexojs/hexo</a></p><h3 id="4-2-安装"><a href="#4-2-安装" class="headerlink" title="4.2 安装"></a>4.2 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="4-3-初始化"><a href="#4-3-初始化" class="headerlink" title="4.3 初始化"></a>4.3 初始化</h3><p>新建一个名为hexo的文件夹（名字任意），比如我的是<code>F:\IdeaProjects\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd F:\IdeaProjects\hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g #生成</span><br><span class="line">hexo s #运行辅助</span><br><span class="line">hexo c #清除本地</span><br><span class="line">hexo d #上传代码到github</span><br></pre></td></tr></table></figure><p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：<a href="http://blog.liuxianan.com/windows-port-bind.html">http://blog.liuxianan.com/windows-port-bind.html</a></p><p>第一次的时候就会有一篇默认的文章，hello world !!! 大家打开自己的浏览器输入localhost:4000即可查看。</p><h3 id="4-4-修改主题"><a href="#4-4-修改主题" class="headerlink" title="4.4 修改主题"></a>4.4 修改主题</h3><p> <a href="https://hexo.io/themes/">官方主题</a></p><p>个人比较喜欢的主题：<a href="https://github.com/litten/hexo-theme-yilia">hexo-theme-yilia</a>。</p><p>首先下载这个主题：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd F:\IdeaProjects\hexo\themes</span><br><span class="line">git clone https://github.com/litten/hexo-theme-yilia.git yilia</span><br></pre></td></tr></table></figure><p>下载后的主题都在themes目录下：</p><p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: yilia</code>，然后重新执行<code>hexo g</code>来重新生成。</p><p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p><h3 id="4-5-上传到github"><a href="#4-5-上传到github" class="headerlink" title="4.5 上传到github"></a>4.5 上传到github</h3><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。由于gitee pages在维护，所以暂时只能使用github搭建。</p><p>首先，<code>ssh key</code>肯定要配置好。</p><p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA.png" alt="image-20210725005608198"></p><p>正确写法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:liuhuanhuan963019/liuhuanhuan963019.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https://github.com/liuhuanhuan963019/liuhuanhuan963019.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>此时会报错，我们需要下载一个插件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会：</p><h3 id="4-6-常用的hexo命令"><a href="#4-6-常用的hexo命令" class="headerlink" title="4.6 常用的hexo命令"></a>4.6 常用的hexo命令</h3><blockquote><p>hexo new “postName” #新建文章 </p><p>hexo new page “pageName” #新建页面 </p><p>hexo generate #生成静态页面至public目录 </p><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server） </p><p>hexo deploy #部署到GitHub </p><p>hexo help  # 查看帮助 </p><p>hexo version  #查看Hexo的版本</p></blockquote><p>简写</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy</span><br></pre></td></tr></table></figure><h3 id="4-7-config-xml"><a href="#4-7-config-xml" class="headerlink" title="4.7 _config.xml"></a>4.7 _config.xml</h3><p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p><p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p><h3 id="4-8-新建一个博客"><a href="#4-8-新建一个博客" class="headerlink" title="4.8 新建一个博客"></a>4.8 新建一个博客</h3><p>定位到我们的hexo根目录，执行命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &#x27;blog&#x27;</span><br></pre></td></tr></table></figure><p>hexo会帮我们在<code>_posts</code>下生成相关md文件：</p><p>我们只需要打开这个文件就可以开始写博客了，</p><p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p><p>一般完整格式如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---title: blog #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文</span><br></pre></td></tr></table></figure><h2 id="五、最终效果"><a href="#五、最终效果" class="headerlink" title="五、最终效果"></a>五、最终效果</h2><p>关于hexo更多用法欢迎大家访问呢我的<a href="https://liuhuanhuan.blog.csdn.net">csdn</a></p><p>欢迎大家访问我的个人博客：<a href="www.novoice.top">novoice.top</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【hexo】yilia主题优化-一-右侧新增fork-on-github</title>
      <link href="/archives/50652.html"/>
      <url>/archives/50652.html</url>
      
        <content type="html"><![CDATA[<p>选择一张合适的图片的新增到网站的右上角，用于快速跳转到个人github等相关网站。</p><p>1.打开/themes/yilia/layout/layout.ejs  文件，新增如下代码</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// theme.github 为_config.yml中配置，接下来会提到</span></span><br><span class="line">&lt;% <span class="keyword">if</span> (theme.<span class="property">github</span> &amp;&amp; theme.<span class="property">github</span>.<span class="property">url</span>)  </span><br><span class="line">&lt;% # <span class="string">&quot;GitHub Ribbons&quot;</span> %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;forkMe&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute;z-index:999;top:0;right:0.5em;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">       <span class="attr">href</span>=<span class="string">&quot;&lt;%=theme.github.url%&gt;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%- url_for(&#x27;img/forkme.png&#x27;) %&gt;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">class</span>=<span class="string">&quot;attachment-full size-full&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Fork me on GitHub&quot;</span> <span class="attr">data-recalc-dims</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>2.根据&lt;img src=”&lt;%- url_for(‘img/forkme.png’) %&gt;” 中所写的地址在source/img目录下添加一张图片为forkme.png</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91yilia%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%9601.png" alt="【hexo】yilia主题优化（一）01"></p><p>3.在themes主题配置文件中配置 如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">GitHub Ribbons(https://github.blog/2008-12-19-github-ribbons/)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash">右上角github连接设置</span></span><br><span class="line">github:</span><br><span class="line"><span class="meta">  # </span><span class="language-bash">(关闭请设置为<span class="literal">false</span>)</span></span><br><span class="line"><span class="meta"># </span><span class="language-bash"> url: https://github.com/xxxxxxxx?tab=repositories</span></span><br><span class="line">   url: flase</span><br></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90hexo%E3%80%91yilia%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%9602.png" alt="【hexo】yilia主题优化（一）02"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适合macos系统中idea快捷键与设置</title>
      <link href="/archives/672.html"/>
      <url>/archives/672.html</url>
      
        <content type="html"><![CDATA[<p><u>实现ctrl+ 滚轮变大字体：</u>    </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setting-&gt;editor-&gt;General-&gt;勾选change font size.....</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alt = option</span><br><span class="line">ctrl = control</span><br><span class="line"></span><br><span class="line">control + enter类初始化</span><br><span class="line">command + o打开类</span><br><span class="line">command + e         打开最近打开的文件</span><br><span class="line">control + table     打开上次打开的文件</span><br><span class="line">command + delete删除行</span><br><span class="line">command + x剪切行</span><br><span class="line">command + d    复制一行</span><br><span class="line">control + t 重构菜单</span><br><span class="line">option + 上/下    缩小或放大选区</span><br><span class="line">command + 左/右 移动鼠标光标到最左边和最右边</span><br><span class="line">command + shift + 上/下  移动行或方法上移或下移</span><br><span class="line">option + enter  构造函数参数提取到属性，自动创建类，提示信息，错误引入修订</span><br><span class="line">Command shift + o 打开文件</span><br><span class="line">command + shift + t 打开单元测试</span><br><span class="line">command + option + enter 在上面增加一行 </span><br><span class="line">COMmand + shift + enter 在下面增加一行</span><br><span class="line">control + option + 0      优化import,删除无用引入</span><br><span class="line">command + shift + a杳找action</span><br><span class="line">command + option + l 格式化代码</span><br><span class="line">option + control + r 调出运行，列出那些可以执行</span><br><span class="line">Command + option + p抽取参数</span><br><span class="line">Command + option + v抽取变量</span><br><span class="line">Command + option + f抽取字段</span><br><span class="line">Command + option + c抽取常量</span><br><span class="line">Command + option + m抽取方法</span><br><span class="line"></span><br><span class="line">fn+shift+f6重命名</span><br><span class="line">command + option + n 内联将调用替换成实现   将一个变量定义抽取成一个变量直接赋值</span><br><span class="line"></span><br><span class="line">invert if condition 条件反转 内容也反转   如if大于变小于号</span><br><span class="line"></span><br><span class="line">Live templates 内置 偏好设置E</span><br><span class="line"><span class="meta">$</span><span class="language-bash">NAME$ 记得要 点define</span></span><br><span class="line">目定义live tem temp lates 替换 偏好设置里有.. eg: sout Tori 1ter</span><br><span class="line">向后声明 eg: &quot;aa&quot;.var， &quot;sdf&#x27;&quot; . fori</span><br><span class="line">智能补全</span><br><span class="line"></span><br><span class="line">if（str == null） &#123;</span><br><span class="line">return &quot;abc&quot; //command +shift +enter 补分号  </span><br><span class="line">double shift查找文件方</span><br><span class="line">command + n弹出生 成代码(get set方法或者 构造方法之类)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置自动导包：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">setting-&gt;</span><span class="language-bash">editor-&gt;general-&gt;auto import-&gt;insert imports on <span class="built_in">paste</span> All</span></span><br></pre></td></tr></table></figure><p>显示方法分割符号</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">setting-&gt;</span><span class="language-bash">editor-&gt;general-&gt;appearance-&gt;show method separators</span></span><br></pre></td></tr></table></figure><p>取消单行显示文件 文件多时可以一起显示</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">setting-&gt;</span><span class="language-bash">editor-&gt;general-&gt;Editor Tabs-&gt;show tabs <span class="keyword">in</span> one row</span></span><br></pre></td></tr></table></figure><p> 修改注释的颜色</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a58b9ff46fcb05e7f4e2ff6a284fc6eb.png" alt="image-20201015183930399"></p><p>设置导包，超过几个包自动转为<em> 如5歌以上util 转为</em></p><p><img src="https://img-blog.csdnimg.cn/img_convert/613195d0d9477d412ad68d74fbd8e3e3.png" alt="image-20201015184118158"></p><p>设置文件新建头部标签签名：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/bdc9c2ee7f4c41e164a64d2f060faf8e.png" alt="image-20201015184336781"></p><p>设置当前项目编码格式的问题：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b325a31c944953f98374525b4f5f0122.png" alt="image-20201015184540827"></p><p>设置自动自动编译</p><p><a href="https://tva1.sinaimg.cn/large/007S8ZIlgy1gjq7nggkbpj31lw0t4n6n.jpg">https://tva1.sinaimg.cn/large/007S8ZIlgy1gjq7nggkbpj31lw0t4n6n.jpg</a>)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e4111c72d9cb270af84b77cc34717d6c.png" alt="image-20201015184922175"></p><p>若出现无代码提示的显示功能时，可更改</p><p><img src="https://img-blog.csdnimg.cn/img_convert/c755691474638eb535f5161ea6663813.png" alt="image-20201015185031169"></p><p>快捷输入：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Sout   输出</span><br><span class="line"></span><br><span class="line">soutp</span><br><span class="line"></span><br><span class="line">soutm</span><br><span class="line"></span><br><span class="line">soutv</span><br><span class="line"></span><br><span class="line">main </span><br><span class="line"></span><br><span class="line">psvm main方法</span><br><span class="line"></span><br><span class="line">循环输出： iter. fori   itar</span><br><span class="line">list.for   正对list集合的增强for循环</span><br><span class="line">list.forr   倒叙遍历</span><br><span class="line"></span><br><span class="line">ifn   判断list是不是null</span><br><span class="line">inn   判断list是不是null</span><br><span class="line"></span><br><span class="line">prsf.   p rivate static final </span><br></pre></td></tr></table></figure><p>idea添加本地tomcat运行测试</p><p><img src="https://img-blog.csdnimg.cn/img_convert/d839abec792bac339117f567d431e5f2.png" alt="image-20201015190525155"></p><p>idea中添加数据库的管理</p><p><img src="https://img-blog.csdnimg.cn/img_convert/ef0d13da68cb9e62a88f6eba95f15823.png" alt="image-20201015190722036"></p><p>上传当前项目到gi t</p><p><img src="https://img-blog.csdnimg.cn/img_convert/79d62784078627f21154ec8e49252f19.png" alt="image-20201015191142473"></p>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Idea </tag>
            
            <tag> MacOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【github】提升github访问速度</title>
      <link href="/archives/19598.html"/>
      <url>/archives/19598.html</url>
      
        <content type="html"><![CDATA[<p>此方式适用于各种操作系统，主要方式为修改host文件，添加配置的方式</p><h4 id="1-查找域名对应的ip地址，并修改hosts文件"><a href="#1-查找域名对应的ip地址，并修改hosts文件" class="headerlink" title="1.查找域名对应的ip地址，并修改hosts文件"></a>1.查找域名对应的ip地址，并修改hosts文件</h4><span id="more"></span><p>windows/Macos/linux通用的方式：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nslookup github.com</span><br><span class="line">nslookup github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><p><code>注：尝试过fastly.Net的方式，加速的效果不是很明显，但是改为fastly.net的方式加速效果的话有着显著的提高。</code></p><p>上述输出的结果为</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A601.png" alt="【github】提升github访问速度0"></p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/github%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A604.png" alt="【github】提升github访问速度02"></p><p>上述图片均为windows10环境下的结果。具体参数按照自己的电脑实际情况来看。</p><p><code>特别声明：网上很多博主的地址，大多数都是自己电脑的查询地址，不建议使用，最好的使用方式是查看自己本机的地址，此地址会变化，所以尽量自己动手查看下，以防万一。</code></p><p>将以下内容添加到windows(==C:\Windows\System32\drivers\etc\hosts==) macos(==/etc/hosts==)中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">13.250.177.223 github.com</span><br><span class="line">157.240.8.41 github.global.ssl.fastly.net</span><br></pre></td></tr></table></figure><blockquote><p>新增到文件的末尾（注意windows10用户会存在文件无法修改的权限，此修改文件的方式，见下期博客）</p></blockquote><h4 id="2-刷新dns缓存"><a href="#2-刷新dns缓存" class="headerlink" title="2.刷新dns缓存"></a>2.刷新dns缓存</h4><p>macos:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo dscacheutil -flushcache</span><br></pre></td></tr></table></figure><p>windows：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><h4 id="3-使用chrome插件"><a href="#3-使用chrome插件" class="headerlink" title="3.使用chrome插件"></a>3.使用chrome插件</h4><p>谷歌商店搜索github加速即可对github提升一些略微显著的效果。</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【github】代码同步提交到github和码云</title>
      <link href="/archives/48362.html"/>
      <url>/archives/48362.html</url>
      
        <content type="html"><![CDATA[<p>现在很多朋友在git clone  github代码的时候会发现速度慢的实在是难以吐槽，于是我们就像个方法，将我们的代码同步码云上，我们再去下载速度，是不是快了很多呢。&gt;。&lt;！！!</p><p>但是随着我们提交代码的时候，我们就面临着，代码提交到哪里呢？码云还是github呢？本文将进行详细的介绍。</p><span id="more"></span><h2 id="1-远程仓库的使用"><a href="#1-远程仓库的使用" class="headerlink" title="1. 远程仓库的使用"></a>1. 远程仓库的使用</h2><h3 id="1-1-查看远程仓库"><a href="#1-1-查看远程仓库" class="headerlink" title="1.1 查看远程仓库"></a>1.1 查看远程仓库</h3><p>查看当前项目的远程仓库</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">origin</span><br></pre></td></tr></table></figure><p>这个<code>origin</code>就是一个指向远程仓库的名称，是你在<code>clone</code>时 <code>git</code> 为你默认创建的。</p><p>可以通过命令查看<code>origin</code>指向的远程仓库地址：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">origin  https://github.com/liuhuanhuan963019/demo.git (fetch)</span><br><span class="line">origin  https://github.com/liuhuanhuan963019/demo.git (push)</span><br></pre></td></tr></table></figure><p>该命令会显示读写远程仓库的名称和地址，我这里指向的是Github。</p><h3 id="1-2-远程仓库重命名"><a href="#1-2-远程仓库重命名" class="headerlink" title="1.2 远程仓库重命名"></a>1.2 远程仓库重命名</h3><p>输入命令：<br><code>git remote rename &lt;old_remote&gt; &lt;new_remote&gt;</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote rename origin github</span><br></pre></td></tr></table></figure><p>输入命令查看：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">github  https://github.com/liuhuanhuan963019/demo.git (fetch)</span><br><span class="line">github  https://github.com/liuhuanhuan963019/demo.git (push)</span><br></pre></td></tr></table></figure><p>完美！！！！</p><h3 id="1-3-添加另一个远程仓库"><a href="#1-3-添加另一个远程仓库" class="headerlink" title="1.3 添加另一个远程仓库"></a>1.3 添加另一个远程仓库</h3><p>下面我们再添加Gitee上的远程仓库，首先在Gitee上创建一个空的仓库，名称与Github上相同。</p><p>然后在【克隆/下载】处复制地址。</p><p>输出添加远程仓库命令：</p><p><code>git remote add &lt;remote&gt; &lt;url&gt;</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add gitee https://gitee.com/liuhuanhuan963019/demo.git </span><br></pre></td></tr></table></figure><p>再来验证下是否成功，输出结果：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">github  https://github.com/liuhuanhuan963019/demo.git (fetch)</span><br><span class="line">github  https://github.com/liuhuanhuan963019/demo.git (push)</span><br><span class="line">gitee  https://gitee.com/liuhuanhuan963019/demo.git (fetch)</span><br><span class="line">gitee  https://gitee.com/liuhuanhuan963019/demo.git (push)</span><br></pre></td></tr></table></figure><p>成功！！！</p><h3 id="1-4-多个远程仓库的推送-拉取"><a href="#1-4-多个远程仓库的推送-拉取" class="headerlink" title="1.4 多个远程仓库的推送/拉取"></a>1.4 多个远程仓库的推送/拉取</h3><p>多个远程仓库的时候，必须加上远程仓库的名称，以识别是哪个远程仓库，命令如下：</p><p><code>git push &lt;remote&gt; &lt;branch&gt;</code>、<code>git pull &lt;remote&gt; &lt;branch&gt;</code>：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push github master</span><br><span class="line">git pull github master</span><br><span class="line"></span><br><span class="line">git push gitee master</span><br><span class="line">git pull gitee master</span><br></pre></td></tr></table></figure><p>如果不想每次操作都带着分支，需要将本地分支与远程分支进行关联：</p><p><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;remote_branch&gt; &lt;local_branch&gt;</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=gitee/main main</span><br></pre></td></tr></table></figure><p>关联后就可以不指定分支了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push github</span><br><span class="line">git pull github</span><br><span class="line"></span><br><span class="line">git push gitee</span><br><span class="line">git pull gitee</span><br></pre></td></tr></table></figure><h3 id="1-5-移除一个远程仓库"><a href="#1-5-移除一个远程仓库" class="headerlink" title="1.5 移除一个远程仓库"></a>1.5 移除一个远程仓库</h3><p>如果想要移除一个远程仓库，可以使用下面命令：<br><code>git remote remove &lt;remote&gt;</code>或<code>git remote rm &lt;remote&gt;</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote remove gitee</span><br></pre></td></tr></table></figure><p>执行移除远程仓库后，该仓库在本地的所有分支与配置信息也会一并删除。</p><h2 id="2-常见错误及解决方案"><a href="#2-常见错误及解决方案" class="headerlink" title="2. 常见错误及解决方案"></a>2. 常见错误及解决方案</h2><h3 id="2-1-提示未指定分支"><a href="#2-1-提示未指定分支" class="headerlink" title="2.1 提示未指定分支"></a>2.1 提示未指定分支</h3><blockquote><p>You asked to pull from the remote ‘gitee’, but did not specify<br>a branch. Because this is not the default configured remote<br>for your current branch, you must specify a branch on the command line.</p></blockquote><p>表示本地分支与远程分支未做关联，进行关联一下即可，执行下面命令：<br><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;remote_branch&gt; &lt;your_branch&gt;</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=gitee/main main</span><br></pre></td></tr></table></figure><h3 id="2-2-没有存储库的权限"><a href="#2-2-没有存储库的权限" class="headerlink" title="2.2 没有存储库的权限"></a>2.2 没有存储库的权限</h3><p>当执行推送操作时，提示下面信息：</p><blockquote><p>remote: You do not have permission push to this repository<br>fatal: unable to access ‘<a href="https://gitee.com/gozhuyinglong/blog-demos.git/">https://gitee.com/gozhuyinglong/blog-demos.git/</a>‘: The requested URL returned error: 403</p></blockquote><p>表示没有远程仓库的权限，应该首先查看远程仓库是否公开，再检查本地账号和密码是否正确。</p><h3 id="2-3-远程仓库未公开"><a href="#2-3-远程仓库未公开" class="headerlink" title="2.3 远程仓库未公开"></a>2.3 远程仓库未公开</h3><p>登录Gitee，检查该代码库是否公司。若未公开，则设置为公开。</p><h3 id="2-4-生成SSH-Key，并添加到Github"><a href="#2-4-生成SSH-Key，并添加到Github" class="headerlink" title="2.4 生成SSH Key，并添加到Github"></a>2.4 生成SSH Key，并添加到Github</h3><p>输入下面命令来生成SSH Key，双引号内填写你的登录邮箱地址</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;xxxxx@xxxxx.com&quot; </span><br></pre></td></tr></table></figure><p>如果弹出下面提示，直接回车即可。（若已存在，会提示是否替换，输入Y再回车）</p><p>接下来的操作，参考作者的<a href="https://blog.csdn.net/qq_38140292/article/details/110730314">本地配置ssh</a></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Anaconda】conda创建虚拟环境不报错，但是虚拟环境无法生成的解决办法</title>
      <link href="/archives/49113.html"/>
      <url>/archives/49113.html</url>
      
        <content type="html"><![CDATA[<p>python新建虚拟环境，有两种方式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda create -n DeepLearning python=<span class="number">3.8</span></span><br></pre></td></tr></table></figure><p>或者通过Anaconda的方式新建（可能打开Anaconda的过程很漫长。。。。）</p><span id="more"></span><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Anaconda%E3%80%91conda%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8D%E6%8A%A5%E9%94%99%EF%BC%8C%E4%BD%86%E6%98%AF%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9501.png" alt="image-20210308212646461"></p><p>按照上图的方式，即可安装，但是不如命令来的快一些</p><p>现在出现了一写问题！！！！</p><p>我在新建虚拟环境的时候：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda create -n pytorch python=<span class="number">3.7</span></span><br></pre></td></tr></table></figure><p>出现了如下情况：</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Anaconda%E3%80%91conda%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8D%E6%8A%A5%E9%94%99%EF%BC%8C%E4%BD%86%E6%98%AF%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9502.png" alt="img"></p><p>在新建的环境中，使用pip命令，出现错误，提示python什么什么文件丢失。意思就是找不到python执行程序。我以为是我创建错了，我删掉，重新建立，最后还是出现这个问题，最后发现是多余的环境，导致系统环境乱掉了。</p><p>清除之前未完成的conda安装的包就可以正常创建环境了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda clean --<span class="built_in">all</span></span><br></pre></td></tr></table></figure><p>此过程需要等待一段时间</p><p><img src="https://cdn.jsdelivr.net/gh/liuhuanhuan963019/blogPicture/md_photos/%E3%80%90Anaconda%E3%80%91conda%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%8D%E6%8A%A5%E9%94%99%EF%BC%8C%E4%BD%86%E6%98%AF%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E6%97%A0%E6%B3%95%E7%94%9F%E6%88%90%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%9503.png" alt="image-20210308213735100"></p><p>然后就可以正常的创建虚拟环境了</p><p>ok!!!!!!</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8新特性解读</title>
      <link href="/archives/35786.html"/>
      <url>/archives/35786.html</url>
      
        <content type="html"><![CDATA[<p>Java 8 (又称为 jdk 1.8) 是 Java 语言开发的一个主要版本。 Oracle 公司于 2014 年 3 月 18 日发布 Java 8 ，它支持函数式编程，新的 JavaScript 引擎，新的日期 API，新的Stream API 等。</p><span id="more"></span><h2 id="一、新特性"><a href="#一、新特性" class="headerlink" title="一、新特性"></a>一、新特性</h2><h3 id="1-1-生态"><a href="#1-1-生态" class="headerlink" title="1.1 生态"></a>1.1 生态</h3><ul><li><strong>Lambda 表达式</strong></li><li>函数式接口</li><li>方法引用 / 构造器引用</li><li><strong>Stream API</strong></li><li>接口中的默认方法 / 静态方法</li><li>新时间日期 API</li><li>其他新特性</li></ul><h3 id="1-2-新特性"><a href="#1-2-新特性" class="headerlink" title="1.2 新特性"></a>1.2 新特性</h3><ul><li>速度更快</li><li>代码更少</li><li>强大的 Stream API</li><li>便于并行</li><li>最大化减少空指针异常 Optional (Kotlin ?)</li></ul><h3 id="1-3-温故而知新"><a href="#1-3-温故而知新" class="headerlink" title="1.3 温故而知新"></a>1.3 温故而知新</h3><ul><li>Hashmap 底层结构/原理 老话题不再阐述 …</li><li>并发hashmap …</li><li>Java虚拟机 …</li><li>Java内存模型 …</li></ul><h2 id="二、Lamdba"><a href="#二、Lamdba" class="headerlink" title="二、Lamdba"></a>二、Lamdba</h2><h3 id="2-1-匿名函数"><a href="#2-1-匿名函数" class="headerlink" title="2.1 匿名函数"></a>2.1 匿名函数</h3><p> Lambda是一个匿名函数，可以理解为一段可以传递的代码（将代码像数据一样传递）；可以写出更简洁、更灵活的代码；作为一种更紧凑的代码风格，是Java语言表达能力得到提升。</p><h3 id="2-2-匿名内部类"><a href="#2-2-匿名内部类" class="headerlink" title="2.2 匿名内部类"></a>2.2 匿名内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//匿名内部类</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//调用</span></span><br><span class="line">    TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comparator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Lambda"><a href="#2-3-Lambda" class="headerlink" title="2.3 Lambda"></a>2.3 Lambda</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// Lambda 表达式</span></span><br><span class="line">    Comparator&lt;Integer&gt; comparator = (a, b) -&gt; Integer.compare(a, b);</span><br><span class="line"></span><br><span class="line">    TreeSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(comparator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演变过程：</p><blockquote><ul><li>垃圾代码 —&gt; 策略模式 —&gt; 匿名内部类 —&gt; Lambda表达式</li></ul></blockquote><p>基础语法：</p><blockquote><ul><li>操作符：-&gt;</li><li>左侧：参数列表</li><li>右侧：执行代码块 / Lambda 体</li></ul></blockquote><p>口诀：</p><ul><li>写死小括号，拷贝右箭头，落地大括号</li><li>左右遇一括号省</li><li>左侧推断类型省</li></ul><p>语法格式：</p><ul><li>无参数，无返回值：() -&gt; sout</li></ul><p>例如 Runnable接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLamdba2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;hello world!!!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">runnable2</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;hello world!!!&quot;</span>);</span><br><span class="line">        runnable2.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有一个参数，无返回值</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class="line">    con.accept(<span class="string">&quot;lhh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有一个参数，无返回值 （小括号可以省略不写）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    Consumer&lt;String&gt; con = x -&gt; System.out.println(x);</span><br><span class="line">    con.accept(<span class="string">&quot;lhh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有两个及以上的参数，有返回值，并且 Lambda 体中有多条语句</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    Comparator&lt;Integer&gt; com = (x1,x2) -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;函数式接口&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(x1, x2);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有两个及以上的参数，有返回值，并且 Lambda 体中只有1条语句 （大括号 与 return 都可以省略不写）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line">       Comparator&lt;Integer&gt; com = (x1,x2) -&gt; Integer.compare(x1, x2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>Lambda 表达式 参数的数据类型可以省略不写 Jvm可以自动进行 “类型推断”</li></ul><p>函数式接口：</p><ul><li>接口中只有一个抽象方法的接口 @FunctionalIterface</li></ul><p>测试：</p><ul><li>定义一个函数式接口：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyFun</span> &#123;</span><br><span class="line"></span><br><span class="line">    Integer <span class="title function_">count</span><span class="params">(Integer a, Integer b)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用一下：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Testpublic</span> <span class="keyword">void</span> <span class="title function_">test05</span><span class="params">()</span>&#123;    <span class="type">MyFun</span> <span class="variable">myFun1</span> <span class="operator">=</span> (a, b) -&gt; a + b;    <span class="type">MyFun</span> <span class="variable">myFun2</span> <span class="operator">=</span> (a, b) -&gt; a - b;    <span class="type">MyFun</span> <span class="variable">myFun3</span> <span class="operator">=</span> (a, b) -&gt; a * b;    <span class="type">MyFun</span> <span class="variable">myFun4</span> <span class="operator">=</span> (a, b) -&gt; a / b;&#125;</span><br></pre></td></tr></table></figure><ul><li>案例教程：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> myFunc(<span class="number">100</span>,(x) -&gt; x * x);        System.out.println(num);        System.out.println(myFunc(<span class="number">200</span>, (y) -&gt; y+<span class="number">200</span>));    &#125;    <span class="keyword">public</span> Integer <span class="title function_">myFunc</span><span class="params">(Integer num, MyFunc mf)</span> &#123;        <span class="keyword">return</span> mf.getValue(num);    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-练习"><a href="#2-4-练习" class="headerlink" title="2.4  练习"></a>2.4  练习</h3><p>1、调用Collection.sort()方法，通过定制排序比较两个Employee（先按年龄比，年龄相同按照姓名比）使用Lamdba作为参数传递</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ist&lt;Employee&gt; employees = Arrays.asList(        <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">101</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="number">8000</span>),        <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">102</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">21</span>,<span class="number">6500</span>),        <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">103</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">19</span>,<span class="number">9000</span>),        <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">104</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">21</span>,<span class="number">7000</span>),        <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">105</span>,<span class="string">&quot;田七&quot;</span>,<span class="number">30</span>,<span class="number">10000</span>)    );    <span class="comment">// 调用Collection.sort()方法，通过定制排序比较两个Employee（先按年龄比，年龄相同按照姓名比）使用Lamdba作为参数传递    @Test    public void test1() &#123;        Collections.sort(employees, (e1,e2) -&gt; &#123;            if (e1.getAge() == e2.getAge()) &#123;                return e1.getName().compareTo(e2.getName());            &#125; else &#123;                return Integer.compare(e1.getAge(), e2.getAge());            &#125;        &#125;);        employees.stream().forEach(System.out::println);    &#125;</span></span><br></pre></td></tr></table></figure><p>2、(1)声明函数式接口，接口中声明抽象方法，String getValue(String str);</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterfacepublic</span> <span class="keyword">interface</span> <span class="title class_">LamdbaPracticeInterface</span> &#123;    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">(String str)</span>;&#125;</span><br></pre></td></tr></table></figure><p>​    (2)声明类 TestLambda，类中编写方法使用接口作为参数，将一个字符串转换成大写，并作为方法的返回值；</p><p>​    (3)再将一个字符串的第二个和第四个索引位置进行截取字串</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span> <span class="params">()</span> &#123;        <span class="type">String</span> <span class="variable">trimString</span> <span class="operator">=</span> strHandle(<span class="string">&quot;wo d a &quot;</span>, (str) -&gt; str.trim());        System.out.println(trimString);        <span class="comment">// 声明类 TestLambda，类中编写方法使用接口作为参数，将一个字符串转换成大写，并作为方法的返回值；        String upperString = strHandle(&quot;abcdef&quot;, (str) -&gt; str.toUpperCase());        System.out.println(upperString);        String splictString = strHandle(&quot;asasasasa&quot;, (str)-&gt; str.substring(2,4));        System.out.println(splictString);    &#125;</span></span><br></pre></td></tr></table></figure><p>3、(1)声明一个带两个泛型的函数式接口，泛型类型为<T, R> T 为参数，R 为返回值；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterfacepublic</span> <span class="keyword">interface</span> <span class="title class_">LamdbaPracticeInterface2</span>&lt;T,R&gt; &#123;    <span class="keyword">public</span> R <span class="title function_">getValue</span><span class="params">(T t1,T t2)</span>;&#125;</span><br></pre></td></tr></table></figure><p>​     (2)接口中声明对应的抽象方法；</p><p>​    (3)在 TestLambda 类中声明方法，使用接口作为参数，计算两个 Long 类型参数的和；</p><p>​    (4)在计算两个 Long 类型参数的乘积；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(1)声明函数式接口，接口中声明抽象方法，String getValue(String str);    public String strHandle(String st, LamdbaPracticeInterface LP) &#123;        return LP.getValue(st);    &#125;    @Test    public void test3() &#123;       longHandle(20L, 30L, (l1, l2) -&gt; l1 + l2);       longHandle(20L, 30L, (l1, l2) -&gt; l1 * l2);    &#125;    //(1)声明函数式接口，接口中声明抽象方法，String getValue(String str);    public void longHandle(Long l1, Long l2, LamdbaPracticeInterface2&lt;Long, Long&gt; LP) &#123;        System.out.println(LP.getValue(l1, l2));    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="三、函数式接口"><a href="#三、函数式接口" class="headerlink" title="三、函数式接口"></a>三、函数式接口</h2><p>Java内置四大核心函数式接口：</p><div class="table-container"><table><thead><tr><th><strong>函数式接口</strong></th><th>参数类型</th><th><strong>返回类型</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>Consumer<br/>消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作：void accept(T t)</td></tr><tr><td>Supplier<br/>提供型接口</td><td>无</td><td>T</td><td>返回类型为T的对象：T get()</td></tr><tr><td>Function<T, R><br/>函数型接口</td><td>T</td><td>R</td><td>对类型为T的对象应用操作，并返回结果为R类型的对象：R apply(T t)</td></tr><tr><td>Predicate<br/>断言型接口</td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某约束，并返回boolean值：boolean test(T t)</td></tr></tbody></table></div><h3 id="3-1-消费型接口"><a href="#3-1-消费型接口" class="headerlink" title="3.1 消费型接口"></a>3.1 消费型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    Counsumer&lt;T&gt; 消费型    @Test    public void test1() &#123;        happy(1000, (money) -&gt; System.out.println(&quot;消费了&quot;+money));    &#125;    public void happy(double money, Consumer&lt;Double&gt; con) &#123;        con.accept(money);    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-提供型接口"><a href="#3-2-提供型接口" class="headerlink" title="3.2 提供型接口"></a>3.2 提供型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;        List&lt;Integer&gt; numList = getNumList(<span class="number">10</span>, ()-&gt;(<span class="type">int</span>)(Math.random()*<span class="number">1000</span>));        System.out.println(numList);    &#125;    <span class="comment">//需求：产生指定个数的整数，并放入到集合当中去    public List&lt;Integer&gt; getNumList(int num, Supplier&lt;Integer&gt; supplier) &#123;            List&lt;Integer&gt; list = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; num; i++) &#123;            list.add(supplier.get());        &#125;        return list;    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-函数型接口"><a href="#3-3-函数型接口" class="headerlink" title="3.3 函数型接口"></a>3.3 函数型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;        <span class="type">String</span> <span class="variable">lhh</span> <span class="operator">=</span> strHandler(<span class="string">&quot;lhh&quot;</span>, (str) -&gt; str.trim());        System.out.println(lhh);    &#125;    <span class="comment">// 需求：用于处理字符串    public String strHandler(String str, Function&lt;String,String&gt; fun) &#123;            return fun.apply(str);    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-断言型接口"><a href="#3-4-断言型接口" class="headerlink" title="3.4 断言型接口"></a>3.4 断言型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;        List&lt;String&gt; strings = filterStr(Arrays.asList(<span class="string">&quot;adsq&quot;</span>, <span class="string">&quot;2we&quot;</span>, <span class="string">&quot;cs&quot;</span>, <span class="string">&quot;Dqdw&quot;</span>, <span class="string">&quot;ddwqdqw&quot;</span>), s -&gt; s.endsWith(<span class="string">&quot;w&quot;</span>));        <span class="keyword">for</span> (String s : strings) &#123;            System.out.println(s);        &#125;    &#125;    <span class="comment">// 需求：将满足条件的字符串放到集合当中去    public List&lt;String&gt; filterStr(List&lt;String&gt; strings, Predicate&lt;String&gt; predicate) &#123;            List&lt;String&gt; list = new ArrayList&lt;&gt;();            for (String str : strings) &#123;                if (predicate.test(str)) &#123;                    list.add(str);                &#125;            &#125;            return list;    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-其他接口"><a href="#3-5-其他接口" class="headerlink" title="3,5 其他接口"></a>3,5 其他接口</h3><p><img src="https://img-blog.csdnimg.cn/20200518225311406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyNTU5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><h2 id="四、引用"><a href="#四、引用" class="headerlink" title="四、引用"></a>四、引用</h2><h3 id="4-1-方法引用"><a href="#4-1-方法引用" class="headerlink" title="4.1 方法引用"></a>4.1 方法引用</h3><p><strong>定义：</strong>若 Lambda 表达式体中的内容已有方法实现，则我们可以使用“方法引用”</p><p>语法格式：</p><ul><li>对象 :: 实例方法</li><li>类 :: 静态方法</li><li>类 :: 实例方法</li></ul><p><strong>对象::实例方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象::实例方法名    @Test    public void test() &#123;        PrintStream ps1 = System.out;        Consumer&lt;String&gt; con = (x) -&gt; ps1.print(x);        // 使用方法引用的方式，参数和返回值与lamdba体中的内容是一致的        PrintStream ps = System.out;        Consumer&lt;String&gt; con1 = ps::println;        Consumer&lt;String&gt; con2 = System.out::println;        con2.accept(&quot;hello world!!!&quot;);    &#125;@Test    public void test2() &#123;        Employee emp = new Employee();        Supplier&lt;String&gt; sup = () -&gt; emp.getName();        String s = sup.get();        System.out.println(s);        Supplier&lt;Integer&gt; sup2 = emp::getAge;        Integer integer = sup2.get();        System.out.println(integer);    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>Lambda 表达实体中调用方法的参数列表、返回类型必须和函数式接口中抽象方法保持一致</p><p><strong>类::静态方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    类::静态方法名    @Test    public void test3() &#123;        Comparator&lt;Integer&gt; comp = (o1, o2) -&gt; Integer.compare(o1, o2);        Comparator&lt;Integer&gt; comp2 = Integer::compare;    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>类::实例方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类::实例方法名    @Test    public void test4() &#123;        BiPredicate&lt;String, String&gt; bp = (x1, x2) -&gt; x1.equals(x2);        BiPredicate&lt;String, String&gt; bp2 = String::equals;    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>条件：</strong>Lambda 参数列表中的第一个参数是方法的调用者，第二个参数是方法的参数时，才能使用 ClassName :: Method</p><h3 id="4-2-构造器引用"><a href="#4-2-构造器引用" class="headerlink" title="4.2 构造器引用"></a>4.2 构造器引用</h3><p>格式：ClassName :: new</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造器引用    @Test    public void test5() &#123;        Supplier&lt;Employee&gt; sup = () -&gt; new Employee();        // 构造器引用的方式        Supplier&lt;Employee&gt; sup2 = Employee::new;        Employee employee = sup2.get();        System.out.println(employee);    &#125;    @Test    public void test6() &#123;        Function&lt;Integer, Employee&gt; function = (x) -&gt; new Employee(x);        //构造器引用的方式        Function&lt;Integer, Employee&gt; function1 = Employee::new;    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>需要调用的构造器的参数列表要与函数时接口中抽象方法的参数列表保持一致</p><h3 id="4-3-数组引用"><a href="#4-3-数组引用" class="headerlink" title="4.3 数组引用"></a>4.3 数组引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test7</span><span class="params">()</span> &#123;        Function&lt;Integer, String[]&gt; func = (x) -&gt; <span class="keyword">new</span> <span class="title class_">String</span>[x];        String[] apply = func.apply(<span class="number">10</span>);        System.out.println(apply.length);        Function&lt;Integer, Integer[]&gt; func2 = Integer[]::<span class="keyword">new</span>;        Integer[] apply1 = func2.apply(<span class="number">20</span>);        System.out.println(apply1.length);    &#125;</span><br></pre></td></tr></table></figure><h2 id="五、Stream-API"><a href="#五、Stream-API" class="headerlink" title="五、Stream API"></a>五、Stream API</h2><h3 id="5-1-创建"><a href="#5-1-创建" class="headerlink" title="5.1 创建"></a>5.1 创建</h3><p><img src="https://img-blog.csdnimg.cn/20200518225358689.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyNTU5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>Stream的操作步骤：</p><p><img src="https://img-blog.csdnimg.cn/20200518225430446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyNTU5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><p>创建流：（的几种方法如下）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * stream的三个操作步骤 * 1.创建流 * 2.中间操作 * 3.终止操作 * */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStreamApi1</span> &#123;    <span class="comment">//创建stream    @Test    public void test1() &#123;        //1.可以通过collection系列集合提供的stream()(串行流) 或parallelStream()(并行流)        List&lt;String&gt; list = new ArrayList&lt;&gt;();        Stream&lt;String&gt; stream1 = list.stream();        //2.通过Arrays中的静态方法stream()获取数组流        Employee[] emps = new Employee[10];        Stream&lt;Employee&gt; stream2 = Arrays.stream(emps);        //3.通过stream类中的静态方法of()        Stream&lt;String&gt; stream3 = Stream.of(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);        //4.创建无限流        //迭代方式        Stream&lt;Integer&gt; stream4 = Stream.iterate(0,(X)-&gt;X+2);        stream4.limit(20).forEach(System.out::println);        //生成        Stream.generate(() -&gt; Math.random())                .limit(10)                .forEach(System.out::println);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-筛选、切片"><a href="#5-2-筛选、切片" class="headerlink" title="5.2 筛选、切片"></a>5.2 筛选、切片</h3><p>中间操作：</p><ul><li>filter：接收 Lambda ，从流中排除某些元素</li><li>limit：截断流，使其元素不超过给定数量</li><li>skip(n)：跳过元素，返回一个舍弃了前n个元素的流；若流中元素不足n个，则返回一个空流；与 limit(n) 互补</li><li>distinct：筛选，通过流所生成的 hashCode() 与 equals() 取除重复元素</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中间操作    /**     *  筛选和切片     *  filter-接收Lamdba,从流中排除某些元素     *  limit-截断流，使其元素不超过给定数量     *  skip(n)-跳过元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流，与limit(n)互补     *  distinct-筛选，通过流所生成元素的hashcode()和equals()去除重复元素     * */    List&lt;Employee&gt; employees = Arrays.asList(            new Employee(101,&quot;张三&quot;,20,8000),            new Employee(102,&quot;李四&quot;,21,6500),            new Employee(103,&quot;王五&quot;,19,9000),            new Employee(104,&quot;赵六&quot;,21,7000),            new Employee(105,&quot;田七&quot;,30,10000),            new Employee(105,&quot;田七&quot;,30,10000),            new Employee(105,&quot;田七&quot;,30,10000),            new Employee(105,&quot;田七&quot;,30,10000)    );    //内部迭代：迭代器由StreamAPI完成    @Test    public void test1() &#123;        //中间操作：不会执行任何操作        Stream&lt;Employee&gt; employeeStream = employees.stream()                .filter((e) -&gt; e.getAge() &gt; 20);        //终止操作: 一次性执行全部内容 即“惰性求值”        employeeStream.forEach(System.out::println);    &#125;    //外部迭代    @Test    public void test2() &#123;        Iterator&lt;Employee&gt; it = employees.iterator();        while (it.hasNext()) &#123;            System.out.println(it.next());        &#125;    &#125;    @Test    public void test3() &#123;        // 只要找到满足条件的数据，就会终止操作，后续的操作就不会再执行，叫短路        employees.stream()                .filter((e) -&gt; e.getAge() &gt; 20)                .limit(2)                .forEach(System.out::println);    &#125;    @Test    public void test4() &#123;        // 只要找到满足条件的数据，就会终止操作，后续的操作就不会再执行，叫短路        employees.stream()                .filter((e) -&gt; e.getAge() &gt; 20)                .forEach(System.out::println);    &#125;    @Test    public void test5() &#123;        // 只要找到满足条件的数据，就会终止操作，后续的操作就不会再执行，叫短路        employees.stream()                .filter((e) -&gt; e.getAge() &gt; 20)                .skip(2)                .distinct()                .forEach(System.out::println);    &#125;    /**     * 映射     * map 接收lamdba,将元素转换成其他形式或提取信息，接收一个函数作为参数，该函数会被引用到其他元素上，并将其映射成一个新的元素。     * flatmap- 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流     * */    @Test    public void test6() &#123;        List&lt;String&gt; list = Arrays.asList(&quot;aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;,&quot;ddd&quot;,&quot;eee&quot;);        list.stream()                .map((str) -&gt; str.substring(0,2))                .forEach(System.out::println);        System.out.println(&quot;-----------------------------------------&quot;);        employees.stream()                .map(Employee::getName)                .forEach(System.out::println);        System.out.println(&quot;-----------------------------------------&quot;);        Stream&lt;Stream&lt;Character&gt;&gt; stream = list.stream()                .map(TestStreamApi2::filterCharacter);  //&#123;&#123;a,a,a&#125; &#123;b,b,b,&#125;&#125;//        Stream&lt;Stream&lt;Character&gt;&gt; stream = list.stream()//                .map((e) -&gt; filterCharacter(e));        stream.forEach((e)-&gt;e.forEach(System.out::println));        Stream&lt;Character&gt; stream1 = list.stream()                .flatMap(TestStreamApi2::filterCharacter);        stream1.forEach(System.out::println);  //将整个流全部取出放在一个流中    &#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200518225456187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NTIyNTU5NQ==,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p><ul><li>内部迭代：迭代操作由 Stream API 完成</li><li>外部迭代：我们通过迭代器完成</li></ul><h3 id="5-3-映射"><a href="#5-3-映射" class="headerlink" title="5.3 映射"></a>5.3 映射</h3><ul><li>map：接收 Lambda ，将元素转换为其他形式或提取信息；接受一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</li><li>flatMap：接收一个函数作为参数，将流中每一个值都换成另一个流，然后把所有流重新连接成一个流</li></ul><p>map：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ddd&quot;</span>,<span class="string">&quot;eee&quot;</span>);        list.stream()                .map((str) -&gt; str.substring(<span class="number">0</span>,<span class="number">2</span>))                .forEach(System.out::println);        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);        employees.stream()                .map(Employee::getName)                .forEach(System.out::println);        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);        Stream&lt;Stream&lt;Character&gt;&gt; stream = list.stream()                .map(TestStreamApi2::filterCharacter);  <span class="comment">//&#123;&#123;a,a,a&#125; &#123;b,b,b,&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>flatMap：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stream.forEach((e)-&gt;e.forEach(System.out::println));        Stream&lt;Character&gt; stream1 = list.stream()                .flatMap(TestStreamApi2::filterCharacter);        stream1.forEach(System.out::println);  <span class="comment">//将整个流全部取出放在一个流中</span></span><br></pre></td></tr></table></figure><h3 id="5-4-排序"><a href="#5-4-排序" class="headerlink" title="5.4 排序"></a>5.4 排序</h3><ul><li>sorted()：自然排序</li><li>sorted(Comparator c)：定制排序</li></ul><p>Comparable：自然排序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test8</span><span class="params">()</span>&#123;        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;ccc&quot;</span>);        list.stream()                .sorted()                .forEach(System.out::println);        List&lt;Integer&gt; list2 = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);        list2.stream()                .filter(TestStreamApi2::compare)                .forEach(System.out::println);    &#125;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(Integer i)</span>&#123;        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;            <span class="keyword">return</span> <span class="literal">true</span>;        &#125;        <span class="keyword">if</span> (i==<span class="number">2</span>)            <span class="keyword">return</span> <span class="literal">true</span>;        <span class="keyword">return</span> <span class="literal">false</span>;    &#125;</span><br></pre></td></tr></table></figure><p>Comparator：定制排序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test9</span><span class="params">()</span> &#123;        employees.stream()                .sorted((e1,e2)-&gt;&#123;                    <span class="keyword">if</span>(e1.getAge() == e2.getAge()) &#123;                        <span class="keyword">return</span> e1.getName().compareTo(e2.getName());                    &#125;                    <span class="keyword">return</span> Integer.compare(e1.getAge(),e2.getAge());                &#125;).forEach(System.out::println);    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-查找、匹配"><a href="#5-5-查找、匹配" class="headerlink" title="5.5 查找、匹配"></a>5.5 查找、匹配</h3><p>终止操作：</p><ul><li>allMatch：检查是否匹配所有元素</li><li>anyMatch：检查是否至少匹配一个元素</li><li>noneMatch：检查是否没有匹配所有元素</li><li>findFirst：返回第一个元素</li><li>findAny：返回当前流中的任意元素</li><li>count：返回流中元素的总个数</li><li>max：返回流中最大值</li><li>min：返回流中最小值</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = Arrays.asList(            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">101</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="number">8000</span>, Employee.Status.VOCATION),            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">102</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">21</span>,<span class="number">6500</span>, Employee.Status.BUSY),            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">103</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">19</span>,<span class="number">9000</span>, Employee.Status.FREE),            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">104</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">21</span>,<span class="number">7000</span>, Employee.Status.BUSY),            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">105</span>,<span class="string">&quot;田七&quot;</span>,<span class="number">30</span>,<span class="number">10000</span>, Employee.Status.FREE)    );    <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> employees.stream()                .allMatch((e) -&gt; e.getStatus().equals(Employee.Status.BUSY));        System.out.println(b);        <span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> employees.stream()                .anyMatch((e) -&gt; e.getStatus().equals(Employee.Status.FREE));        System.out.println(b1);        <span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> employees.stream()                .noneMatch((e) -&gt; e.getStatus().equals(Employee.Status.FREE));        System.out.println(b2);        Optional&lt;Employee&gt; first = employees.stream()                .sorted((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()))                .findFirst();        System.out.println(first.get());        Optional&lt;Employee&gt; any = employees.stream()                .filter((e) -&gt; e.getStatus().equals(Employee.Status.FREE))                .findAny();        System.out.println(any.get());    &#125;    <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> employees.stream()                .count();        System.out.println(count);        Optional&lt;Employee&gt; max = employees.stream()                .max((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));        System.out.println(max.get());        Optional&lt;Employee&gt; min = employees.stream()                .min((e1, e2) -&gt; Integer.compare(e1.getAge(), e2.getAge()));        System.out.println(min.get());        Optional&lt;Double&gt; min1 = employees.stream()                .map(Employee::getSalary)                .min(Double::compare);        System.out.println(min1.get());    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-6-归约-、收集"><a href="#5-6-归约-、收集" class="headerlink" title="5.6 归约 、收集"></a>5.6 归约 、收集</h3><ul><li>归约：reduce(T identity, BinaryOperator) / reduce(BinaryOperator) 可以将流中的数据反复结合起来，得到一个值</li><li>收集：collect 将流转换成其他形式；接收一个 Collector 接口的实现，用于给流中元素做汇总的方法</li></ul><p>reduce:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;         List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);        <span class="type">Integer</span> <span class="variable">reduce</span> <span class="operator">=</span> list.stream()                .reduce(<span class="number">0</span>, (x, y) -&gt; x + y);        System.out.println(reduce);        System.out.println(<span class="string">&quot;--------------------------------------&quot;</span>);        <span class="comment">// 计算工资的总和 有可能为空的才会被封装到Optional中去        Optional&lt;Double&gt; reduce1 = employees.stream()                .map(Employee::getSalary)                .reduce(Double::sum);        System.out.println(reduce1.get());    &#125;</span></span><br></pre></td></tr></table></figure><p>collect:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;        List&lt;String&gt; collect = employees.stream()                .map(Employee::getName)                .collect(Collectors.toList());        collect.stream().forEach(System.out::println);        System.out.println(<span class="string">&quot;----------------------------------------&quot;</span>);        Set&lt;String&gt; collect2 = employees.stream()                .map(Employee::getName)                .collect(Collectors.toSet());        collect2.stream().forEach(System.out::println);        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);        HashSet&lt;String&gt; collect1 = employees.stream()                .map(Employee::getName)                .collect(Collectors.toCollection(HashSet::<span class="keyword">new</span>));        collect1.stream().forEach(System.out::println);    &#125;    <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> &#123;        <span class="comment">// 总数        Long collect = employees.stream()                .collect(Collectors.counting());        System.out.println(collect);        System.out.println(&quot;------------------------------------&quot;);        // 平均值        Double collect1 = employees.stream()                .collect(Collectors.averagingDouble(Employee::getSalary));        System.out.println(collect1);        System.out.println(&quot;------------------------------------&quot;);        // 获取到工资到总和        Double collect2 = employees.stream()                .collect(Collectors.summingDouble(Employee::getSalary));        System.out.println(collect2);        System.out.println(&quot;-------------------------------------&quot;);        // 获取到工资最多到那个对象        Optional&lt;Employee&gt; collect3 = employees.stream()                .collect(Collectors.maxBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));        System.out.println(collect3.get());        // 获取到最小值        Optional&lt;Double&gt; collect4 = employees.stream()                .map(Employee::getSalary)                .collect(Collectors.minBy(Double::compare));        System.out.println(collect4.get());    &#125; @Test    public void test6() &#123;        // 按照状态进行分组        Map&lt;Employee.Status, List&lt;Employee&gt;&gt; collect = employees.stream()                .collect(Collectors.groupingBy(Employee::getStatus));        System.out.println(collect);    &#125;    //多级分组    @Test    public void test7() &#123;        Map&lt;Employee.Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; collect = employees.stream()                .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((e) -&gt; &#123;                    if (e.getAge() &gt; 20) &#123;                        return &quot;成年人&quot;;                    &#125; else if (e.getAge() &gt; 30) &#123;                        return &quot;中年人&quot;;                    &#125; else &#123;                        return &quot;老年人&quot;;                    &#125;                &#125;)));        System.out.println(collect);    &#125;    //分片，分区    @Test    public void test8() &#123;        Map&lt;Boolean, List&lt;Employee&gt;&gt; collect = employees.stream()                .collect(Collectors.partitioningBy((e) -&gt; e.getSalary() &gt; 8000));        System.out.println(collect);    &#125;    @Test    public void test9() &#123;        // 字符串连接        String str = employees.stream()                .map(Employee::getName)                .collect(Collectors.joining(&quot;,&quot;));        System.out.println(str);    &#125;    @Test    public void test10() &#123;        DoubleSummaryStatistics collect = employees.stream()                .collect(Collectors.summarizingDouble(Employee::getSalary));        System.out.println(collect.getMax());        System.out.println(collect.getMin());        System.out.println(collect.getAverage()) ;    &#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqo7ct3ntej30vw0hawnd.jpg" alt="在这里插入图片描述"></p><h3 id="5-7-练习"><a href="#5-7-练习" class="headerlink" title="5.7 练习"></a>5.7 练习</h3><p><strong>案例一：</strong>给定一个数字列表，如何返回一个由每个数的平方构成的列表呢？(如：给定【1，2，3，4，5】，返回【1，4，9，16，25】)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);        List&lt;Integer&gt; collect = list.stream()                .map((i) -&gt; i*i)                .collect(Collectors.toList());        System.out.println(collect);    &#125;</span><br></pre></td></tr></table></figure><p><strong>案例二：</strong>怎样使用 map 和 reduce 数一数流中有多少个 Employee 呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; employees = Arrays.asList(            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">101</span>,<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,<span class="number">8000</span>, Employee.Status.VOCATION),            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">102</span>,<span class="string">&quot;李四&quot;</span>,<span class="number">21</span>,<span class="number">6500</span>, Employee.Status.BUSY),            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">103</span>,<span class="string">&quot;王五&quot;</span>,<span class="number">19</span>,<span class="number">9000</span>, Employee.Status.FREE),            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">104</span>,<span class="string">&quot;赵六&quot;</span>,<span class="number">21</span>,<span class="number">7000</span>, Employee.Status.BUSY),            <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">105</span>,<span class="string">&quot;田七&quot;</span>,<span class="number">30</span>,<span class="number">10000</span>, Employee.Status.FREE)    );    <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;        Optional&lt;Integer&gt; reduce = employees.stream()                .map((e) -&gt; <span class="number">1</span>)   <span class="comment">//每有一个对象返回一个1                .reduce(Integer::sum);  //然后统计下有总和        System.out.println(reduce.get());    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>案例三：</strong>题目在代码中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.streamApi;<span class="keyword">import</span> java.util.Objects;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Trader</span> &#123;    <span class="keyword">private</span> String name;    <span class="keyword">private</span> String city;    <span class="keyword">public</span> <span class="title function_">Trader</span><span class="params">()</span> &#123;    &#125;    <span class="keyword">public</span> <span class="title function_">Trader</span><span class="params">(String name, String city)</span> &#123;        <span class="built_in">this</span>.name = name;        <span class="built_in">this</span>.city = city;    &#125;    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;        <span class="keyword">return</span> name;    &#125;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;        <span class="built_in">this</span>.name = name;    &#125;    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;        <span class="keyword">return</span> city;    &#125;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;        <span class="built_in">this</span>.city = city;    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Trader)) <span class="keyword">return</span> <span class="literal">false</span>;        <span class="type">Trader</span> <span class="variable">trader</span> <span class="operator">=</span> (Trader) o;        <span class="keyword">return</span> Objects.equals(name, trader.name) &amp;&amp; Objects.equals(city, trader.city);    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;        <span class="keyword">return</span> Objects.hash(name, city);    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;        <span class="keyword">return</span> <span class="string">&quot;Trader&#123;&quot;</span> +                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +                <span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +                <span class="string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.streamApi;<span class="keyword">import</span> java.util.Objects;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Transaction</span> &#123;    <span class="keyword">private</span> Trader trader;    <span class="keyword">private</span> <span class="type">int</span> year;    <span class="keyword">private</span> <span class="type">int</span> value;    <span class="keyword">public</span> <span class="title function_">Transaction</span><span class="params">()</span> &#123;    &#125;    <span class="keyword">public</span> <span class="title function_">Transaction</span><span class="params">(Trader trader, <span class="type">int</span> year, <span class="type">int</span> value)</span> &#123;        <span class="built_in">this</span>.trader = trader;        <span class="built_in">this</span>.year = year;        <span class="built_in">this</span>.value = value;    &#125;    <span class="keyword">public</span> Trader <span class="title function_">getTrader</span><span class="params">()</span> &#123;        <span class="keyword">return</span> trader;    &#125;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTrader</span><span class="params">(Trader trader)</span> &#123;        <span class="built_in">this</span>.trader = trader;    &#125;    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getYear</span><span class="params">()</span> &#123;        <span class="keyword">return</span> year;    &#125;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setYear</span><span class="params">(<span class="type">int</span> year)</span> &#123;        <span class="built_in">this</span>.year = year;    &#125;    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">()</span> &#123;        <span class="keyword">return</span> value;    &#125;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> value)</span> &#123;        <span class="built_in">this</span>.value = value;    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Transaction)) <span class="keyword">return</span> <span class="literal">false</span>;        <span class="type">Transaction</span> <span class="variable">that</span> <span class="operator">=</span> (Transaction) o;        <span class="type">return</span> <span class="variable">year</span> <span class="operator">=</span>= that.year &amp;&amp; value == that.value &amp;&amp; Objects.equals(trader, that.trader);    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;        <span class="keyword">return</span> Objects.hash(trader, year, value);    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;        <span class="keyword">return</span> <span class="string">&quot;Transaction&#123;&quot;</span> +                <span class="string">&quot;trader=&quot;</span> + trader +                <span class="string">&quot;, year=&quot;</span> + year +                <span class="string">&quot;, value=&quot;</span> + value +                <span class="string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.streamApi;<span class="keyword">import</span> org.junit.Before;<span class="keyword">import</span> org.junit.Test;<span class="keyword">import</span> java.util.Arrays;<span class="keyword">import</span> java.util.List;<span class="keyword">import</span> java.util.Optional;<span class="keyword">import</span> java.util.stream.Collectors;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTransaction</span> &#123;    List&lt;Transaction&gt; transactions = <span class="literal">null</span>;    <span class="meta">@Before</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;        <span class="type">Trader</span> <span class="variable">raoul</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trader</span>(<span class="string">&quot;Rauol&quot;</span>,<span class="string">&quot;huaian&quot;</span>);        <span class="type">Trader</span> <span class="variable">mario</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trader</span>(<span class="string">&quot;Mario&quot;</span>,<span class="string">&quot;nanjing&quot;</span>);        <span class="type">Trader</span> <span class="variable">alan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trader</span>(<span class="string">&quot;Alan&quot;</span>,<span class="string">&quot;suzhou&quot;</span>);        <span class="type">Trader</span> <span class="variable">brian</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Trader</span>(<span class="string">&quot;Bsrian&quot;</span>,<span class="string">&quot;huaian&quot;</span>);        transactions = Arrays.asList(                <span class="keyword">new</span> <span class="title class_">Transaction</span>(brian,<span class="number">2011</span>,<span class="number">300</span>),                <span class="keyword">new</span> <span class="title class_">Transaction</span>(raoul,<span class="number">2012</span>,<span class="number">1000</span>),                <span class="keyword">new</span> <span class="title class_">Transaction</span>(raoul,<span class="number">2011</span>,<span class="number">400</span>),                <span class="keyword">new</span> <span class="title class_">Transaction</span>(mario,<span class="number">2012</span>,<span class="number">710</span>),                <span class="keyword">new</span> <span class="title class_">Transaction</span>(mario,<span class="number">2012</span>,<span class="number">700</span>),                <span class="keyword">new</span> <span class="title class_">Transaction</span>(alan,<span class="number">2012</span>,<span class="number">950</span>)        );    &#125;    <span class="comment">//1.找出2011年发生的所有交易，并按交易额排序（从低到高）    @Test    public void test1() &#123;        transactions.stream()                .filter((e)-&gt;e.getYear()==2011)                .sorted((e1,e2)-&gt;Integer.compare(e1.getValue(),e2.getValue()))                .forEach(System.out::println);    &#125;    //2.交易员都在哪些城市工作过    @Test    public void test2() &#123;        List&lt;String&gt; collect = transactions.stream()                .map((t) -&gt; t.getTrader().getCity())                .distinct()                .collect(Collectors.toList());        System.out.println(collect);    &#125;    //3.查找所有来自淮安的交易员，并按姓名排序    @Test    public void test3() &#123;        transactions.stream()                .filter((t)-&gt;t.getTrader().getCity().equals(&quot;huaian&quot;))                .sorted((t1,t2)-&gt; t1.getTrader().getName().compareTo(t2.getTrader().getName()))                .distinct()                .forEach(System.out::println);    &#125;    //4.返回所有交易员的姓名字符串，按字母顺序排序    @Test    public void test4() &#123;        transactions.stream()                .map((t)-&gt;t.getTrader().getName())                .sorted()                .distinct()                .forEach(System.out::println);        System.out.println(&quot;------------------------------------&quot;);        String reduce = transactions.stream()                .map((t) -&gt; t.getTrader().getName())                .sorted()                .reduce(&quot;&quot;, String::concat);        System.out.println(reduce);    &#125;    //5.有没有交易员是在南京工作的    @Test    public void test5() &#123;        boolean nanjing = transactions.stream()                .anyMatch((t) -&gt; t.getTrader().getCity().equals(&quot;nanjing&quot;));        System.out.println(nanjing);    &#125;    //6.打印生活在淮安的交易员的所有交易额    @Test    public void test6() &#123;        Optional&lt;Integer&gt; huaian = transactions.stream()                .filter((t) -&gt; t.getTrader().getCity().equals(&quot;huaian&quot;))                .map((t) -&gt; t.getValue())                .reduce(Integer::sum);  // 将流中元素反复结合起来得到一个值        System.out.println(huaian.get());    &#125;    //7.所有的交易中，最高的交易额是多少    @Test    public void test7() &#123;        Optional&lt;Integer&gt; collect = transactions.stream()                .map((t) -&gt; t.getValue())                .collect(Collectors.maxBy(Integer::compare));        System.out.println(collect.get());        System.out.println(&quot;-------------------------------&quot;);        Optional&lt;Transaction&gt; max = transactions.stream()                .max((t1, t2) -&gt; Integer.compare(t1.getValue(), t2.getValue()));        System.out.println(max        );    &#125;    //8.所有的交易中，最小的交易额是多少    @Test    public void test8() &#123;        Optional&lt;Integer&gt; collect = transactions.stream()                .map((t) -&gt; t.getValue())                .collect(Collectors.minBy(Integer::compare));        System.out.println(collect.get());        Optional&lt;Integer&gt; min = transactions.stream()                .map((t) -&gt; t.getValue())                .min(Integer::compare);        System.out.println(min.get());    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-8-并行流"><a href="#5-8-并行流" class="headerlink" title="5.8 并行流"></a>5.8 并行流</h3><ul><li>并行流：就是把一个内容分成几个数据块，并用不同的线程分别处理每个数据块的流</li><li>Java 8 中将并行进行了优化，我们可以很容易的对数据进行操作；Stream API 可以声明性地通过 parallel() 与 sequential() 在并行流与串行流之间切换</li></ul><p>Fork / Join 框架：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqo7iaefmkj30vv0m0wn0.jpg" alt="在这里插入图片描述"></p><p>Fork / Join 实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.streamApi;<span class="keyword">import</span> java.util.concurrent.RecursiveAction;<span class="keyword">import</span> java.util.concurrent.RecursiveTask;<span class="comment">/** * RecursiveAction 方法没有返回值 * RecursiveTask方法有返回值 * */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForkJoinCalculate</span> <span class="keyword">extends</span> <span class="title class_">RecursiveTask</span>&lt;Long&gt; &#123;    <span class="keyword">private</span> <span class="type">long</span> start;    <span class="keyword">private</span> <span class="type">long</span> end;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">THRESHOLD</span> <span class="operator">=</span> <span class="number">10000</span>;    <span class="keyword">public</span> <span class="title function_">ForkJoinCalculate</span><span class="params">(<span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;        <span class="built_in">this</span>.start = start;        <span class="built_in">this</span>.end = end;    &#125;    <span class="meta">@Override</span>    <span class="keyword">protected</span> Long <span class="title function_">compute</span><span class="params">()</span> &#123;        <span class="type">long</span> <span class="variable">length</span> <span class="operator">=</span> end - start;        <span class="keyword">if</span> (length &lt;= THRESHOLD) &#123;            <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;            <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;                sum += i;            &#125;            <span class="keyword">return</span> sum;        &#125;        <span class="keyword">else</span> &#123;            <span class="type">long</span> <span class="variable">middle</span> <span class="operator">=</span> (start + end) /<span class="number">2</span>;            <span class="type">ForkJoinCalculate</span> <span class="variable">left</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinCalculate</span>(start, middle);            left.fork();   <span class="comment">//拆分子任务，同时加入线程队列            ForkJoinCalculate right = new ForkJoinCalculate(middle + 1, end);            right.fork();            return left.join() + right.join();        &#125;    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.streamApi;<span class="keyword">import</span> org.junit.Test;<span class="keyword">import</span> java.time.Duration;<span class="keyword">import</span> java.time.Instant;<span class="keyword">import</span> java.util.concurrent.ForkJoinPool;<span class="keyword">import</span> java.util.concurrent.ForkJoinTask;<span class="keyword">import</span> java.util.stream.LongStream;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestForkJoin</span> &#123;    <span class="comment">/**     * fork join框架     * */</span>    <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;        <span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();        <span class="type">ForkJoinPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ForkJoinPool</span>();        ForkJoinTask&lt;Long&gt; task = <span class="keyword">new</span> <span class="title class_">ForkJoinCalculate</span>(<span class="number">0</span>,<span class="number">100000000l</span>);        <span class="type">Long</span> <span class="variable">sum</span> <span class="operator">=</span> pool.invoke(task);        System.out.println(sum);        <span class="type">Instant</span> <span class="variable">end</span> <span class="operator">=</span> Instant.now();        System.out.println(<span class="string">&quot;耗时：&quot;</span>+ Duration.between(start,end).toMillis());    &#125;    <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;        <span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();        <span class="type">long</span> <span class="variable">sum</span>  <span class="operator">=</span> <span class="number">0L</span>;        <span class="keyword">for</span> (<span class="type">long</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">100000000l</span>; i++) &#123;            sum += i;        &#125;        System.out.println(sum);        <span class="type">Instant</span> <span class="variable">end</span> <span class="operator">=</span> Instant.now();        System.out.println(<span class="string">&quot;耗时：&quot;</span>+ Duration.between(start,end).toMillis());    &#125;    <span class="comment">/**     * java8并行流     * */</span>    <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;        <span class="type">Instant</span> <span class="variable">start</span> <span class="operator">=</span> Instant.now();        LongStream.rangeClosed(<span class="number">0</span>,<span class="number">100000000l</span>)                .parallel()                .reduce(<span class="number">0</span>,Long::sum);        <span class="type">Instant</span> <span class="variable">end</span> <span class="operator">=</span> Instant.now();        System.out.println(<span class="string">&quot;耗时：&quot;</span>+ Duration.between(start,end).toMillis());    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="六、Optional"><a href="#六、Optional" class="headerlink" title="六、Optional"></a>六、Optional</h2><p><strong>定义：</strong>Optional 类 (java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在用 Optional 可以更好的表达这个概念；并且可以避免空指针异常</p><p>常用方法：</p><ul><li>Optional.of(T t)：创建一个 Optional 实例</li><li>Optional.empty(T t)：创建一个空的 Optional 实例</li><li>Optional.ofNullable(T t)：若 t 不为 null，创建 Optional 实例，否则空实例</li><li>isPresent()：判断是否包含某值</li><li>orElse(T t)：如果调用对象包含值，返回该值，否则返回 t</li><li>orElseGet(Supplier s)：如果调用对象包含值，返回该值，否则返回 s 获取的值</li><li>map(Function f)：如果有值对其处理，并返回处理后的 Optional，否则返回 </li><li>Optional.empty()</li><li>flatmap(Function mapper)：与 map 相似，要求返回值必须是 Optional</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.optional;<span class="keyword">import</span> com.lhh.streamApi.Employee;<span class="keyword">import</span> org.junit.Test;<span class="keyword">import</span> java.util.Optional;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestOptional</span> &#123;    <span class="comment">/**     * optional 容器类的常用方法有：     * Optional.of(T t): 创建一个optional实例     * Optional.empty(T t): 创建一个空的optional实例     * Optional.ofNullable(T t):若t不为null,创建optional实例，否则创建空实例。     * isPresent()  判断是否有值     * orElse(T t)  如果调用对象包含值，则返回该值，否则返回T     * orElseGet(Supplier s) 如果调用对象包含值，则返回该值，否则返回s获取的值     * map(Function f)   如果有值对其进行处理，并返回处理后的Optional,否则返回Optional.empty()     * flatMap(Function f) 与mapper类似，要求返回值必须是Optional     * */</span>    <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;        <span class="comment">// 可以快速定位空指针异常的地方  of方式不能传入null值        Optional&lt;Employee&gt; employee = Optional.of(new Employee());        Employee employee1 = employee.get();        System.out.println(employee1);    &#125;    @Test    public void test2() &#123;        Optional&lt;Object&gt; empty = Optional.empty();        System.out.println(empty.get());    &#125;    @Test    public void test3() &#123;        //两种方式均可，只是传入null时，无法获取到值//        Optional&lt;Object&gt; empty = Optional.ofNullable(null);        Optional&lt;Object&gt; empty = Optional.ofNullable(new Employee());        System.out.println(empty.get());    &#125;    @Test    public void test4() &#123;        Optional&lt;Employee&gt; empty = Optional.ofNullable(new Employee());//        if (empty.isPresent()) &#123;//            System.out.println(empty.get());//        &#125;        // 避免了空指针异常的问题        Employee zhangsan = empty.orElse(new Employee(1, &quot;zhangsan&quot;, 2, 10, Employee.Status.BUSY));        System.out.println(zhangsan );    &#125;    @Test    public void test5() &#123;        Optional&lt;Employee&gt; zhangsan = Optional.ofNullable(new Employee(1, &quot;zhangsan&quot;, 2, 10, Employee.Status.BUSY));//        Optional&lt;String&gt; s = zhangsan.map((e) -&gt; e.getName());        Optional&lt;String&gt; s = zhangsan.flatMap((e) -&gt; Optional.of(e.getName()));        System.out.println(s.get());    &#125;    //例题：需求：获取一个男人心中女神的名称    @Test    public void test6() &#123;    &#125;    public String getGodnessName(Man man) &#123;        if (man != null) &#123;            Goddness goddness = man.getGoddness();            if (goddness != null) &#123;                return goddness.getName();            &#125;        &#125;        return &quot;cy&quot;;    &#125;    public String getGodnessName2(Optional&lt;NewMan&gt; newMan) &#123;        return newMan.orElse(new NewMan())                .getGoddness()                .orElse(new Goddness(&quot;cy&quot;))                .getName();    &#125;    @Test    public void test7() &#123;        Optional&lt;NewMan&gt; op = Optional.ofNullable(new NewMan());        String godnessName2 = getGodnessName2(op);        System.out.println(godnessName2);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.optional;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Goddness</span> &#123;    <span class="keyword">private</span> String name;    <span class="keyword">public</span> <span class="title function_">Goddness</span><span class="params">()</span> &#123;    &#125;    <span class="keyword">public</span> <span class="title function_">Goddness</span><span class="params">(String name)</span> &#123;        <span class="built_in">this</span>.name = name;    &#125;    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;        <span class="keyword">return</span> name;    &#125;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;        <span class="built_in">this</span>.name = name;    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;        <span class="keyword">return</span> <span class="string">&quot;Goddness&#123;&quot;</span> +                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +                <span class="string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.optional;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> &#123;    <span class="keyword">private</span> Goddness goddness;    <span class="keyword">public</span> <span class="title function_">Man</span><span class="params">()</span> &#123;    &#125;    <span class="keyword">public</span> <span class="title function_">Man</span><span class="params">(Goddness goddness)</span> &#123;        <span class="built_in">this</span>.goddness = goddness;    &#125;    <span class="keyword">public</span> Goddness <span class="title function_">getGoddness</span><span class="params">()</span> &#123;        <span class="keyword">return</span> goddness;    &#125;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGoddness</span><span class="params">(Goddness goddness)</span> &#123;        <span class="built_in">this</span>.goddness = goddness;    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;        <span class="keyword">return</span> <span class="string">&quot;Man&#123;&quot;</span> +                <span class="string">&quot;goddness=&quot;</span> + goddness +                <span class="string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.optional;<span class="keyword">import</span> java.util.Optional;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewMan</span> &#123;    <span class="keyword">private</span> Optional&lt;Goddness&gt; goddness = Optional.empty();    <span class="keyword">public</span> <span class="title function_">NewMan</span><span class="params">(Optional&lt;Goddness&gt; goddness)</span> &#123;        <span class="built_in">this</span>.goddness = goddness;    &#125;    <span class="keyword">public</span> <span class="title function_">NewMan</span><span class="params">()</span> &#123;    &#125;    <span class="keyword">public</span> Optional&lt;Goddness&gt; <span class="title function_">getGoddness</span><span class="params">()</span> &#123;        <span class="keyword">return</span> goddness;    &#125;    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGoddness</span><span class="params">(Optional&lt;Goddness&gt; goddness)</span> &#123;        <span class="built_in">this</span>.goddness = goddness;    &#125;    <span class="meta">@Override</span>    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;        <span class="keyword">return</span> <span class="string">&quot;NewMan&#123;&quot;</span> +                <span class="string">&quot;goddness=&quot;</span> + goddness +                <span class="string">&#x27;&#125;&#x27;</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="七、接口"><a href="#七、接口" class="headerlink" title="七、接口"></a>七、接口</h2><h3 id="7-1-默认方法"><a href="#7-1-默认方法" class="headerlink" title="7.1 默认方法"></a>7.1 默认方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原本接口中只允许有 全局静态常量和抽象方法public interface MyFunc &#123;    //java8中新增了 拥有了可以实现的默认的方法    default String getName() &#123;        return &quot;哈哈&quot;;    &#125;    // 也可以有静态方法    public static void show() &#123;        System.out.println(&quot;这是一个静态方法&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><p>类优先原则：</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqo7nceunij30x80g7nao.jpg" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;        <span class="keyword">return</span> <span class="string">&quot;嘿嘿嘿&quot;</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原本接口中只允许有 全局静态常量和抽象方法public interface MyFunc &#123;    //java8中新增了 拥有了可以实现的默认的方法    default String getName() &#123;        return &quot;哈哈&quot;;    &#125;    // 也可以有静态方法    public static void show() &#123;        System.out.println(&quot;这是一个静态方法&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyInterface</span> &#123;    <span class="keyword">default</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;        <span class="keyword">return</span> <span class="string">&quot;嘻嘻&quot;</span>;    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">implements</span> <span class="title class_">MyFunc</span>,MyInterface&#123;    <span class="meta">@Override</span>    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;        <span class="keyword">return</span> MyInterface.<span class="built_in">super</span>.getName();    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * * 接口中的默认方法和静态方法 * */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDefaultStaticMethod</span> &#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        <span class="comment">/**         * 类优先         * */</span>        <span class="type">SubClass</span> <span class="variable">sub</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubClass</span>();        System.out.println(sub.getName());        MyFunc.show();    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="7-2-静态方法"><a href="#7-2-静态方法" class="headerlink" title="7.2 静态方法"></a>7.2 静态方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原本接口中只允许有 全局静态常量和抽象方法public interface MyFunc &#123;    //java8中新增了 拥有了可以实现的默认的方法    default String getName() &#123;        return &quot;哈哈&quot;;    &#125;    // 也可以有静态方法    public static void show() &#123;        System.out.println(&quot;这是一个静态方法&quot;);    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="八-DateTime-API"><a href="#八-DateTime-API" class="headerlink" title="八. DateTime API"></a>八. DateTime API</h2><h3 id="8-1-解决传统线程安全问题"><a href="#8-1-解决传统线程安全问题" class="headerlink" title="8.1 解决传统线程安全问题"></a>8.1 解决传统线程安全问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.DateFormat;<span class="keyword">import</span> java.text.ParseException;<span class="keyword">import</span> java.text.SimpleDateFormat;<span class="keyword">import</span> java.util.Date;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateFormatThreadLocal</span> &#123;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; df = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;DateFormat&gt;()&#123;        <span class="keyword">protected</span> DateFormat <span class="title function_">initialValue</span><span class="params">()</span> &#123;            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMdd&quot;</span>);        &#125;    &#125;;    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> <span class="keyword">throws</span> ParseException &#123;        <span class="keyword">return</span> df.get().parse(source);    &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lhh.newtime;<span class="keyword">import</span> java.time.LocalDate;<span class="keyword">import</span> java.time.format.DateTimeFormatter;<span class="keyword">import</span> java.util.ArrayList;<span class="keyword">import</span> java.util.List;<span class="keyword">import</span> java.util.concurrent.*;<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSimpleDateFormat</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;<span class="comment">//        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyyMMdd&quot;);////        Callable&lt;Date&gt; task = new Callable&lt;Date&gt;() &#123;//            @Override//            public Date call() throws Exception &#123;//                //线程安全方式//                return DateFormatThreadLocal.convert(&quot;20160812&quot;);//                //线程不安全方式////                return sdf.parse(&quot;20160812&quot;);//            &#125;//        &#125;;////        ExecutorService pool = Executors.newFixedThreadPool(10);////        List&lt;Future&lt;Date&gt;&gt; futures = new ArrayList&lt;&gt;();////        for (int i = 0; i &lt; 10; i++) &#123;//            futures.add(pool.submit(task));//        &#125;//////        for (Future&lt;Date&gt; future : futures) &#123;////            System.out.println(future.get());//        &#125;////        pool.shutdown();        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(&quot;yyyyMMdd&quot;);        Callable&lt;LocalDate&gt; task = new Callable&lt;LocalDate&gt;() &#123;            @Override            public LocalDate call() throws Exception &#123;                //线程安全方式                return LocalDate.parse(&quot;20160812&quot;, dtf);                //线程不安全方式//                return sdf.parse(&quot;20160812&quot;);            &#125;        &#125;;        ExecutorService pool = Executors.newFixedThreadPool(10);        List&lt;Future&lt;LocalDate&gt;&gt; futures = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; 10; i++) &#123;            futures.add(pool.submit(task));        &#125;        for (Future&lt;LocalDate &gt; future : futures) &#123;            System.out.println(future.get());        &#125;        pool.shutdown();    &#125;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-2-本地时间、日期"><a href="#8-2-本地时间、日期" class="headerlink" title="8.2 本地时间、日期"></a>8.2 本地时间、日期</h3><p>​    <img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqozjmeopzj30uq0kbthx.jpg" alt="img"></p><p>常用方法：</p><div class="table-container"><table><thead><tr><th style="text-align:left"><strong>方法名</strong></th><th><strong>返回值类型</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td style="text-align:left">now( )</td><td>static LocalDateTime</td><td>从默认时区的系统时钟获取当前日期</td></tr><tr><td style="text-align:left">of(int year, int month, int dayOfMonth, int hour, int minute, int second)</td><td>static LocalDateTime</td><td>从年，月，日，小时，分钟和秒获得 LocalDateTime的实例，将纳秒设置为零</td></tr><tr><td style="text-align:left">plus(long amountToAdd, TemporalUnit unit)</td><td>LocalDateTime</td><td>返回此日期时间的副本，并添加指定的数量</td></tr><tr><td style="text-align:left">get(TemporalField field)</td><td>int</td><td>从此日期时间获取指定字段的值为 int</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.LocalDate  LocalTime  LocalDateTime    @Test    public void test1() &#123;        // 获取当前时间        LocalDateTime ldt = LocalDateTime.now();        System.out.println(ldt);  //2021-05-18T19:46:00.996        LocalDateTime of = LocalDateTime.of(2021, 12, 4, 5, 20);        System.out.println(of);        //当前年份加上两年        LocalDateTime localDateTime = ldt.plusYears(2);        System.out.println(localDateTime);   //2023-05-18T19:46:00.996        //当前月份减去两个月        LocalDateTime localDateTime1 = ldt.minusMonths(2);        System.out.println(localDateTime1);  //2021-03-18T19:47:13.529        System.out.println(&quot;--------------------------&quot;);        System.out.println(ldt.getYear());  //2021        System.out.println(ldt.getMonthValue());  //5        System.out.println(ldt.getDayOfMonth());   //18        System.out.println(ldt.getHour());    //19        System.out.println(ldt.getMinute());  //48        System.out.println(ldt.getSecond());  //46    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-时间戳"><a href="#8-3-时间戳" class="headerlink" title="8.3 时间戳"></a>8.3 时间戳</h3><p>Instant：以 Unix 元年 1970-01-01 00:00:00 到某个时间之间的毫秒值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.Instant  时间戳（以1970年0点0时0分0秒到某个时间到毫秒值）  计算机所能识别的时间间隔    @Test        public void test2() &#123;            Instant ins1 = Instant.now();   //默认获取以utc时区为基础的            System.out.println(ins1);            // 带有偏移时间差的信息            OffsetDateTime offsetDateTime = ins1.atOffset(ZoneOffset.ofHours(8));            // 相比较utc加上8个小时            System.out.println(offsetDateTime);  //2021-05-18T19:52:31.836+08:00            //转换为毫秒值  -&gt;时间戳            System.out.println(ins1.toEpochMilli());   //1621338924590            //依据时间戳显示时间            Instant instant = Instant.ofEpochMilli(1);            System.out.println(instant);   //1970-01-01T00:00:00.001Z    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-4-日期、时间差"><a href="#8-4-日期、时间差" class="headerlink" title="8.4 日期、时间差"></a>8.4 日期、时间差</h3><ul><li>Duration：计算两个时间之间的间隔</li><li>Period：计算两个日期之间的间隔</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.Duation  计算两个时间之间的间隔    //Period：计算两个&quot;日期之间的间隔&quot;    @Test    public void test3() &#123;        // Duation计算两个时间之间的间隔        Instant ins1 = Instant.now();        try&#123;            Thread.sleep(1000);        &#125;catch (InterruptedException e) &#123;        &#125;        Instant ins2 = Instant.now();        Duration between = Duration.between(ins1, ins2);        System.out.println(between.toMillis());  //计算两个时间之间的间隔  毫秒 1004        System.out.println(&quot;--------------------------------------&quot;);        LocalDateTime ldt1 = LocalDateTime.now();        try &#123;            Thread.sleep(1000);        &#125; catch (InterruptedException e) &#123;        &#125;        LocalDateTime ldt2 = LocalDateTime.now();        System.out.println(Duration.between(ldt1, ldt2).toMillis());  //1001    &#125;    @Test    public void test4() &#123;        // period计算两个日期之间的间隔        LocalDate ld1 = LocalDate.of(2021,4,10);        LocalDate ld2 = LocalDate.now();        Period between = Period.between(ld1, ld2);        System.out.println(between);        System.out.println(between.getYears());  //0        System.out.println(between.getMonths());  //1        System.out.println(between.getDays());   //8    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-5-时间矫正器"><a href="#8-5-时间矫正器" class="headerlink" title="8.5 时间矫正器"></a>8.5 时间矫正器</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gqozrjuwgdj30v80jljze.jpg" alt="img"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.TemporaAdjuster; 时间矫正器    @Test    public void test5() &#123;        LocalDateTime ldt = LocalDateTime.now();        System.out.println(ldt);   //2021-05-19T22:53:08.870        LocalDateTime localDateTime = ldt.withDayOfMonth(10);        System.out.println(localDateTime);   //2021-05-10T22:53:08.870        //计算下一个周日        LocalDateTime with = ldt.with(TemporalAdjusters.next(DayOfWeek.SUNDAY));        System.out.println(with);   //2021-05-23T22:58:13.293        //自定义下一个工作日        LocalDateTime ldt5 = ldt.with((l) -&gt; &#123;            LocalDateTime ldt4 = (LocalDateTime) l;            DayOfWeek dayOfWeek = ldt4.getDayOfWeek();            if (dayOfWeek.equals(DayOfWeek.FRIDAY)) &#123;                return ldt4.plusDays(3);            &#125; else if (dayOfWeek.equals(DayOfWeek.SATURDAY)) &#123;                return ldt4.plusDays(2);            &#125; else &#123;                return ldt4.plusDays(1);            &#125;        &#125;);        System.out.println(ldt5);   //2021-05-20T23:03:01.847    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-5-时间格式化"><a href="#8-5-时间格式化" class="headerlink" title="8.5 时间格式化"></a>8.5 时间格式化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//5.时间格式化和时区的处理    @Test    public void test6() &#123;        //DateTimeFormatter  格式化时间和日期        DateTimeFormatter dtf = DateTimeFormatter.ISO_DATE_TIME;        LocalDateTime ldt = LocalDateTime.now();        String format = dtf.format(ldt);        System.out.println(format);  //2021-05-19T23:06:59.431        System.out.println(&quot;----------------------------------&quot;);        // 时间-&gt;str        DateTimeFormatter dtf2 = DateTimeFormatter.ofPattern(&quot;yyyy年MM月dd日&quot;);        String format1 = dtf2.format(ldt);        System.out.println(format1);  //2021年05月19日&#x27;        //str-&gt;时间  解析字符串的时间格式        LocalDate parse = LocalDate.parse(format1, dtf2);        System.out.println(parse);   //2021-05-19    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="8-6-时区处理"><a href="#8-6-时区处理" class="headerlink" title="8.6 时区处理"></a>8.6 时区处理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6.时区的api操作    @Test    public void test7() &#123;        //列出所有的时区        Set&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();//        availableZoneIds.forEach(System.out::println);        //指定时区显示时间        LocalDateTime now = LocalDateTime.now(ZoneId.of(&quot;America/Marigot&quot;));        System.out.println(now);   //2021-05-19T11:30:55.838        LocalDateTime now1 = LocalDateTime.now();        // 带有时区的时间和日期        ZonedDateTime dateTime = now1.atZone(ZoneId.of(&quot;America/Marigot&quot;));        System.out.println(dateTime);   //2021-05-19T23:32:31.169-04:00[America/Marigot]    &#125;</span></span><br></pre></td></tr></table></figure><h2 id="九、注释"><a href="#九、注释" class="headerlink" title="九、注释"></a>九、注释</h2><h3 id="9-1-重复注释"><a href="#9-1-重复注释" class="headerlink" title="9.1 重复注释"></a>9.1 重复注释</h3><p>定义注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repeatable(MyAnnotions.class)</span><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><span class="meta">@Retention(RetentionPolicy.SOURCE)</span><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnocation &#123;    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;lhh&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>定义容器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><span class="meta">@Retention(RetentionPolicy.SOURCE)</span><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotions &#123;    MyAnnocation[] value();&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * 重复注解 * */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestAnnoation</span> &#123;    <span class="meta">@MyAnnocation(&quot;hello&quot;)</span>    <span class="meta">@MyAnnocation(&quot;world&quot;)</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(<span class="meta">@MyAnnocation(&quot;abc&quot;)</span> String str)</span> &#123;    &#125;        <span class="meta">@Test</span>    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;        Class&lt;TestAnnoation&gt; classz = TestAnnoation.class;        <span class="type">Method</span> <span class="variable">show</span> <span class="operator">=</span> classz.getMethod(<span class="string">&quot;show&quot;</span>);        MyAnnocation[] annotationsByType = show.getAnnotationsByType(MyAnnocation.class);        <span class="keyword">for</span> (MyAnnocation myannotion:annotationsByType) &#123;            System.out.println(myannotion.value());        &#125;    &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-类型注解"><a href="#9-2-类型注解" class="headerlink" title="9.2 类型注解"></a>9.2 类型注解</h3><p>Java 8 新增注解：新增ElementType.TYPE_USE 和ElementType.TYPE_PARAMETER（在Target上）</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
